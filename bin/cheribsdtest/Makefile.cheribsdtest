# $FreeBSD$

.include <src.opts.mk>

SRCS=	cheribsdtest.c

SRCS+=	cheribsdtest_bounds_globals.c					\
	cheribsdtest_bounds_globals_x.c					\
	cheribsdtest_bounds_heap.c					\
	cheribsdtest_bounds_stack.c					\
	cheribsdtest_fault.c						\
	cheribsdtest_flag_captured.c					\
	cheribsdtest_kbounce.c						\
	cheribsdtest_local_global.c					\
	cheribsdtest_longjmp.c						\
	cheribsdtest_printf.c						\
	cheribsdtest_registers.c					\
	cheribsdtest_sealcap.c						\
	cheribsdtest_signal.c						\
	cheribsdtest_strfcap.c						\
	cheribsdtest_string.c						\
	cheribsdtest_syscall.c						\
	cheribsdtest_tls.c						\
	cheribsdtest_util.c						\
	cheribsdtest_vm.c						\
	cheribsdtest_zlib.c
.if ${MACHINE_ABI:Mpurecap}
SRCS+=	cheribsdtest_bounds_varargs.c					\
	cheribsdtest_sentries.c
.endif

CHERIBSDTEST_DIR:=	${.PARSEDIR}
.PATH: ${CHERIBSDTEST_DIR}
CFLAGS+=	-I${CHERIBSDTEST_DIR}/${MACHINE}

CFLAGS+=	'-DPROG="${PROG}"'

.if ${MACHINE_ABI:Mpurecap}
SRCS+=	cheribsdtest_cheriabi.c
SRCS+=	cheribsdtest_cheriabi_libc.c
SRCS+=	cheribsdtest_cheriabi_open.c
.endif

# This test is broken as written
#SRCS+=	cheribsdtest_vm_swap.c
#CFLAGS.cheribsdtest_vm_swap.c+=-Wno-cheri-capability-misuse

.if ${MACHINE} == mips
.PATH: ${SRCTOP}/sys/mips/cheri
SRCS+=	cheri_memcpy_c.S
CFLAGS.cheri_memcpy_c.S=-D__KERN_FUNC_PREFIX -D_KERNEL -DINVARIANTS
CFLAGS+=	-DKERNEL_MEMCPY_TESTS
.endif

.if ${MACHINE} == "mips"
.ifdef CHERI_C_TESTS
CHERI_C_TESTS_DIR=	${SRCTOP}/contrib/subrepo-cheri-c-tests
.if exists(${CHERI_C_TESTS_DIR}/Makefile)
.PATH: ${CHERI_C_TESTS_DIR} \
		${CHERI_C_TESTS_DIR}/clang-hybrid \
		${CHERI_C_TESTS_DIR}/clang-purecap \
		${CHERI_C_TESTS_DIR}/libc
CFLAGS+=	-DCHERI_C_TESTS \
		-I${CHERI_C_TESTS_DIR}

CFLAGS+=	-DTEST_CUSTOM_FRAMEWORK -I${CHERIBSDTEST_DIR} \
		-DHAVE_MALLOC_USUABLE_SIZE
TEST_SRCS!=	grep ^DECLARE_TEST ${CHERI_C_TESTS_DIR}/cheri_c_testdecls.h | \
		    sed -e 's/.*(\([^,]*\),.*/\1.c/'
SRCS+=	test_runtime.c	\
	${TEST_SRCS}

.for test in ${TEST_SRCS}
# Avoid the need for extern declarations for variables/functions that are
# declared global so that the compiler emits them
CFLAGS.${test}+=-Wno-missing-prototypes -Wno-missing-variable-declarations
.endfor
.endif
.endif
.endif

.ifdef CHERIBSD_THREAD_TESTS
CFLAGS+=	-DCHERIBSD_THREAD_TESTS
.endif

MAN=

LIBADD+= 	z
LIBADD+=	xo util

.if ${MK_LIBCHERI} == "yes"
SRCS+=	cheribsdtest_sandbox.S
.endif

.ifdef CHERIBSD_DYNAMIC_TESTS
CFLAGS+=	-DCHERIBSD_DYNAMIC_TESTS
CFLAGS+=	'-DLIBM_SONAME="libm.so.5"'
CFLAGS+=	-I${SRCTOP}/lib/libcheribsdtest_dynamic
LIBADD+=	cheribsdtest_dynamic
SRCS+=		cheribsdtest_lazy_bind.c
.else
NO_SHARED?=	YES
# XXX-JC: Enable unconditionally once we have a dynamic libcheri
.if ${MK_LIBCHERI} == "yes"
CFLAGS+=	-DCHERIBSD_LIBCHERI_TESTS
LIBADD+=	cheri
SRCS+=		cheribsdtest_ccall.c					\
		cheribsdtest_fd.c					\
		cheribsdtest_libcheri.c					\
		cheribsdtest_libcheri_cxx.cc				\
		cheribsdtest_libcheri_fault.c				\
		cheribsdtest_libcheri_local.c				\
		cheribsdtest_libcheri_trustedstack.c			\
		cheribsdtest_libcheri_var.c
.endif
.endif

.ifdef CHERIBSD_THREAD_TESTS
LIBADD+=	pthread
SRCS+=		cheribsdtest_tls_threads.c
# XXX-JC: Enable unconditionally once we have a dynamic libcheri
.ifndef CHERIBSD_DYNAMIC_TESTS
.if ${MK_LIBCHERI} == "yes"
SRCS+=		cheribsdtest_libcheri_pthreads.c
.endif
.endif
.endif

.include <bsd.prog.mk>
