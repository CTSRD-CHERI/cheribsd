# $FreeBSD$

.if !targets(__<${_this:T}>__)
__<${_this:T}>__:

.include <src.libnames.mk>

# Makefile for the compatibility libraries.
# - 32-bit compat libraries on MIPS, PowerPC, and AMD64.
# - 64-bit compat on CHERI MIPS

.include <bsd.compat.mk>

# Yes, the flags are redundant.
LIBCOMPAT_COMPILERS= \
		CC="${XCC} ${LIBCOMPATCFLAGS}" \
		CXX="${XCXX} ${LIBCOMPATCXXFLAGS} ${LIBCOMPATCFLAGS}" \
		CPP="${XCPP} ${LIBCOMPATCFLAGS}"
LIBCOMPATWMAKEENV+= \
		INSTALL="sh ${.CURDIR}/tools/install.sh" \
		PATH=${TMPPATH} \
		SYSROOT=${WORLDTMP} \
		LIBDIR=/usr/lib${libcompat} \
		SHLIBDIR=/usr/lib${libcompat} \
		DTRACE="${LIB$COMPATDTRACE:U${DTRACE}}"
.if ${MK_META_MODE} != "no"
# Don't rebuild build-tools targets during normal build.
LIBCOMPATWMAKEENV+=	BUILD_TOOLS_META=.NOMETA
.endif
LIBCOMPATWMAKEFLAGS+= \
		${LIBCOMPAT_COMPILERS} \
		DESTDIR=${WORLDTMP} \
		-DNO_CPU_CFLAGS \
		MK_CTF=no \
		-DNO_LINT \
		MK_TESTS=no MK_TESTS_SUPPORT=${MK_TESTS} \
		WORLDTMP_MTREE="${WORLDTMP_MTREE}"
# Avoid re-computing COMPILER_VERSION, etc. values:
# $CC is different in the libcompat case compared to the non-compat value.
# Since bsd.compiler.mk (and bsd.linker.mk) save the variables using a full
# hash of the compiler/link command, this means that the cached values for
# X_COMPILER_TYPE, etc. cannot be loaded.
# Instead set all the values, so that we can avoid including bsd.compiler.mk and
# bsd.linker.mk. This provides a noticeable speed-up as it avoids multiple
# processes from being spawned in each subdirectory.
.for _var in ${_TOOLCHAIN_METADATA_VARS}
LIBCOMPATWMAKEFLAGS+=	${_var}="${X_${_var}}"
.endfor
LIBCOMPATWMAKEFLAGS+=_NO_INCLUDE_LINKERMK=yes _NO_INCLUDE_COMPILERMK=yes

LIBCOMPATWMAKE+=	${LIBCOMPATWMAKEENV} ${MAKE} ${LIBCOMPATWMAKEFLAGS} \
			OBJTOP=${LIBCOMPAT_OBJTOP} \
			OBJROOT='$${OBJTOP}/' \
			MAKEOBJDIRPREFIX= \
			MK_MAN=no MK_HTML=no
LIBCOMPATIMAKE+=	${LIBCOMPATWMAKE:NINSTALL=*:NDESTDIR=*} \
			${IMAKE_INSTALL} \
			-DLIBRARIES_ONLY

_LC_LIBDIRS.yes=		lib
_LC_LIBDIRS.yes+=		gnu/lib
_LC_LIBDIRS.yes+=		usr.bin/lex/lib
_LC_LIBDIRS.${MK_CDDL:tl}+=	cddl/lib
_LC_LIBDIRS.${MK_CRYPT:tl}+=	secure/lib
_LC_LIBDIRS.${MK_KERBEROS:tl}+=	kerberos5/lib

_LC_INCDIRS=	\
		include \
		lib/ncurses/ncursesw \
		${_LC_LIBDIRS.yes}

.if ${MK_FILE} != "no"
_libmagic=	lib/libmagic
.endif
.if ${MK_PMC} != "no" && ${TARGET_ARCH} == "amd64"
_jevents=	lib/libpmc/pmu-events
.endif


# Shared logic
build${libcompat}: .PHONY
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> stage 4.3: building lib${libcompat} shim libraries"
	@echo "--------------------------------------------------------------"

	${WORLDTMP_MTREE} -f ${.CURDIR}/etc/mtree/BSD.lib${libcompat}.dist \
	    -p ${WORLDTMP}/usr >/dev/null
.if ${MK_DEBUG_FILES} != "no"
	${WORLDTMP_MTREE} -f ${.CURDIR}/etc/mtree/BSD.lib${libcompat}.dist \
	    -p ${WORLDTMP}/usr/lib/debug/usr >/dev/null
.endif
.for _t in ${_obj} includes
.for _dir in ${_LC_INCDIRS}
	${_+_}cd ${.CURDIR}/${_dir}; ${LIBCOMPATWMAKE} MK_INCLUDES=yes \
	    DIRPRFX=${_dir}/ ${_t}
.endfor
.endfor
.for _dir in lib/ncurses/ncurses lib/ncurses/ncursesw ${_libmagic} ${_jevents}
.for _t in ${_obj} build-tools
	${_+_}cd ${.CURDIR}/${_dir}; \
	    WORLDTMP=${WORLDTMP} \
	    MAKEFLAGS="-m ${.CURDIR}/tools/build/mk ${.MAKEFLAGS}" \
	    ${MAKE} SSP_CFLAGS= DESTDIR= \
	    OBJTOP=${LIBCOMPAT_OBJTOP} \
	    OBJROOT='$${OBJTOP}/' \
	    MAKEOBJDIRPREFIX= \
	    DIRPRFX=${_dir}/ -DNO_LINT -DNO_CPU_CFLAGS \
	    MK_CTF=no MK_RETPOLINE=no MK_WARNS=no \
	    ${_t}
.endfor
.endfor
	${_+_}cd ${.CURDIR}; \
	    ${LIBCOMPATWMAKE} -f Makefile.inc1 -DNO_FSCHG libraries
.if ${MK_COMPAT_CHERIABI} == "yes" && ${MK_CHERI_PURE} == "yes"
# To build a purecap world against /usr/libcheri, we need internal libs.
# Skip amu because it needs unifdef which isn't available here and we
# don't build amd (and it's going away).
# We've locally removed gdb.
.for _lib in ${_INTERNALLIBS:Namu:Ngdb}
	${_+_}cd ${.CURDIR}${LIB${_lib:tu}DIR:S|${_LIB_OBJTOP}||}; \
	    ${LIBCOMPATWMAKE} all
.endfor
.endif

distribute${libcompat} install${libcompat}: .PHONY
.for _dir in ${_LC_LIBDIRS.yes}
	${_+_}cd ${.CURDIR}/${_dir}; ${LIBCOMPATIMAKE} ${.TARGET:S/${libcompat}$//}
.endfor

.if ${.TARGETS:Mlib${libcompat}buildenv}
.if ${.MAKEFLAGS:M-j}
.error The lib${libcompat}buildenv target is incompatible with -j
.endif
BUILDENV_DIR?=  ${.CURDIR}
lib${libcompat}buildenv: .PHONY
	@echo "Entering world for lib${libcompat} on ${TARGET_ARCH}:${TARGET}"
.if ${BUILDENV_SHELL:M*zsh*}
	@echo For ZSH you must run: export CPUTYPE=${TARGET_CPUTYPE}
.endif
	# Note: we have to remove TARGET and TARGET_ARCH from MAKEFLAGS since
	# otherwise src.opts.mk will pick the wrong MK_FOO values.
	@cd ${BUILDENV_DIR} && \
	    env ${LIBCOMPATWMAKEENV} ${LIBCOMPAT_COMPILERS} BUILDENV=1 \
	    TARGET=${LIBCOMPAT_MACHINE} TARGET_ARCH=${LIBCOMPAT_MACHINE_ARCH} \
	    "MAKEFLAGS=${MAKEFLAGS:NTARGET*}" ${BUILDENV_SHELL} || true
.endif

.endif # !targets(__<${_this:T}>__)
