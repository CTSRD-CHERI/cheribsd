if [ ! "$_MEDIA_FLOPPY_SUBR" ]; then _MEDIA_FLOPPY_SUBR=1
#
# Copyright (c) 2012-2013 Devin Teske
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#
############################################################ INCLUDES

BSDCFG_SHARE="/usr/share/bsdconfig"
. $BSDCFG_SHARE/common.subr || exit 1
f_dprintf "%s: loading includes..." media/floppy.subr
f_include $BSDCFG_SHARE/device.subr
f_include $BSDCFG_SHARE/dialog.subr
f_include $BSDCFG_SHARE/media/common.subr
f_include $BSDCFG_SHARE/struct.subr
f_include $BSDCFG_SHARE/variable.subr

BSDCFG_LIBE="/usr/libexec/bsdconfig"
f_include_lang $BSDCFG_LIBE/include/messages.subr

############################################################ GLOBALS

FLOPPY_MOUNTED=
FLOPPY_DISTWANTED=

############################################################ FUNCTIONS

# f_media_set_floppy
#
# Return success if we both found and set the media type to be a floppy.
#
f_media_set_floppy()
{
	f_media_close

	local devs ndevs
	f_device_find "" $DEVICE_TYPE_FLOPPY devs
	f_count ndevs $devs

	if [ ${ndevs:=0} -eq 0 ]; then
		f_interactive && f_show_msg "$msg_no_floppy_devices_found"
		return $FAILURE
	elif [ $ndevs -eq 1 ]; then
		f_struct_copy $devs device_media
	else
		local dev
		local title="$msg_choose_a_floppy_drive"
		local prompt="$msg_please_select_a_floppy_drive"
		local hline=

		dev=$( f_device_menu \
			"$title" "$prompt" "$hline" $DEVICE_TYPE_FLOPPY \
			2>&1 >&$DIALOG_TERMINAL_PASSTHRU_FD ) ||
			return $FAILURE

		f_struct_copy "$dev" device_media
	fi

	f_struct device_media &&
		device_media unset private

	f_struct device_media || return $FAILURE
}

# f_media_init_floppy $device
#
# Initializes the Floppy media device. Returns success if able to mount the
# Floppy disk device using either mount_msdosfs(8) or mount(8) (tried in that
# order).
#
f_media_init_floppy()
{
	local funcname=f_media_init_floppy
	local dev="$1" devname err

	$dev get devname devname || return $FAILURE
	f_dprintf "Init floppy called for %s distribution. devname=[%s]" \
	          "${FLOPPY_DISTWANTED:-some}" "$devname"

	if [ "$FLOPPY_MOUNTED" ]; then
		f_dprintf "Floppy device already mounted."
		return $SUCCESS
	fi

	local mp
	$dev get private mp
	if [ ! -e "${mp:=$MOUNTPOINT}" ] && ! f_quietly mkdir -p "$mp"; then
		f_show_msg "$msg_unable_to_make_directory_mountpoint" \
		           "$mp" "$devname"
		return $FAILURE
	fi

	if f_interactive; then
		local desc
		$dev get desc desc
		if [ "$FLOPPY_DISTWANTED" ]; then
			f_show_msg "$msg_please_insert_floppy_in_drive" "$desc"
		else
			f_show_msg "$msg_please_insert_floppy_containing" \
			           "$FLOPPY_DISTWANTED" "$desc"
		fi
	fi

	if ! {
	    f_eval_catch -dk err $funcname mount_msdosfs \
		'mount_msdosfs -o ro -m 0777 -u 0 -g 0 "%s" "%s"' \
		"$devname" "$mp" ||
	    f_eval_catch -dk err $funcname mount \
		'mount -o ro "%s" "%s"' "$devname" "$mp"
	}; then
		err="${err#mount: }"; err="${err#*: }"
		local name
		$dev get name name
		f_show_msg "$msg_error_mounting_floppy_device" \
		           "$name" "$devname" "$mp" "$err"
		return $FAILURE
	fi
	FLOPPY_MOUNTED=1
	FLOPPY_DISTWANTED=
	return $SUCCESS
}

# f_media_get_floppy $device $file [$probe_type]
#
# Returns data from $file on a mounted Floppy disk device. Similar to cat(1).
# If $probe_type is present and non-NULL, limits retries to zero and returns
# success if $file exists. If $probe_type is equal to $PROBE_SIZE, prints the
# size of $file in bytes to standard-out.
#
f_media_get_floppy()
{
	local funcname=f_media_get_floppy
	local dev="$1" file="$2" probe_type="$3"
	local name

	$dev get name name
	f_dprintf "f_media_get_floppy: dev=[%s] file=[%s] probe_type=%s" \
	          "$name" "$file" "$probe_type"

	#
	# floppies don't use f_media_generic_get() because it's too expensive
	# to speculatively open files on a floppy disk.  Make user get it
	# right or give up with floppies.
	#
	local mp
	$dev get private mp
	local fp="${mp:=$MOUNTPOINT}/$file"
	if ! [ -f "$fp" -a -r "$fp" ]; then
		local nretries=4
		[ "$probe_type" = "$PROBE_SIZE" ] && echo "-1"
		[ "$probe_type" ] && return $FAILURE
		while ! [ -f "$fp" -a -r "$fp" ]; do
			if [ $nretries -eq 0 ]; then
				f_show_msg "$msg_failed_to_get_floppy_file" \
				           "$fp"
				[ "$probe_type" = "$PROBE_SIZE" ] && echo "-1"
				return $FAILURE
			fi
			FLOPPY_DISTWANTED="$fp"
			f_media_shutdown_floppy "$dev"
			f_media_init_floppy "$dev" || return $FAILURE
			nretries=$(( $nretries - 1 ))
		done
	fi
	#
	# If we reach here, $file exists
	#
	if [ "$probe_type" = "$PROBE_SIZE" ]; then
		local size
		f_eval_catch -dk size $funcname stat 'stat -f %%z "%s"' "$fp"
		f_isinteger "$size" || size=-1
		echo "$size"
	fi
	[ "$probe_type" ] && return $SUCCESS
	cat "$fp"
}

# f_media_shutdown_floppy $device
#
# Shuts down the Floppy disk device using umount(8). Return status should be
# ignored.
#
f_media_shutdown_floppy()
{
	local funcname=f_media_shutdown_floppy
	local dev="$1" err mp

	[ "$FLOPPY_MOUNTED" ] || return $FAILURE

	$dev get private mp
	if f_eval_catch -d $funcname umount \
		'umount -f "%s"' "${mp:=$MOUNTPOINT}"
	then
		FLOPPY_MOUNTED=
		if f_interactive && [ "$_systemState" != "fixit" ]; then
			local desc
			$dev get desc desc
			f_show_msg "$msg_you_may_remove_the_floppy" "$desc"
		fi
	fi
}

############################################################ MAIN

f_dprintf "%s: Successfully loaded." media/floppy.subr

fi # ! $_MEDIA_FLOPPY_SUBR
