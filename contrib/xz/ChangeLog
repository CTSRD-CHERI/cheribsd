commit 2d7d862e3ffa8cec4fd3fdffcd84e984a17aa429
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-24 15:55:08 +0800

    Bump version and soname for 5.6.0.

 src/liblzma/Makefile.am         | 2 +-
 src/liblzma/api/lzma/version.h  | 6 +++---
 src/liblzma/liblzma_generic.map | 2 +-
 src/liblzma/liblzma_linux.map   | 2 +-
 4 files changed, 6 insertions(+), 6 deletions(-)

commit a18fb1edef0d0aac12a09eed05e9c448c777af7b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-24 15:50:36 +0800

    Add NEWS for 5.6.0.

 NEWS | 143 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 143 insertions(+)

commit 24355c5280bc95e3d594432d60bb8432aa6af173
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-22 22:27:01 +0800

    Translations: Remove obsolete and fuzzy matches from some translations.
    
    The French and Brazilian Portuguese man page translations have not been
    updated since the switch from public domain to 0BSD. The old GPLv2
    strings have now been removed from these files.

 po4a/fr.po    | 4702 +++++++++++++++++++++++++++++++++++++----------------
 po4a/pt_BR.po | 4987 ++++++++++++++++++++++++++++++++++++++++-----------------
 2 files changed, 6832 insertions(+), 2857 deletions(-)

commit 02ca4a7d7b703e2ec63e00b70feec825e919dbc1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-21 00:31:54 +0800

    Translations: Patch man pages to avoid fuzzy matches.
    
    This will be fixed in the next round of translations, but this avoids
    having a fuzzy match or not fixing the English version.

 po4a/de.po | 2 +-
 po4a/ko.po | 2 +-
 po4a/ro.po | 2 +-
 po4a/uk.po | 2 +-
 4 files changed, 4 insertions(+), 4 deletions(-)

commit 898aad9fc711e03452d24d9e2c5b7f77a6f9ce64
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-21 00:30:43 +0800

    xzmore: Fix typo in xzmore.1.
    
    Thanks to Yuri Chornoivan.

 src/scripts/xzmore.1 | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 5631aa206c8d16b4eeab85a46b8b698f4fc4cdba
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-24 12:12:16 +0800

    Translations: Update the Vietnamese translation.

 po/vi.po | 505 ++++++++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 309 insertions(+), 196 deletions(-)

commit a65fd7ce9d6228e87faf61dc56a35984d0088248
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-24 12:06:40 +0800

    Translations: Update the Esperanto translation.

 po/eo.po | 502 ++++++++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 306 insertions(+), 196 deletions(-)

commit cf44e4b7f5dfdbf8c78aef377c10f71e274f63c0
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-23 23:09:59 +0800

    Tests: Add a few test files.

 tests/files/README                     |  19 +++++++++++++++++++
 tests/files/bad-3-corrupt_lzma2.xz     | Bin 0 -> 484 bytes
 tests/files/bad-dict_size.lzma         | Bin 0 -> 41 bytes
 tests/files/good-2cat.xz               | Bin 0 -> 136 bytes
 tests/files/good-large_compressed.lzma | Bin 0 -> 35430 bytes
 tests/files/good-small_compressed.lzma | Bin 0 -> 258 bytes
 6 files changed, 19 insertions(+)

commit 39f4a1a86ad80b2d064b812cee42668e6c8b8c73
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-23 20:58:36 +0800

    Tests: Add MicroLZMA test.

 tests/Makefile.am      |   4 +-
 tests/test_microlzma.c | 548 +++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 551 insertions(+), 1 deletion(-)

commit adaacafde6661496ca2814b1e94a3ba5186428cb
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-23 20:57:59 +0800

    Build: Define HAVE_MICROLZMA when it is configured.

 CMakeLists.txt | 4 ++++
 configure.ac   | 9 +++++++--
 2 files changed, 11 insertions(+), 2 deletions(-)

commit eea78216d27182ca917bf00e02feaab058a4d21e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-23 20:27:15 +0800

    xz: Fix Capsicum sandbox compile error.
    
    user_abort_pipe[] was still being used instead of the parameters.

 src/xz/sandbox.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 32b0a3ce19224f9074d01a4ffbc1655b05fcb82d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-23 16:12:32 +0800

    Build: Fix ARM64 CRC32 instruction feature test.
    
    Old versions of Clang reported the unsupported function attribute and
    __crc32d() function as warnings instead of errors, so the feature test
    passed when it shouldn't have, causing a compile error at build time.
    -Werror was added to this feature test to fix this. The change is not
    needed for CMake because check_c_source_compiles() also performs
    linking and the error is caught then.
    
    Thanks to Sebastian Andrzej Siewior for reporting this.

 configure.ac | 10 ++++++++++
 1 file changed, 10 insertions(+)

commit 4c81c9611f8b2e1ad65eb7fa166afc570c58607e
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-22 19:16:35 +0200

    CMake: Add LOCALEDIR to the windres workaround.
    
    LOCALEDIR may contain spaces like in "C:\Program Files".

 CMakeLists.txt | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

commit de4337fd89ca7db5feb97b5c40143404f6e22986
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-22 15:18:25 +0200

    xz: Landlock: Fix error message if input file is a directory.
    
    If xz is given a directory, it should look like this:
    
        $ xz /usr/bin
        xz: /usr/bin: Is a directory, skipping
    
    The Landlock rules didn't allow opening directories for reading:
    
        $ xz /usr/bin
        xz: /usr/bin: Permission denied
    
    The simplest fix was to allow opening directories for reading.
    While it's a bit silly to allow it solely for the error message,
    it shouldn't make the sandbox significantly weaker.
    
    The single-file use case (like when called from GNU tar) is
    still as strict as possible: all Landlock restrictions are
    enabled before (de)compression starts.

 src/xz/sandbox.c | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

commit 120da10ae139ea52ca4275452adf8eda02d07cc8
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-22 14:41:29 +0200

    liblzma: Disable branchless C version in range decoder.
    
    Thanks to Sebastian Andrzej Siewior and Sam James for
    benchmarking on various systems.

 src/liblzma/rangecoder/range_decoder.h | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

commit 00440f52be9ac2c7438c7b0cb1082f12399632c6
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-21 17:41:32 +0200

    INSTALL: Clarify that --disable-assembler affects only 32-bit x86.

 INSTALL | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

commit 11405be84ea294497e12d03d7219f607063f4a00
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-19 18:41:37 +0200

    Windows: build.bash: Include COPYING.0BSD in the package.

 windows/build.bash | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit c27cf64e3e27f4968431d65be7098a12a3a80d30
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-18 17:59:46 +0200

    Windows: build.bash: include liblzma-crt-mixing.txt in the package.

 windows/build.bash | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

commit 8d38941baed05de4ff7cc775de14833108f62184
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-18 17:17:43 +0200

    Windows: Major update to Windows build instructions.

 INSTALL                                      |  68 ++++-----
 windows/INSTALL-MSVC.txt                     |  23 +--
 windows/INSTALL-MinGW-w64_with_Autotools.txt |  49 +++++++
 windows/INSTALL-MinGW-w64_with_CMake.txt     | 203 +++++++++++++++++++++++++++
 windows/INSTALL-MinGW.txt                    | 138 ------------------
 windows/README-Windows.txt                   |   2 +
 windows/build-with-cmake.bat                 |  35 +++++
 windows/liblzma-crt-mixing.txt               |  70 +++++++++
 8 files changed, 404 insertions(+), 184 deletions(-)

commit 4b5b0d352348ff510ffb50a3b5b71788857d37a1
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-18 15:15:04 +0200

    Windows: Update windows/README-Windows.txt.
    
    It's for binary packages built with windows/build.bash.

 windows/README-Windows.txt | 104 ++++++++++++++++++---------------------------
 1 file changed, 41 insertions(+), 63 deletions(-)

commit 1ee716f74085223c8fbcae1d5a384e6bf53c0f6a
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-18 15:15:04 +0200

    Windows: Update windows/build.bash.
    
    Support for the old MinGW was dropped. Only MinGW-w64 with GCC
    is supported now.
    
    The script now supports also cross-compilation from GNU/Linux
    (tests are not run). MSYS2 and also the old MSYS 1.0.11 work
    for building on Windows. The i686 and x86_64 toolchains must
    be in PATH to build both 32-bit and 64-bit versions.
    
    Parallel builds are done if "nproc" from GNU coreutils is available.
    
    MinGW-w64 runtime copyright information file was renamed from
    COPYING-Windows.txt to COPYING.MinGW-w64-runtime.txt which
    is the filename used by MinGW-w64 itself. Its existence
    is now mandatory, it's checked at the beginning of the script.
    
    The file TODO is no longer copied to the package.

 windows/build.bash | 191 +++++++++++++++++++++++++++++++----------------------
 1 file changed, 112 insertions(+), 79 deletions(-)

commit 60462e42609a1d961868a1d1ebecc713c6d27e2e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-20 23:32:22 +0800

    Translations: Update the Romanian man page translations.

 po4a/ro.po | 1715 +++++++++++++++++++++++++++++++-----------------------------
 1 file changed, 875 insertions(+), 840 deletions(-)

commit 10d733e5b8929c642e00891cfa9ead9c2cdd2e05
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-20 23:30:25 +0800

    Translations: Update the Korean man page translations.

 po4a/ko.po | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit 797a34b72ac6baff237d7a546fa941d8f78f2f62
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-20 21:03:53 +0800

    Translations: Update the Spanish translation.

 po/es.po | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit 5c3751d019f023e091df9a653e2bb1f6ea8b0d49
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-20 20:18:07 +0800

    Translations: Update the Romanian translation.

 po/ro.po | 470 ++++++++++++++++++++++++++++++---------------------------------
 1 file changed, 227 insertions(+), 243 deletions(-)

commit e2d31154ecc750935436e8b62c6b073b2cfa84e3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-20 20:15:50 +0800

    Translations: Update the Croatian translation.

 po/hr.po | 648 ++++++++++++++++++++++++++++++++++-----------------------------
 1 file changed, 355 insertions(+), 293 deletions(-)

commit 704500f994d5ac271bfcfd592275c5a7da4dc8d2
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-20 20:05:44 +0800

    Translations: Update the German man page translations.

 po4a/de.po | 1696 +++++++++++++++++++++++++++++++-----------------------------
 1 file changed, 873 insertions(+), 823 deletions(-)

commit 1cfd3dca3fef321b06db73c3c9e13f347c2e2f5f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-20 19:58:25 +0800

    Translations: Update the German translation.

 po/de.po | 427 +++++++++++++++++++++++++++++++++------------------------------
 1 file changed, 225 insertions(+), 202 deletions(-)

commit 28b9b3f16cc7c6e5b42e691994569c17f4561c9a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-20 19:56:52 +0800

    Translations: Update the Hungarian translation.

 po/hu.po | 556 ++++++++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 338 insertions(+), 218 deletions(-)

commit 00b06cd0af6ad2ee93d3006bf80417db060c2b04
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-19 16:48:05 +0200

    CMake: Fix building of lzmainfo when translations are enabled.

 CMakeLists.txt | 2 ++
 1 file changed, 2 insertions(+)

commit b0d1422b6037bfea6f6723683bd82a8e6d77026c
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-19 13:38:42 +0200

    CMake: Don't assume that -fvisibility=hidden is supported outside Windows.
    
    The original code was good enough for supporting GNU/Linux
    and a few others but it wasn't very portable.
    
    CMake doesn't support Solaris Studio's -xldscope=hidden.
    If it ever does, things should still work with this commit
    as Solaris Studio supports not only its own __global but also
    the GNU C __attribute__((visibility("default"))). Support for the
    attribute was added in 2007 to Sun Studio 12 compiler version 5.9.

 CMakeLists.txt | 26 ++++++++++++++++++++++----
 1 file changed, 22 insertions(+), 4 deletions(-)

commit 2ced9d34bef4dce52ecbbf84d0903ab0aae1442c
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-19 12:20:59 +0200

    CMake: Revise the component splitting.

 CMakeLists.txt | 57 +++++++++++++++++++++++++++++++--------------------------
 1 file changed, 31 insertions(+), 26 deletions(-)

commit 426bdc709c169d39b31dec410016779de117ef69
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 21:45:07 +0200

    CMake: Update the main comment and document CMAKE_BUILD_TYPE=Release.

 CMakeLists.txt | 79 ++++++++++++++++++++++++++++++++++++++++++++++------------
 1 file changed, 63 insertions(+), 16 deletions(-)

commit 4430e075f7ccfc47972d6ca0aa1c3779fc265e10
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 21:27:48 +0200

    CMake: Use -O2 instead of -O3 in CMAKE_BUILD_TYPE=Release.
    
    -O3 doesn't seem useful for speed but it makes the code bigger.
    CMake makes is difficult for users to simply override the
    optimization level: CFLAGS / CMAKE_C_FLAGS aren't helpful because
    they go before CMAKE_C_FLAGS_RELEASE. Of course, users can override
    CMAKE_C_FLAGS_RELEASE directly but then they have to remember to
    add also -DNDEBUG to disable assertions.
    
    This commit changes -O3 to -O2 in CMAKE_C_FLAGS_RELEASE if and only if
    CMAKE_C_FLAGS_RELEASE cache variable doesn't already exist. So if
    a custom value is passed on the command line (or reconfiguring an
    already-configured build), the cache variable won't be modified.

 CMakeLists.txt | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

commit 025eb6d7879e4c4e8cb29716b371e0f4c1aea660
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-18 14:59:52 +0200

    CMake: Handle symbol versioning on MicroBlaze specially.
    
    This is to match configure.ac.

 CMakeLists.txt | 23 +++++++++++++++++++----
 1 file changed, 19 insertions(+), 4 deletions(-)

commit 2edd1a35b2507d1ce68b52dbaebe23c4850a74ce
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 22:18:12 +0200

    CMake: Keep build working even if lib/*.[ch] are removed.

 CMakeLists.txt | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

commit d753e2ce4715552884afadc4ed6fbf8ccca6efac
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 18:10:40 +0200

    CMake: Install documentation.

 CMakeLists.txt | 32 ++++++++++++++++++++++++++++++++
 1 file changed, 32 insertions(+)

commit 7a0405bea9cb0df9318b70f779f82b2c473e98ac
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 15:35:35 +0200

    CMake: Bump maximum policy version to 3.28.
    
    CMP0154 doesn't affect us since we don't use FILE_SET.

 CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit c2264ffbe3892d28930b89b0123efc369cabc143
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 15:35:35 +0200

    CMake: Build lzmainfo.

 CMakeLists.txt | 54 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 54 insertions(+)

commit 998d0b29536094a89cf385a3b894e157db1ccefe
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 15:35:35 +0200

    CMake: Build lzmadec.

 CMakeLists.txt | 76 ++++++++++++++++++++++++++++++++--------------------------
 1 file changed, 42 insertions(+), 34 deletions(-)

commit 74e8bc7417a0f37ca7ed5ee0127d33c69b3100b9
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 15:35:35 +0200

    CMake: Add test_scripts.sh to the tests.
    
    In contrast to Automake, skipping of this test when decoders
    are disabled is handled at CMake side instead of test_scripts.sh
    because CMake-build doesn't create config.h.

 CMakeLists.txt        | 14 ++++++++++++++
 tests/test_scripts.sh | 13 ++++++++-----
 2 files changed, 22 insertions(+), 5 deletions(-)

commit 4808f238a731befcd46c2117c62a1caaf4403989
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 15:35:35 +0200

    CMake: Install scripts.
    
    Compared to the Autotools-based build, this has simpler handling
    for the shell (@POSIX_SHELL@) and extra PATH entry for the scripts
    (configure has --enable-path-for-scripts=PREFIX). The simpler
    metho should be enough for non-ancient systems and Solaris.

 CMakeLists.txt | 83 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 82 insertions(+), 1 deletion(-)

commit 3462362ebd94d835c664e94ad8f414cfe7590ca7
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 15:35:35 +0200

    Scripts: Use @PACKAGE_VERSION@ instead of @VERSION@.
    
    PACKAGE_VERSION was already used in liblzma.pc.in.
    This way only one version @foo@ is used.

 src/scripts/xzdiff.in | 2 +-
 src/scripts/xzgrep.in | 2 +-
 src/scripts/xzless.in | 2 +-
 src/scripts/xzmore.in | 2 +-
 4 files changed, 4 insertions(+), 4 deletions(-)

commit 67610c245ba6c68cf65991693bab9312b7dc987b
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 15:35:35 +0200

    CMake: Simplify symlink creation and install translated man pages.
    
    It helps that cmake_install.cmake doesn't parallelize installation
    so symlinks can be created so that the target is always known to
    exist (a requirement on Windows in some cases).
    
    This bumps the minimum CMake version from 3.13 to 3.14 to use
    file(CREATE_LINK ...). It could be made to work on 3.13 by
    calling "cmake -E create_symlink" but it's uglier code and
    slower in "make install". 3.14 should be a reasonable version
    to require nowadays, especially since the Autotools build
    is still the primary build system for most OSes.

 CMakeLists.txt | 195 +++++++++++++++++++++++++++++----------------------------
 1 file changed, 98 insertions(+), 97 deletions(-)

commit 50cc1d8a5a8154428bf240c7e4972e32b17d99bf
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 15:35:35 +0200

    CMake: Add support for building and installing xz with translations.
    
    If gettext tools are available, the .po files listed in po/LINGUAS
    are converted using msgfmt. This allows building with translations
    directly from xz.git without Autotools.
    
    If gettext tools aren't available, the Autotools-created .gmo files
    in the "po" directory will be used. This allows CMake-based build
    to use translations from Autotools-generated tarball.
    
    If translation support is found (Intl_FOUND) but both the
    gettext tools and the pre-generated .gmo files are missing,
    then "make" will fail.

 CMakeLists.txt | 68 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 66 insertions(+), 2 deletions(-)

commit 746c471643009947f94a3494a1148f74c7381b56
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-19 11:58:33 +0200

    liblzma: Remove commented-out code.

 src/liblzma/rangecoder/range_decoder.h | 3 ---
 1 file changed, 3 deletions(-)

commit 4ce300ce0884c6e552de2af9ae8050b47b01f0e7
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 23:07:35 +0200

    xz: Delete old commented-out code.

 src/xz/message.c | 19 -------------------
 1 file changed, 19 deletions(-)

commit cae9a5e0bf422e6c5e64180805904f7ed02dc3aa
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 23:07:35 +0200

    xz: Use stricter pledge(2) and Landlock sandbox.
    
    This makes these sandboxing methods stricter when no files are
    created or deleted. That is, it's a middle ground between the
    initial sandbox and the strictest single-file-to-stdout sandbox:
    this allows opening files for reading but output has to go to stdout.

 src/xz/main.c    | 46 +++++++++++++++++++++++++++++++++-------------
 src/xz/sandbox.c | 32 ++++++++++++++++++++++++++++++++
 src/xz/sandbox.h |  4 ++++
 3 files changed, 69 insertions(+), 13 deletions(-)

commit 02e3505991233901575b7eabc06b2c6c62a96899
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 23:07:35 +0200

    xz: Support Landlock ABI version 4.
    
    Linux 6.7 added support for ABI version 4 which restricts
    TCP connections which xz won't need and thus those can be
    forbidden now. Since the ABI version is handled at runtime,
    supporting version 4 won't cause any compatibility issues.
    
    Note that new enough kernel headers are required to get
    version 4 support enabled at build time.

 src/xz/sandbox.c | 25 ++++++++++++++++++++-----
 1 file changed, 20 insertions(+), 5 deletions(-)

commit 374868d81d473ab56556a1cfd6b1b36a1fab348b
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 23:07:35 +0200

    xz: Move sandboxing code to sandbox.c and improve Landlock sandbox.
    
    Landlock is now always used just like pledge(2) is: first in more
    permissive mode and later (under certain common conditions) in
    a strict mode that doesn't allow opening more files.
    
    I put pledge(2) first in sandbox.c because it's the simplest API
    to use and still somewhat fine-grained for basic applications.
    So it's the simplest thing to understand for anyone reading sandbox.c.

 CMakeLists.txt     |   2 +
 src/xz/Makefile.am |   2 +
 src/xz/file_io.c   | 170 +-----------------------------
 src/xz/file_io.h   |   6 --
 src/xz/main.c      |  50 +++------
 src/xz/private.h   |   6 +-
 src/xz/sandbox.c   | 295 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/xz/sandbox.h   |  39 +++++++
 8 files changed, 357 insertions(+), 213 deletions(-)

commit 7312dfbb02197c7f990c7a3cefd027a9387d1473
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 23:07:35 +0200

    xz: Tweak comments.

 src/xz/main.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

commit c701a5909ad9882469fbab4fab5d2d5556d3ba78
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 23:07:35 +0200

    xz: Fix message_init() description.
    
    Also explicitly initialize progress_automatic to make it clear
    that it can be read before message_init() sets it. Static variable
    was initialized to false by default already so this is only for
    clarity.

 src/xz/main.c    | 3 ++-
 src/xz/message.c | 2 +-
 src/xz/message.h | 5 ++++-
 3 files changed, 7 insertions(+), 3 deletions(-)

commit 9466306719f3b76e92fac4e55fbfd89ec92295fa
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 19:35:47 +0200

    Build: Makefile.am: Sort EXTRA_DIST.
    
    Dirs first, then files in case-sensitive ASCII order.

 Makefile.am | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

commit f3440e78c9517db75bfa52e1a378fad60b073bbe
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 19:25:05 +0200

    Build: Don't install TODO.

 Makefile.am | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit a7a3b62e2ab03c82b2bd5c78da1d1fb8b8490381
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-18 01:09:11 +0800

    Translations: Update the Korean man page translations.

 po4a/ko.po | 1707 +++++++++++++++++++++++++++++++-----------------------------
 1 file changed, 871 insertions(+), 836 deletions(-)

commit 9b315db2d5e74700f3dc0755eb86c27947c0b393
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-18 01:08:32 +0800

    Translations: Update the Korean translation.

 po/ko.po | 423 +++++++++++++++++++++++++++++++++------------------------------
 1 file changed, 223 insertions(+), 200 deletions(-)

commit 56246607dff177b0410d140fcca4a42c865723dc
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 16:23:14 +0200

    Build: Install translated lzmainfo man pages.
    
    All other translated man pages were being installed but
    lzmainfo had been forgotten.

 src/lzmainfo/Makefile.am | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

commit f1d6b88aefcced538403c5c2606ba57065b16e70
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 16:01:32 +0200

    liblzma: Avoid implementation-defined behavior in the RISC-V filter.
    
    GCC docs promise that it works and a few other compilers do
    too. Clang/LLVM is documented source code only but unsurprisingly
    it behaves the same as others on x86-64 at least. But the
    certainly-portable way is good enough here so use that.

 src/liblzma/simple/riscv.c | 30 ++++++++++++++++++++++--------
 1 file changed, 22 insertions(+), 8 deletions(-)

commit 843ddc5f617b91ae132d6bab0f2f2d9c9fcd214a
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-17 15:48:28 +0200

    liblzma: Wrap a line exceeding 80 chars.

 src/liblzma/rangecoder/range_decoder.h | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit e9053c907250c70d98b319d95fa54cb94fc76869
Author: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>
Date:   2024-02-16 21:50:15 +0100

    liblzma/rangecoder: Exclude x32 from the x86-64 optimisation.
    
    The x32 port has a x86-64 ABI in term of all registers but uses only
    32bit pointer like x86-32. The assembly optimisation fails to compile on
    x32. Given the state of x32 I suggest to exclude it from the
    optimisation rather than trying to fix it.
    
    Signed-off-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>

 src/liblzma/rangecoder/range_decoder.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 3d198fb13b87f8803442e5799d465f7434a70555
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-17 21:05:07 +0800

    Translations: Update the Spanish translation.

 po/es.po | 427 +++++++++++++++++++++++++++++++++------------------------------
 1 file changed, 226 insertions(+), 201 deletions(-)

commit cf278bfe60a25b54b3786f06503bc61272970820
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-17 20:43:29 +0800

    Translations: Update the Swedish translation.

 po/sv.po | 434 +++++++++++++++++++++++++++++++++------------------------------
 1 file changed, 230 insertions(+), 204 deletions(-)

commit b0f1a41be50560cc6cb528e8e96b02b2067c52c2
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-17 20:41:38 +0800

    Translations: Update the Polish translation.

 po/pl.po | 424 +++++++++++++++++++++++++++++++++------------------------------
 1 file changed, 224 insertions(+), 200 deletions(-)

commit d74ed48b30c631b6a4c7e7858b06828293bf8520
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-17 20:41:02 +0800

    Translations: Update the Ukrainian translation.

 po/uk.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 711e22d5c5f3bac39ac904efb3ede874a66e2045
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-16 17:53:34 +0200

    Translations: Use the same sentence in xz.pot-header that the TP uses.

 po/xz.pot-header | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit fb5f6aaf18584672d0fee5dbe41fd30fc6bf5422
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-16 22:53:46 +0800

    Fix typos discovered by codespell.

 AUTHORS                                | 2 +-
 NEWS                                   | 2 +-
 src/liblzma/rangecoder/range_decoder.h | 4 ++--
 3 files changed, 4 insertions(+), 4 deletions(-)

commit c64723bbb094e29b4edd98f6fcce866e1b569b42
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-16 22:52:41 +0800

    Translations: Update the Ukrainian man page translations.

 po4a/uk.po | 1710 +++++++++++++++++++++++++++++++-----------------------------
 1 file changed, 873 insertions(+), 837 deletions(-)

commit 2895195ed0f68b245c7bd568c126ba6e685fa1d6
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-16 22:51:04 +0800

    Translations: Update the Ukrainian translation.

 po/uk.po | 466 ++++++++++++++++++++++++++++++---------------------------------
 1 file changed, 225 insertions(+), 241 deletions(-)

commit 4c20781f4c8f04879b64d631a4f44b4909147bde
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-15 22:32:52 +0200

    Translations: Omit the generic copyright line from man page headers.

 po4a/update-po | 1 +
 1 file changed, 1 insertion(+)

commit 4323bc3e0c1e1d2037d5e670a3bf6633e8a3031e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-15 22:26:43 +0800

    Update m4/.gitignore.

 m4/.gitignore | 1 +
 1 file changed, 1 insertion(+)

commit 5394a1665b7a108a54cb8b4ef3ebe59d3dbcca3a
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 21:11:49 +0200

    Tests: tuktest.h: Treat Clang separately from GCC.
    
    Don't assume that Clang defines __GNUC__ as the extensions
    are available in clang-cl as well (and possibly in some other
    Clang variants?).

 tests/tuktest.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit cce7330b9f23485a0879422e0c3395a7065439ac
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 21:11:03 +0200

    Tests: tuktest.h: Add a missing word to a comment.

 tests/tuktest.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 5dd8fc9452a3373cedc27379067ce638f992c741
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 21:10:10 +0200

    Tests: tuktest.h: Fix the comment about STest.

 tests/tuktest.h | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit 6f1790254a03c5edf0f2976f773220f070450acd
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-15 01:53:40 +0800

    Bump version for 5.5.2beta.

 src/liblzma/api/lzma/version.h  | 4 ++--
 src/liblzma/liblzma_generic.map | 2 +-
 src/liblzma/liblzma_linux.map   | 2 +-
 3 files changed, 4 insertions(+), 4 deletions(-)

commit 924fdeedf48113fb1e0646d86bd89a356d21a055
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 19:46:11 +0200

    liblzma: Fix validate_map.sh.
    
    Adding the SPDX license identifier changed the line numbers.

 src/liblzma/validate_map.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 22140a2df6161b0110e6b4afa5ea0a07c5b60b01
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 19:38:34 +0200

    Build: Start the generated ChangeLog from around 5.4.0 instead of 5.2.0.

 Makefile.am | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 0b8cefa136c21d403a01b78517f4decb50172bdb
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 19:27:46 +0200

    Fixed NEWS for 5.5.2beta.

 NEWS | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

commit a4557bad96361d93ea171ed859ac5a696fca824f
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 19:21:45 +0200

    liblzma: Silence warnings in --enable-small build.

 src/liblzma/lzma/lzma_decoder.c        | 2 ++
 src/liblzma/rangecoder/range_decoder.h | 1 +
 2 files changed, 3 insertions(+)

commit 38edf473236d00b3e100dc4c4f0bf43a4993fed2
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 19:15:58 +0200

    Build: Install COPYING.0BSD as part of docs.

 Makefile.am | 1 +
 1 file changed, 1 insertion(+)

commit b74e10bd839bcdc239afb5300ffaee195f34c217
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 19:14:05 +0200

    Docs: List COPYING.0BSD in README.

 README | 1 +
 1 file changed, 1 insertion(+)

commit dfdb60ffe933a1f1497d300dbb4513ed17ec6f0e
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 19:11:48 +0200

    Docs: Include doc/examples/11_file_info.c in tarballs.
    
    It was added in 2017 in c2e29f06a7d1e3ba242ac2fafc69f5d6e92f62cd
    but it never got into any release tarballs because it was
    forgotten to be added to Makefile.am.

 Makefile.am | 1 +
 1 file changed, 1 insertion(+)

commit 160b6862646d95dfdbd73ab7f1031ede0f54992d
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 19:05:58 +0200

    liblzma: Silence a warning.

 src/liblzma/rangecoder/range_decoder.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit eeedd4d0925ea417add04ceb42a6c0829244b50c
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 18:32:27 +0200

    Add NEWS for 5.5.2beta.

 NEWS | 60 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 60 insertions(+)

commit 8af7db854f903068d72a9a0d21103cb0c5027fa8
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-13 14:32:47 +0200

    xz: Mention lzmainfo if trying to use 'lzma --list'.
    
    This kind of fixes the problem reported here:
    https://bugs.launchpad.net/ubuntu/+source/xz-utils/+bug/1291020

 src/xz/list.c | 16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

commit 0668907ff736e4cd16738c10d39a2bc9e851aefb
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-14 14:58:36 +0200

    liblzma: Add comments.

 src/liblzma/lzma/lzma_decoder.c        |  9 +++++++++
 src/liblzma/rangecoder/range_decoder.h | 11 +++++++++--
 2 files changed, 18 insertions(+), 2 deletions(-)

commit 109f1913d4824c8214d5bbd38ebebf62c37572da
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-13 17:00:17 +0200

    Scripts: Add lz4 support to xzgrep and xzdiff.

 src/scripts/xzdiff.1  |  8 +++++---
 src/scripts/xzdiff.in | 14 +++++++++-----
 src/scripts/xzgrep.1  |  6 ++++--
 src/scripts/xzgrep.in |  1 +
 4 files changed, 19 insertions(+), 10 deletions(-)

commit de55485cb23af56c5adbe3239b935c957ff8ac4f
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-13 14:05:13 +0200

    liblzma: Choose the range decoder variants using a bitmask macro.

 src/liblzma/rangecoder/range_decoder.h | 64 ++++++++++++++++++++++++++++------
 1 file changed, 53 insertions(+), 11 deletions(-)

commit 0709c2b2d7c1d8f437b003f691880fd7810e5be5
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-13 11:38:10 +0200

    xz: Fix outdated threading related info on the man page.

 src/xz/xz.1 | 22 ++++++++++++++--------
 1 file changed, 14 insertions(+), 8 deletions(-)

commit 3182a330c1512cc1f5c87b5c5a272578e60a5158
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: Range decoder: Add x86-64 inline assembly.
    
    It's compatible with GCC and Clang.

 src/liblzma/rangecoder/range_decoder.h | 491 +++++++++++++++++++++++++++++++++
 1 file changed, 491 insertions(+)

commit cba2edc991dffba7cd4891dbc1bd26cb950cf053
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: Range decoder: Add branchless C code.
    
    It's used only for basic bittrees and fixed-size reverse bittree
    because those showed a clear benefit on x86-64 with GCC and Clang.
    The other methods were more mixed and thus are commented out but
    they should be tested on other archs.

 src/liblzma/rangecoder/range_decoder.h | 76 ++++++++++++++++++++++++++++++++++
 1 file changed, 76 insertions(+)

commit e290a72d6dee71faf3a90c9678b2f730083666a7
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: Clarify a comment.

 src/liblzma/lzma/lzma_decoder.c | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

commit 5e04706b91ca90d6befd4da24a588a55e631d4a9
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: LZMA decoder: Optimize loop comparison.
    
    But now it needs one more local variable.

 src/liblzma/lzma/lzma_decoder.c        |  5 ++---
 src/liblzma/rangecoder/range_decoder.h | 10 +++++++++-
 2 files changed, 11 insertions(+), 4 deletions(-)

commit 88276f9f2cb4871c7eb86952d93d07c1cf6caa66
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: Optimize literal_subcoder() macro slightly.

 src/liblzma/lzma/lzma_common.h                 | 22 ++++++++++++----------
 src/liblzma/lzma/lzma_decoder.c                | 12 ++++++------
 src/liblzma/lzma/lzma_encoder.c                |  6 +++---
 src/liblzma/lzma/lzma_encoder_optimum_normal.c |  2 +-
 src/liblzma/lzma/lzma_encoder_private.h        |  4 ++--
 5 files changed, 24 insertions(+), 22 deletions(-)

commit 5938f6de4d8ec9656776cd69e78ddfd6c3ad84e5
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: LZ decoder: Add unlikely().

 src/liblzma/lz/lz_decoder.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 9c252e3ed086c6b72590b2531586c42596d4a9d9
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: LZ decoder: Remove a useless unlikely().

 src/liblzma/lz/lz_decoder.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit f3872a59475456c5d365cad9f1c5be514cfa54b5
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: Optimize LZ decoder slightly.
    
    Now extra buffer space is reserved so that repeating bytes for
    any single match will never need to copy from two places (both
    the beginning and the end of the buffer). This simplifies
    dict_repeat() and helps a little with speed.
    
    This seems to reduce .lzma decompression time about 2 %, so
    with .xz and CRC it could be slightly less. The small things
    add up still.

 src/liblzma/lz/lz_decoder.c     |  43 ++++++++++++-----
 src/liblzma/lz/lz_decoder.h     | 101 +++++++++++++++++++++-------------------
 src/liblzma/lzma/lzma_decoder.c |   4 +-
 3 files changed, 88 insertions(+), 60 deletions(-)

commit eb518446e578acf079abae5f1ce28db7b6e59bc1
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: LZMA decoder: Get rid of next_state[].
    
    It's not completely obvious if this is better in the decoder.
    It should be good if compiler can avoid creating a branch
    (like using CMOV on x86).
    
    This also makes lzma_encoder.c use the new macros.

 src/liblzma/lzma/lzma_common.h  | 14 ++++++++++++++
 src/liblzma/lzma/lzma_decoder.c | 30 ++++++++----------------------
 src/liblzma/lzma/lzma_encoder.c |  4 ++--
 3 files changed, 24 insertions(+), 24 deletions(-)

commit e0c0ee475c0800c08291ae45e0d66aa00d5ce604
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: LZMA decoder improvements.
    
    This adds macros for bittree decoding which prepares the code
    for alternative C versions and inline assembly.

 src/liblzma/lzma/lzma_decoder.c        | 264 ++++++++++-----------------------
 src/liblzma/rangecoder/range_common.h  |   4 +
 src/liblzma/rangecoder/range_decoder.h | 142 ++++++++++++++++--
 3 files changed, 210 insertions(+), 200 deletions(-)

commit de5c5e417645ad8906ef914bc059d08c1462fc29
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-12 17:09:10 +0200

    liblzma: Creates Non-resumable and Resumable modes for lzma_decoder.
    
    The new decoder resumes the first decoder loop in the Resumable mode.
    Then, the code executes in Non-resumable mode until it detects that it
    cannot guarantee to have enough input/output to decode another symbol.
    
    The Resumable mode is how the decoder has always worked. Before decoding
    every input bit, it checks if there is enough space and will save its
    location to be resumed later. When the decoder has more input/output,
    it jumps back to the correct sequence in the Resumable mode code.
    
    When the input/output buffers are large, the Resumable mode is much
    slower than the Non-resumable because it has more branches and is harder
    for the compiler to optimize since it is in a large switch block.
    
    Early benchmarking shows significant time improvement (8-10% on gcc and
    clang x86) by using the Non-resumable code as much as possible.

 src/liblzma/lz/lz_decoder.h     |  14 +-
 src/liblzma/lzma/lzma_decoder.c | 720 ++++++++++++++++++++++++++++------------
 2 files changed, 521 insertions(+), 213 deletions(-)

commit e446ab7a18abfde18f8d1cf02a914df72b1370e3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-12 17:09:10 +0200

    liblzma: Creates separate "safe" range decoder mode.
    
    The new "safe" range decoder mode is the same as old range decoder, but
    now the default behavior of the range decoder will not check if there is
    enough input or output to complete the operation. When the buffers are
    close to fully consumed, the "safe" operations must be used instead. This
    will improve speed because it will reduce the number of branches needed
    for most of the range decoder operations.

 src/liblzma/lzma/lzma_decoder.c        | 108 ++++++++-------------------------
 src/liblzma/rangecoder/range_decoder.h |  77 +++++++++++++++++------
 2 files changed, 82 insertions(+), 103 deletions(-)

commit 7f6d9ca329ff3e01d4b0be7366eb4f5c93da41b9
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    doxygen/footer.html: Add missing closing tags and don't open a new tab.
    
    The footer template from Doxygen has the closing </body> </html>
    as Doxygen doesn't add them otherwise.
    
    target="_blank" was omitted as it's not useful here but
    it can be slightly annoying as one cannot just go back
    in the browser history.
    
    Since the footer links to the license file in the same
    directory and not to CC website, the rel attributes
    can be omitted.

 doxygen/footer.html | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

commit 26d1527d34d52b0f5d632d4fb636fb33d0867e92
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-13 13:19:10 +0200

    Tweak the expressions in AUTHORS.

 AUTHORS | 31 +++++++++++++++++++++++--------
 1 file changed, 23 insertions(+), 8 deletions(-)

commit d231d56580175fa040fdd3c6207a58243ce6217b
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-13 13:07:33 +0200

    Translations: Add the man page translators into man page header comment.
    
    It looked odd to only have the original English authors listed
    in the header comments of the translated files.

 po4a/.gitignore |  1 +
 po4a/po4a.conf  | 14 +++++++-------
 po4a/update-po  | 18 ++++++++++++++++++
 3 files changed, 26 insertions(+), 7 deletions(-)

commit 6d35fcb936474fca1acaebfd9502c097b6fde88e
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    Translations: Translate also messages of lzmainfo.
    
    lzmainfo has had translation support since 2009 at least but
    it was never added to po/POTFILES.in so the messages weren't
    translated. It's a very rarely needed tool so it's not too bad.
    
    This also adds src/xz/mytime.c to po/POTFILES.in although there
    are no translatable strings. It's simpler this way so that it
    won't be forgotten if strings were ever added to that file.

 po/POTFILES.in | 2 ++
 1 file changed, 2 insertions(+)

commit a9f369dd54b05f9ac4e00ead9d765d04fc259868
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    Translations: Add custom .pot header with SPDX license identifier.
    
    The same is used for both po/xz.pot and po4a/xz-man.pot.

 Makefile.am      | 1 +
 po/xz.pot-header | 7 +++++++
 po4a/update-po   | 8 ++++++++
 3 files changed, 16 insertions(+)

commit 469cd6653bb96e83c5cf1031c204d34566b15f44
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    Translations: po4a/update-po: Add copyright notice to xz-man.pot.
    
    All man pages are under 0BSD now so this is simple now.

 po4a/update-po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 28ce45e38fbed4b5f54f2013e38dab47d22bf699
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    Update COPYING about the man pages of the scripts.

 COPYING | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit e48287bf51afd5184ea74de1dcade9e153f873f7
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    xzdiff, xzgrep, and xzmore: Rewrite the man pages.
    
    The main reason is a kind of silly one:
    
    xz-man.pot contains strings from all man pages in XZ Utils.
    The man pages of xzdiff, xzgrep, and xzmore were under GPLv2
    and the rest under 0BSD. Thus xz-man.pot contained strings
    under two licences. po4a creates the translated man pages
    from the combined 0BSD+GPLv2 xz-man.pot.
    
    I haven't liked this mixing in xz-man.pot but the
    Translation Project requires that all man pages must be
    in the same .pot file. So a separate xz-man-gpl.pot
    wasn't an option.
    
    Since these man pages are short, rewriting them was quick enough.
    Now xz-man.pot is entirely under 0BSD and marking the per-file
    licenses is simpler.
    
    As a bonus, some wording hopefully is now slightly better
    although it's perhaps a matter of taste.
    
    NOTE: In xzgrep.1, the EXIT STATUS section was written by me
    in the commit d796b6d7fdb8b7238b277056cf9146cce25db604 so that's
    why that section could be taken as is from the old xzgrep.1.

 src/scripts/xzdiff.1 |  94 ++++++++++++++++++++++++-----------------
 src/scripts/xzgrep.1 | 116 ++++++++++++++++++++++++++++++++-------------------
 src/scripts/xzmore.1 |  79 ++++++++++++++++++++---------------
 3 files changed, 173 insertions(+), 116 deletions(-)

commit 3e551b111b8ae8150f1a1040364dbafc034f22be
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    xzless: Update man page slightly.
    
    The xz tool can decompress three file formats and xzless
    has always supported uncompressed files too.

 src/scripts/xzless.1 | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

commit 40f36da2262d13d6e1ba8449caa855512ae626d7
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    Translations: Change po/Makevars to add a copyright notice to po/xz.pot.

 po/Makevars | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 24192854e2ea5c06997431a98bda3c36c5da1497
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    Translations: Update po/Makevars to use the template from gettext 0.22.4.
    
    Also add SPDX license identifier now that there is a known license.

 po/Makevars | 51 ++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 46 insertions(+), 5 deletions(-)

commit b94154957370116480b43bcabca25fc52deb9853
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: Include the SPDX license identifier 0BSD to generated files.
    
    Perhaps the generated files aren't even copyrightable but
    using the same license for them as for the rest of the liblzma
    keeps things more consistent for tools that look for license info.

 src/liblzma/check/crc32_table_be.h      |  4 +++-
 src/liblzma/check/crc32_table_le.h      |  4 +++-
 src/liblzma/check/crc32_tablegen.c      | 16 ++++++++++------
 src/liblzma/check/crc64_table_be.h      |  4 +++-
 src/liblzma/check/crc64_table_le.h      |  4 +++-
 src/liblzma/check/crc64_tablegen.c      |  8 +++++---
 src/liblzma/lz/lz_encoder_hash_table.h  |  4 +++-
 src/liblzma/lzma/fastpos_table.c        |  4 +++-
 src/liblzma/lzma/fastpos_tablegen.c     | 12 +++++++-----
 src/liblzma/rangecoder/price_table.c    |  4 +++-
 src/liblzma/rangecoder/price_tablegen.c | 12 +++++++-----
 11 files changed, 50 insertions(+), 26 deletions(-)

commit 8e4ec794836bc1701d8c9bd5e347b8ce8cc5bbb4
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    liblzma: Fix compilation of price_tablegen.c.
    
    It is built and run only manually so this didn't matter
    unless one wanted to regenerate the price_table.c.

 src/liblzma/rangecoder/price_tablegen.c | 5 +++++
 src/liblzma/rangecoder/range_common.h   | 5 ++++-
 2 files changed, 9 insertions(+), 1 deletion(-)

commit e99bff3ffbcdf2634fd5bd13887627ec7dbfecaf
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    Add SPDX license identifiers to GPL, LGPL, and FSFULLR files.

 extra/scanlzma/scanlzma.c | 2 ++
 lib/Makefile.am           | 2 ++
 lib/getopt-cdefs.h        | 2 ++
 lib/getopt-core.h         | 2 ++
 lib/getopt-ext.h          | 2 ++
 lib/getopt-pfx-core.h     | 2 ++
 lib/getopt-pfx-ext.h      | 2 ++
 lib/getopt.c              | 2 ++
 lib/getopt.in.h           | 2 ++
 lib/getopt1.c             | 2 ++
 lib/getopt_int.h          | 2 ++
 m4/ax_pthread.m4          | 2 ++
 m4/getopt.m4              | 2 ++
 m4/posix-shell.m4         | 2 ++
 m4/visibility.m4          | 2 ++
 src/scripts/xzdiff.1      | 3 +--
 src/scripts/xzdiff.in     | 1 +
 src/scripts/xzgrep.1      | 3 +--
 src/scripts/xzgrep.in     | 1 +
 src/scripts/xzless.in     | 1 +
 src/scripts/xzmore.1      | 3 +--
 src/scripts/xzmore.in     | 1 +
 22 files changed, 37 insertions(+), 6 deletions(-)

commit 22af94128b89a131f5e58ae69bee5e50227c15da
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    Add SPDX license identifier into 0BSD source code files.

 .github/workflows/ci.yml                       | 2 ++
 .github/workflows/windows-ci.yml               | 2 ++
 CMakeLists.txt                                 | 2 ++
 Makefile.am                                    | 3 +--
 autogen.sh                                     | 1 +
 build-aux/ci_build.sh                          | 3 ++-
 build-aux/manconv.sh                           | 3 ++-
 build-aux/version.sh                           | 3 ++-
 cmake/remove-ordinals.cmake                    | 2 ++
 cmake/tuklib_common.cmake                      | 4 ++++
 cmake/tuklib_cpucores.cmake                    | 4 ++++
 cmake/tuklib_integer.cmake                     | 4 ++++
 cmake/tuklib_large_file_support.cmake          | 4 ++++
 cmake/tuklib_mbstr.cmake                       | 4 ++++
 cmake/tuklib_physmem.cmake                     | 4 ++++
 cmake/tuklib_progname.cmake                    | 4 ++++
 configure.ac                                   | 4 +++-
 debug/Makefile.am                              | 3 +--
 debug/crc32.c                                  | 2 ++
 debug/full_flush.c                             | 2 ++
 debug/hex2bin.c                                | 2 ++
 debug/known_sizes.c                            | 2 ++
 debug/memusage.c                               | 2 ++
 debug/repeat.c                                 | 2 ++
 debug/sync_flush.c                             | 2 ++
 debug/translation.bash                         | 1 +
 doc/examples/01_compress_easy.c                | 2 ++
 doc/examples/02_decompress.c                   | 2 ++
 doc/examples/03_compress_custom.c              | 2 ++
 doc/examples/04_compress_easy_mt.c             | 2 ++
 doc/examples/11_file_info.c                    | 2 ++
 doc/examples/Makefile                          | 3 +--
 dos/Makefile                                   | 2 ++
 dos/config.h                                   | 2 ++
 doxygen/update-doxygen                         | 3 ++-
 extra/7z2lzma/7z2lzma.bash                     | 3 ++-
 m4/tuklib_common.m4                            | 8 ++++++--
 m4/tuklib_cpucores.m4                          | 8 ++++++--
 m4/tuklib_integer.m4                           | 8 ++++++--
 m4/tuklib_mbstr.m4                             | 8 ++++++--
 m4/tuklib_physmem.m4                           | 8 ++++++--
 m4/tuklib_progname.m4                          | 8 ++++++--
 po/POTFILES.in                                 | 2 ++
 po4a/po4a.conf                                 | 2 ++
 po4a/update-po                                 | 3 ++-
 src/Makefile.am                                | 3 +--
 src/common/common_w32res.rc                    | 2 ++
 src/common/mythread.h                          | 2 ++
 src/common/sysdefs.h                           | 2 ++
 src/common/tuklib_common.h                     | 2 ++
 src/common/tuklib_config.h                     | 2 ++
 src/common/tuklib_cpucores.c                   | 2 ++
 src/common/tuklib_cpucores.h                   | 2 ++
 src/common/tuklib_exit.c                       | 2 ++
 src/common/tuklib_exit.h                       | 2 ++
 src/common/tuklib_gettext.h                    | 2 ++
 src/common/tuklib_integer.h                    | 2 ++
 src/common/tuklib_mbstr.h                      | 2 ++
 src/common/tuklib_mbstr_fw.c                   | 2 ++
 src/common/tuklib_mbstr_width.c                | 2 ++
 src/common/tuklib_open_stdxxx.c                | 2 ++
 src/common/tuklib_open_stdxxx.h                | 2 ++
 src/common/tuklib_physmem.c                    | 2 ++
 src/common/tuklib_physmem.h                    | 2 ++
 src/common/tuklib_progname.c                   | 2 ++
 src/common/tuklib_progname.h                   | 2 ++
 src/liblzma/Makefile.am                        | 3 +--
 src/liblzma/api/Makefile.am                    | 3 +--
 src/liblzma/api/lzma.h                         | 2 ++
 src/liblzma/api/lzma/base.h                    | 2 ++
 src/liblzma/api/lzma/bcj.h                     | 2 ++
 src/liblzma/api/lzma/block.h                   | 2 ++
 src/liblzma/api/lzma/check.h                   | 2 ++
 src/liblzma/api/lzma/container.h               | 2 ++
 src/liblzma/api/lzma/delta.h                   | 2 ++
 src/liblzma/api/lzma/filter.h                  | 2 ++
 src/liblzma/api/lzma/hardware.h                | 2 ++
 src/liblzma/api/lzma/index.h                   | 2 ++
 src/liblzma/api/lzma/index_hash.h              | 2 ++
 src/liblzma/api/lzma/lzma12.h                  | 2 ++
 src/liblzma/api/lzma/stream_flags.h            | 2 ++
 src/liblzma/api/lzma/version.h                 | 2 ++
 src/liblzma/api/lzma/vli.h                     | 2 ++
 src/liblzma/check/Makefile.inc                 | 4 ++--
 src/liblzma/check/check.c                      | 2 ++
 src/liblzma/check/check.h                      | 2 ++
 src/liblzma/check/crc32_arm64.h                | 2 ++
 src/liblzma/check/crc32_fast.c                 | 2 ++
 src/liblzma/check/crc32_small.c                | 2 ++
 src/liblzma/check/crc32_table.c                | 2 ++
 src/liblzma/check/crc32_tablegen.c             | 2 ++
 src/liblzma/check/crc32_x86.S                  | 2 ++
 src/liblzma/check/crc64_fast.c                 | 2 ++
 src/liblzma/check/crc64_small.c                | 2 ++
 src/liblzma/check/crc64_table.c                | 2 ++
 src/liblzma/check/crc64_tablegen.c             | 2 ++
 src/liblzma/check/crc64_x86.S                  | 2 ++
 src/liblzma/check/crc_common.h                 | 2 ++
 src/liblzma/check/crc_x86_clmul.h              | 2 ++
 src/liblzma/check/sha256.c                     | 2 ++
 src/liblzma/common/Makefile.inc                | 3 +--
 src/liblzma/common/alone_decoder.c             | 2 ++
 src/liblzma/common/alone_decoder.h             | 2 ++
 src/liblzma/common/alone_encoder.c             | 2 ++
 src/liblzma/common/auto_decoder.c              | 2 ++
 src/liblzma/common/block_buffer_decoder.c      | 2 ++
 src/liblzma/common/block_buffer_encoder.c      | 2 ++
 src/liblzma/common/block_buffer_encoder.h      | 2 ++
 src/liblzma/common/block_decoder.c             | 2 ++
 src/liblzma/common/block_decoder.h             | 2 ++
 src/liblzma/common/block_encoder.c             | 2 ++
 src/liblzma/common/block_encoder.h             | 2 ++
 src/liblzma/common/block_header_decoder.c      | 2 ++
 src/liblzma/common/block_header_encoder.c      | 2 ++
 src/liblzma/common/block_util.c                | 2 ++
 src/liblzma/common/common.c                    | 2 ++
 src/liblzma/common/common.h                    | 2 ++
 src/liblzma/common/easy_buffer_encoder.c       | 2 ++
 src/liblzma/common/easy_decoder_memusage.c     | 2 ++
 src/liblzma/common/easy_encoder.c              | 2 ++
 src/liblzma/common/easy_encoder_memusage.c     | 2 ++
 src/liblzma/common/easy_preset.c               | 2 ++
 src/liblzma/common/easy_preset.h               | 2 ++
 src/liblzma/common/file_info.c                 | 2 ++
 src/liblzma/common/filter_buffer_decoder.c     | 2 ++
 src/liblzma/common/filter_buffer_encoder.c     | 2 ++
 src/liblzma/common/filter_common.c             | 2 ++
 src/liblzma/common/filter_common.h             | 2 ++
 src/liblzma/common/filter_decoder.c            | 2 ++
 src/liblzma/common/filter_decoder.h            | 2 ++
 src/liblzma/common/filter_encoder.c            | 2 ++
 src/liblzma/common/filter_encoder.h            | 2 ++
 src/liblzma/common/filter_flags_decoder.c      | 2 ++
 src/liblzma/common/filter_flags_encoder.c      | 2 ++
 src/liblzma/common/hardware_cputhreads.c       | 2 ++
 src/liblzma/common/hardware_physmem.c          | 2 ++
 src/liblzma/common/index.c                     | 2 ++
 src/liblzma/common/index.h                     | 2 ++
 src/liblzma/common/index_decoder.c             | 2 ++
 src/liblzma/common/index_decoder.h             | 2 ++
 src/liblzma/common/index_encoder.c             | 2 ++
 src/liblzma/common/index_encoder.h             | 2 ++
 src/liblzma/common/index_hash.c                | 2 ++
 src/liblzma/common/lzip_decoder.c              | 2 ++
 src/liblzma/common/lzip_decoder.h              | 2 ++
 src/liblzma/common/memcmplen.h                 | 2 ++
 src/liblzma/common/microlzma_decoder.c         | 2 ++
 src/liblzma/common/microlzma_encoder.c         | 2 ++
 src/liblzma/common/outqueue.c                  | 2 ++
 src/liblzma/common/outqueue.h                  | 2 ++
 src/liblzma/common/stream_buffer_decoder.c     | 2 ++
 src/liblzma/common/stream_buffer_encoder.c     | 2 ++
 src/liblzma/common/stream_decoder.c            | 2 ++
 src/liblzma/common/stream_decoder.h            | 2 ++
 src/liblzma/common/stream_decoder_mt.c         | 2 ++
 src/liblzma/common/stream_encoder.c            | 2 ++
 src/liblzma/common/stream_encoder_mt.c         | 2 ++
 src/liblzma/common/stream_flags_common.c       | 2 ++
 src/liblzma/common/stream_flags_common.h       | 2 ++
 src/liblzma/common/stream_flags_decoder.c      | 2 ++
 src/liblzma/common/stream_flags_encoder.c      | 2 ++
 src/liblzma/common/string_conversion.c         | 2 ++
 src/liblzma/common/vli_decoder.c               | 2 ++
 src/liblzma/common/vli_encoder.c               | 2 ++
 src/liblzma/common/vli_size.c                  | 2 ++
 src/liblzma/delta/Makefile.inc                 | 3 +--
 src/liblzma/delta/delta_common.c               | 2 ++
 src/liblzma/delta/delta_common.h               | 2 ++
 src/liblzma/delta/delta_decoder.c              | 2 ++
 src/liblzma/delta/delta_decoder.h              | 2 ++
 src/liblzma/delta/delta_encoder.c              | 2 ++
 src/liblzma/delta/delta_encoder.h              | 2 ++
 src/liblzma/delta/delta_private.h              | 2 ++
 src/liblzma/liblzma.pc.in                      | 3 +--
 src/liblzma/liblzma_generic.map                | 2 ++
 src/liblzma/liblzma_linux.map                  | 2 ++
 src/liblzma/liblzma_w32res.rc                  | 2 ++
 src/liblzma/lz/Makefile.inc                    | 3 +--
 src/liblzma/lz/lz_decoder.c                    | 2 ++
 src/liblzma/lz/lz_decoder.h                    | 2 ++
 src/liblzma/lz/lz_encoder.c                    | 2 ++
 src/liblzma/lz/lz_encoder.h                    | 2 ++
 src/liblzma/lz/lz_encoder_hash.h               | 2 ++
 src/liblzma/lz/lz_encoder_mf.c                 | 2 ++
 src/liblzma/lzma/Makefile.inc                  | 3 +--
 src/liblzma/lzma/fastpos.h                     | 2 ++
 src/liblzma/lzma/fastpos_tablegen.c            | 2 ++
 src/liblzma/lzma/lzma2_decoder.c               | 2 ++
 src/liblzma/lzma/lzma2_decoder.h               | 2 ++
 src/liblzma/lzma/lzma2_encoder.c               | 2 ++
 src/liblzma/lzma/lzma2_encoder.h               | 2 ++
 src/liblzma/lzma/lzma_common.h                 | 2 ++
 src/liblzma/lzma/lzma_decoder.c                | 2 ++
 src/liblzma/lzma/lzma_decoder.h                | 2 ++
 src/liblzma/lzma/lzma_encoder.c                | 2 ++
 src/liblzma/lzma/lzma_encoder.h                | 2 ++
 src/liblzma/lzma/lzma_encoder_optimum_fast.c   | 2 ++
 src/liblzma/lzma/lzma_encoder_optimum_normal.c | 2 ++
 src/liblzma/lzma/lzma_encoder_presets.c        | 2 ++
 src/liblzma/lzma/lzma_encoder_private.h        | 2 ++
 src/liblzma/rangecoder/Makefile.inc            | 3 +--
 src/liblzma/rangecoder/price.h                 | 2 ++
 src/liblzma/rangecoder/price_tablegen.c        | 2 ++
 src/liblzma/rangecoder/range_common.h          | 2 ++
 src/liblzma/rangecoder/range_decoder.h         | 2 ++
 src/liblzma/rangecoder/range_encoder.h         | 2 ++
 src/liblzma/simple/Makefile.inc                | 3 +--
 src/liblzma/simple/arm.c                       | 2 ++
 src/liblzma/simple/arm64.c                     | 2 ++
 src/liblzma/simple/armthumb.c                  | 2 ++
 src/liblzma/simple/ia64.c                      | 2 ++
 src/liblzma/simple/powerpc.c                   | 2 ++
 src/liblzma/simple/riscv.c                     | 2 ++
 src/liblzma/simple/simple_coder.c              | 2 ++
 src/liblzma/simple/simple_coder.h              | 2 ++
 src/liblzma/simple/simple_decoder.c            | 2 ++
 src/liblzma/simple/simple_decoder.h            | 2 ++
 src/liblzma/simple/simple_encoder.c            | 2 ++
 src/liblzma/simple/simple_encoder.h            | 2 ++
 src/liblzma/simple/simple_private.h            | 2 ++
 src/liblzma/simple/sparc.c                     | 2 ++
 src/liblzma/simple/x86.c                       | 2 ++
 src/liblzma/validate_map.sh                    | 1 +
 src/lzmainfo/Makefile.am                       | 3 +--
 src/lzmainfo/lzmainfo.c                        | 2 ++
 src/lzmainfo/lzmainfo_w32res.rc                | 2 ++
 src/scripts/Makefile.am                        | 3 +--
 src/xz/Makefile.am                             | 3 +--
 src/xz/args.c                                  | 2 ++
 src/xz/args.h                                  | 2 ++
 src/xz/coder.c                                 | 2 ++
 src/xz/coder.h                                 | 2 ++
 src/xz/file_io.c                               | 2 ++
 src/xz/file_io.h                               | 2 ++
 src/xz/hardware.c                              | 2 ++
 src/xz/hardware.h                              | 2 ++
 src/xz/list.c                                  | 2 ++
 src/xz/list.h                                  | 2 ++
 src/xz/main.c                                  | 2 ++
 src/xz/main.h                                  | 2 ++
 src/xz/message.c                               | 2 ++
 src/xz/message.h                               | 2 ++
 src/xz/mytime.c                                | 2 ++
 src/xz/mytime.h                                | 2 ++
 src/xz/options.c                               | 2 ++
 src/xz/options.h                               | 2 ++
 src/xz/private.h                               | 2 ++
 src/xz/signals.c                               | 2 ++
 src/xz/signals.h                               | 2 ++
 src/xz/suffix.c                                | 2 ++
 src/xz/suffix.h                                | 2 ++
 src/xz/util.c                                  | 2 ++
 src/xz/util.h                                  | 2 ++
 src/xz/xz_w32res.rc                            | 2 ++
 src/xzdec/Makefile.am                          | 3 +--
 src/xzdec/lzmadec_w32res.rc                    | 2 ++
 src/xzdec/xzdec.c                              | 2 ++
 src/xzdec/xzdec_w32res.rc                      | 2 ++
 tests/Makefile.am                              | 3 +--
 tests/bcj_test.c                               | 2 ++
 tests/code_coverage.sh                         | 1 +
 tests/create_compress_files.c                  | 2 ++
 tests/ossfuzz/fuzz_common.h                    | 2 ++
 tests/ossfuzz/fuzz_decode_alone.c              | 2 ++
 tests/ossfuzz/fuzz_decode_stream.c             | 2 ++
 tests/ossfuzz/fuzz_encode_stream.c             | 2 ++
 tests/test_bcj_exact_size.c                    | 2 ++
 tests/test_block_header.c                      | 2 ++
 tests/test_check.c                             | 2 ++
 tests/test_compress.sh                         | 1 +
 tests/test_compress_generated_abc              | 1 +
 tests/test_compress_generated_random           | 1 +
 tests/test_compress_generated_text             | 1 +
 tests/test_compress_prepared_bcj_sparc         | 1 +
 tests/test_compress_prepared_bcj_x86           | 1 +
 tests/test_files.sh                            | 1 +
 tests/test_filter_flags.c                      | 2 ++
 tests/test_filter_str.c                        | 2 ++
 tests/test_hardware.c                          | 2 ++
 tests/test_index.c                             | 2 ++
 tests/test_index_hash.c                        | 2 ++
 tests/test_lzip_decoder.c                      | 2 ++
 tests/test_memlimit.c                          | 2 ++
 tests/test_scripts.sh                          | 1 +
 tests/test_stream_flags.c                      | 2 ++
 tests/test_suffix.sh                           | 1 +
 tests/test_vli.c                               | 2 ++
 tests/tests.h                                  | 2 ++
 tests/tuktest.h                                | 2 ++
 windows/build.bash                             | 3 ++-
 290 files changed, 588 insertions(+), 58 deletions(-)

commit 23de53421ea258cde6a3c33a038b1e9d08f771d1
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 23:25:54 +0200

    liblzma: Sync the AUTHORS fix about SHA-256 to lzma.h.

 src/liblzma/api/lzma.h | 10 ++++------
 1 file changed, 4 insertions(+), 6 deletions(-)

commit 689e0228baeb95232430e90d628379db89583d71
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-12 17:09:10 +0200

    Change most public domain parts to 0BSD.
    
    Translations and doc/xz-file-format.txt and doc/lzma-file-format.txt
    were not touched.
    
    COPYING.0BSD was added.

 .github/workflows/ci.yml                       |   3 -
 .github/workflows/windows-ci.yml               |   3 -
 CMakeLists.txt                                 |   3 -
 COPYING                                        | 112 ++++++++++++++-----------
 COPYING.0BSD                                   |  11 +++
 Makefile.am                                    |   3 -
 PACKAGERS                                      |  11 +--
 autogen.sh                                     |   3 -
 build-aux/ci_build.sh                          |   3 -
 build-aux/manconv.sh                           |   3 -
 build-aux/version.sh                           |   3 -
 cmake/remove-ordinals.cmake                    |   3 -
 cmake/tuklib_common.cmake                      |   3 -
 cmake/tuklib_cpucores.cmake                    |   3 -
 cmake/tuklib_integer.cmake                     |   3 -
 cmake/tuklib_large_file_support.cmake          |   3 -
 cmake/tuklib_mbstr.cmake                       |   3 -
 cmake/tuklib_physmem.cmake                     |   3 -
 cmake/tuklib_progname.cmake                    |   3 -
 configure.ac                                   |   3 -
 debug/Makefile.am                              |   3 -
 debug/crc32.c                                  |   3 -
 debug/full_flush.c                             |   3 -
 debug/hex2bin.c                                |   3 -
 debug/known_sizes.c                            |   3 -
 debug/memusage.c                               |   3 -
 debug/repeat.c                                 |   3 -
 debug/sync_flush.c                             |   3 -
 debug/translation.bash                         |   3 -
 doc/examples/01_compress_easy.c                |   3 -
 doc/examples/02_decompress.c                   |   3 -
 doc/examples/03_compress_custom.c              |   3 -
 doc/examples/04_compress_easy_mt.c             |   3 -
 doc/examples/11_file_info.c                    |   3 -
 doc/examples/Makefile                          |   3 -
 dos/Makefile                                   |   3 -
 doxygen/update-doxygen                         |   3 -
 extra/7z2lzma/7z2lzma.bash                     |   3 -
 m4/tuklib_common.m4                            |   3 -
 m4/tuklib_cpucores.m4                          |   3 -
 m4/tuklib_integer.m4                           |   3 -
 m4/tuklib_mbstr.m4                             |   3 -
 m4/tuklib_physmem.m4                           |   3 -
 m4/tuklib_progname.m4                          |   3 -
 po4a/update-po                                 |   3 -
 src/Makefile.am                                |   3 -
 src/common/common_w32res.rc                    |   3 -
 src/common/mythread.h                          |   3 -
 src/common/sysdefs.h                           |   3 -
 src/common/tuklib_common.h                     |   3 -
 src/common/tuklib_cpucores.c                   |   3 -
 src/common/tuklib_cpucores.h                   |   3 -
 src/common/tuklib_exit.c                       |   3 -
 src/common/tuklib_exit.h                       |   3 -
 src/common/tuklib_gettext.h                    |   3 -
 src/common/tuklib_integer.h                    |   3 -
 src/common/tuklib_mbstr.h                      |   3 -
 src/common/tuklib_mbstr_fw.c                   |   3 -
 src/common/tuklib_mbstr_width.c                |   3 -
 src/common/tuklib_open_stdxxx.c                |   3 -
 src/common/tuklib_open_stdxxx.h                |   3 -
 src/common/tuklib_physmem.c                    |   3 -
 src/common/tuklib_physmem.h                    |   3 -
 src/common/tuklib_progname.c                   |   3 -
 src/common/tuklib_progname.h                   |   3 -
 src/liblzma/Makefile.am                        |   3 -
 src/liblzma/api/Makefile.am                    |   3 -
 src/liblzma/api/lzma.h                         |  13 ++-
 src/liblzma/api/lzma/base.h                    |   3 -
 src/liblzma/api/lzma/bcj.h                     |   3 -
 src/liblzma/api/lzma/block.h                   |   3 -
 src/liblzma/api/lzma/check.h                   |   3 -
 src/liblzma/api/lzma/container.h               |   3 -
 src/liblzma/api/lzma/delta.h                   |   3 -
 src/liblzma/api/lzma/filter.h                  |   3 -
 src/liblzma/api/lzma/hardware.h                |   3 -
 src/liblzma/api/lzma/index.h                   |   3 -
 src/liblzma/api/lzma/index_hash.h              |   3 -
 src/liblzma/api/lzma/lzma12.h                  |   3 -
 src/liblzma/api/lzma/stream_flags.h            |   3 -
 src/liblzma/api/lzma/version.h                 |   3 -
 src/liblzma/api/lzma/vli.h                     |   3 -
 src/liblzma/check/Makefile.inc                 |   3 -
 src/liblzma/check/check.c                      |   3 -
 src/liblzma/check/check.h                      |   3 -
 src/liblzma/check/crc32_arm64.h                |   3 -
 src/liblzma/check/crc32_fast.c                 |   3 -
 src/liblzma/check/crc32_small.c                |   3 -
 src/liblzma/check/crc32_table.c                |   3 -
 src/liblzma/check/crc32_tablegen.c             |   3 -
 src/liblzma/check/crc32_x86.S                  |   3 -
 src/liblzma/check/crc64_fast.c                 |   3 -
 src/liblzma/check/crc64_small.c                |   3 -
 src/liblzma/check/crc64_table.c                |   3 -
 src/liblzma/check/crc64_tablegen.c             |   3 -
 src/liblzma/check/crc64_x86.S                  |   3 -
 src/liblzma/check/crc_common.h                 |   3 -
 src/liblzma/check/crc_x86_clmul.h              |   3 -
 src/liblzma/check/sha256.c                     |   3 -
 src/liblzma/common/Makefile.inc                |   3 -
 src/liblzma/common/alone_decoder.c             |   3 -
 src/liblzma/common/alone_decoder.h             |   3 -
 src/liblzma/common/alone_encoder.c             |   3 -
 src/liblzma/common/auto_decoder.c              |   3 -
 src/liblzma/common/block_buffer_decoder.c      |   3 -
 src/liblzma/common/block_buffer_encoder.c      |   3 -
 src/liblzma/common/block_buffer_encoder.h      |   3 -
 src/liblzma/common/block_decoder.c             |   3 -
 src/liblzma/common/block_decoder.h             |   3 -
 src/liblzma/common/block_encoder.c             |   3 -
 src/liblzma/common/block_encoder.h             |   3 -
 src/liblzma/common/block_header_decoder.c      |   3 -
 src/liblzma/common/block_header_encoder.c      |   3 -
 src/liblzma/common/block_util.c                |   3 -
 src/liblzma/common/common.c                    |   3 -
 src/liblzma/common/common.h                    |   3 -
 src/liblzma/common/easy_buffer_encoder.c       |   3 -
 src/liblzma/common/easy_decoder_memusage.c     |   3 -
 src/liblzma/common/easy_encoder.c              |   3 -
 src/liblzma/common/easy_encoder_memusage.c     |   3 -
 src/liblzma/common/easy_preset.c               |   3 -
 src/liblzma/common/easy_preset.h               |   3 -
 src/liblzma/common/file_info.c                 |   3 -
 src/liblzma/common/filter_buffer_decoder.c     |   3 -
 src/liblzma/common/filter_buffer_encoder.c     |   3 -
 src/liblzma/common/filter_common.c             |   3 -
 src/liblzma/common/filter_common.h             |   3 -
 src/liblzma/common/filter_decoder.c            |   3 -
 src/liblzma/common/filter_decoder.h            |   3 -
 src/liblzma/common/filter_encoder.c            |   3 -
 src/liblzma/common/filter_encoder.h            |   3 -
 src/liblzma/common/filter_flags_decoder.c      |   3 -
 src/liblzma/common/filter_flags_encoder.c      |   3 -
 src/liblzma/common/hardware_cputhreads.c       |   3 -
 src/liblzma/common/hardware_physmem.c          |   3 -
 src/liblzma/common/index.c                     |   3 -
 src/liblzma/common/index.h                     |   3 -
 src/liblzma/common/index_decoder.c             |   3 -
 src/liblzma/common/index_decoder.h             |   3 -
 src/liblzma/common/index_encoder.c             |   3 -
 src/liblzma/common/index_encoder.h             |   3 -
 src/liblzma/common/index_hash.c                |   3 -
 src/liblzma/common/lzip_decoder.c              |   3 -
 src/liblzma/common/lzip_decoder.h              |   3 -
 src/liblzma/common/memcmplen.h                 |   3 -
 src/liblzma/common/microlzma_decoder.c         |   3 -
 src/liblzma/common/microlzma_encoder.c         |   3 -
 src/liblzma/common/outqueue.c                  |   3 -
 src/liblzma/common/outqueue.h                  |   3 -
 src/liblzma/common/stream_buffer_decoder.c     |   3 -
 src/liblzma/common/stream_buffer_encoder.c     |   3 -
 src/liblzma/common/stream_decoder.c            |   3 -
 src/liblzma/common/stream_decoder.h            |   3 -
 src/liblzma/common/stream_decoder_mt.c         |   3 -
 src/liblzma/common/stream_encoder.c            |   3 -
 src/liblzma/common/stream_encoder_mt.c         |   3 -
 src/liblzma/common/stream_flags_common.c       |   3 -
 src/liblzma/common/stream_flags_common.h       |   3 -
 src/liblzma/common/stream_flags_decoder.c      |   3 -
 src/liblzma/common/stream_flags_encoder.c      |   3 -
 src/liblzma/common/string_conversion.c         |   3 -
 src/liblzma/common/vli_decoder.c               |   3 -
 src/liblzma/common/vli_encoder.c               |   3 -
 src/liblzma/common/vli_size.c                  |   3 -
 src/liblzma/delta/Makefile.inc                 |   3 -
 src/liblzma/delta/delta_common.c               |   3 -
 src/liblzma/delta/delta_common.h               |   3 -
 src/liblzma/delta/delta_decoder.c              |   3 -
 src/liblzma/delta/delta_decoder.h              |   3 -
 src/liblzma/delta/delta_encoder.c              |   3 -
 src/liblzma/delta/delta_encoder.h              |   3 -
 src/liblzma/delta/delta_private.h              |   3 -
 src/liblzma/liblzma.pc.in                      |   3 -
 src/liblzma/liblzma_w32res.rc                  |   3 -
 src/liblzma/lz/Makefile.inc                    |   3 -
 src/liblzma/lz/lz_decoder.c                    |   3 -
 src/liblzma/lz/lz_decoder.h                    |   3 -
 src/liblzma/lz/lz_encoder.c                    |   3 -
 src/liblzma/lz/lz_encoder.h                    |   3 -
 src/liblzma/lz/lz_encoder_hash.h               |   3 -
 src/liblzma/lz/lz_encoder_mf.c                 |   3 -
 src/liblzma/lzma/Makefile.inc                  |   3 -
 src/liblzma/lzma/fastpos.h                     |   3 -
 src/liblzma/lzma/fastpos_tablegen.c            |   3 -
 src/liblzma/lzma/lzma2_decoder.c               |   3 -
 src/liblzma/lzma/lzma2_decoder.h               |   3 -
 src/liblzma/lzma/lzma2_encoder.c               |   3 -
 src/liblzma/lzma/lzma2_encoder.h               |   3 -
 src/liblzma/lzma/lzma_common.h                 |   3 -
 src/liblzma/lzma/lzma_decoder.c                |   3 -
 src/liblzma/lzma/lzma_decoder.h                |   3 -
 src/liblzma/lzma/lzma_encoder.c                |   3 -
 src/liblzma/lzma/lzma_encoder.h                |   3 -
 src/liblzma/lzma/lzma_encoder_optimum_fast.c   |   3 -
 src/liblzma/lzma/lzma_encoder_optimum_normal.c |   3 -
 src/liblzma/lzma/lzma_encoder_presets.c        |   3 -
 src/liblzma/lzma/lzma_encoder_private.h        |   3 -
 src/liblzma/rangecoder/Makefile.inc            |   3 -
 src/liblzma/rangecoder/price.h                 |   3 -
 src/liblzma/rangecoder/price_tablegen.c        |   3 -
 src/liblzma/rangecoder/range_common.h          |   3 -
 src/liblzma/rangecoder/range_decoder.h         |   3 -
 src/liblzma/rangecoder/range_encoder.h         |   3 -
 src/liblzma/simple/Makefile.inc                |   3 -
 src/liblzma/simple/arm.c                       |   3 -
 src/liblzma/simple/arm64.c                     |   3 -
 src/liblzma/simple/armthumb.c                  |   3 -
 src/liblzma/simple/ia64.c                      |   3 -
 src/liblzma/simple/powerpc.c                   |   3 -
 src/liblzma/simple/riscv.c                     |   3 -
 src/liblzma/simple/simple_coder.c              |   3 -
 src/liblzma/simple/simple_coder.h              |   3 -
 src/liblzma/simple/simple_decoder.c            |   3 -
 src/liblzma/simple/simple_decoder.h            |   3 -
 src/liblzma/simple/simple_encoder.c            |   3 -
 src/liblzma/simple/simple_encoder.h            |   3 -
 src/liblzma/simple/simple_private.h            |   3 -
 src/liblzma/simple/sparc.c                     |   3 -
 src/liblzma/simple/x86.c                       |   3 -
 src/liblzma/validate_map.sh                    |   3 -
 src/lzmainfo/Makefile.am                       |   3 -
 src/lzmainfo/lzmainfo.1                        |   4 +-
 src/lzmainfo/lzmainfo.c                        |   3 -
 src/lzmainfo/lzmainfo_w32res.rc                |   3 -
 src/scripts/Makefile.am                        |   3 -
 src/scripts/xzless.1                           |   4 +-
 src/xz/Makefile.am                             |   3 -
 src/xz/args.c                                  |   3 -
 src/xz/args.h                                  |   3 -
 src/xz/coder.c                                 |   3 -
 src/xz/coder.h                                 |   3 -
 src/xz/file_io.c                               |   3 -
 src/xz/file_io.h                               |   3 -
 src/xz/hardware.c                              |   3 -
 src/xz/hardware.h                              |   3 -
 src/xz/list.c                                  |   3 -
 src/xz/list.h                                  |   3 -
 src/xz/main.c                                  |   3 -
 src/xz/main.h                                  |   3 -
 src/xz/message.c                               |   3 -
 src/xz/message.h                               |   3 -
 src/xz/mytime.c                                |   3 -
 src/xz/mytime.h                                |   3 -
 src/xz/options.c                               |   3 -
 src/xz/options.h                               |   3 -
 src/xz/private.h                               |   3 -
 src/xz/signals.c                               |   3 -
 src/xz/signals.h                               |   3 -
 src/xz/suffix.c                                |   3 -
 src/xz/suffix.h                                |   3 -
 src/xz/util.c                                  |   3 -
 src/xz/util.h                                  |   3 -
 src/xz/xz.1                                    |   4 +-
 src/xz/xz_w32res.rc                            |   3 -
 src/xzdec/Makefile.am                          |   3 -
 src/xzdec/lzmadec_w32res.rc                    |   3 -
 src/xzdec/xzdec.1                              |   4 +-
 src/xzdec/xzdec.c                              |   3 -
 src/xzdec/xzdec_w32res.rc                      |   3 -
 tests/Makefile.am                              |   3 -
 tests/bcj_test.c                               |   3 -
 tests/code_coverage.sh                         |   3 -
 tests/create_compress_files.c                  |   3 -
 tests/files/README                             |   3 +-
 tests/ossfuzz/fuzz_common.h                    |   3 -
 tests/ossfuzz/fuzz_decode_alone.c              |   3 -
 tests/ossfuzz/fuzz_decode_stream.c             |   3 -
 tests/ossfuzz/fuzz_encode_stream.c             |   3 -
 tests/test_bcj_exact_size.c                    |   3 -
 tests/test_block_header.c                      |   3 -
 tests/test_check.c                             |   3 -
 tests/test_compress.sh                         |   3 -
 tests/test_files.sh                            |   3 -
 tests/test_filter_flags.c                      |   3 -
 tests/test_filter_str.c                        |   3 -
 tests/test_hardware.c                          |   3 -
 tests/test_index.c                             |   3 -
 tests/test_index_hash.c                        |   3 -
 tests/test_lzip_decoder.c                      |   3 -
 tests/test_memlimit.c                          |   3 -
 tests/test_scripts.sh                          |   3 -
 tests/test_stream_flags.c                      |   3 -
 tests/test_suffix.sh                           |   3 -
 tests/test_vli.c                               |   3 -
 tests/tests.h                                  |   3 -
 tests/tuktest.h                                |   3 -
 windows/README-Windows.txt                     |  11 +--
 windows/build.bash                             |   3 -
 288 files changed, 100 insertions(+), 911 deletions(-)

commit 76946dc4336c831fe2cc26696a035d807dd3cf13
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-09 17:20:31 +0200

    Fix SHA-256 authors.
    
    The initial commit 5d018dc03549c1ee4958364712fb0c94e1bf2741
    in 2007 had a comment in sha256.c that the code is based on
    Crypto++ Library 5.5.1. In 2009 the Authors list in sha256.c
    and the AUTHORS file was updated with information that the
    code had come from Crypto++ but via 7-Zip. I know I had viewed
    7-Zip's SHA-256 code but back then the C code has been identical
    enough with Crypto++, so I don't why I thought the author info
    would need that extra step via 7-Zip for this single file.
    
    Another error is that I had mixed sha.* and shacal2.* files
    when checking for author info in Crypto++. The shacal2.* files
    aren't related to liblzma's sha256.c and thus Kevin Springle's
    code in Crypto++ isn't either.

 AUTHORS                    |  6 ++----
 src/liblzma/check/sha256.c | 14 ++++----------
 2 files changed, 6 insertions(+), 14 deletions(-)

commit 21d9cbae9eecca28ce373d3d9464defd2cf5d851
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-09 17:20:31 +0200

    Remove macosx/build.sh.
    
    It was last updated in 2013.

 Makefile.am     |   1 -
 macosx/build.sh | 113 --------------------------------------------------------
 2 files changed, 114 deletions(-)

commit eac2c3c67f9113a225fb6667df862edd30366931
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-09 17:20:31 +0200

    Doc: Remove doc/examples_old.
    
    It was good to keep these around in parallel with the newer examples
    but I think it's OK to remove the old ones at this point.

 Makefile.am                       |   5 --
 doc/examples_old/xz_pipe_comp.c   | 127 --------------------------------------
 doc/examples_old/xz_pipe_decomp.c | 123 ------------------------------------
 3 files changed, 255 deletions(-)

commit 89ea1a22f4ed3685b053b7260bc5acf6c75d1664
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-13 22:38:58 +0800

    Tests: Add RISC-V filter support in a few places.

 tests/test_filter_flags.c | 6 ++++++
 tests/test_filter_str.c   | 6 ++++++
 2 files changed, 12 insertions(+)

commit 45663443eb2b377e6171529380fee312f1adcdf4
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-13 22:37:07 +0800

    liblzma: Fix build error if only RISC-V BCJ filter is enabled.
    
    If any other BCJ filter was enabled for encoding or decoding, then this
    was not a problem.

 src/liblzma/common/string_conversion.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

commit 2f15597d677bc35743c777d4cf3bfa698b478681
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-13 22:56:24 +0800

    Translations: Update the Korean translation.

 po/ko.po | 526 ++++++++++++++++++++++++++++++++++-----------------------------
 1 file changed, 284 insertions(+), 242 deletions(-)

commit df873143ad1615c6d6aaa1bf8808b1676091dfe3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-13 01:55:53 +0800

    Translations: Update the Korean man page translations.

 po4a/ko.po | 1375 ++++++++++++++++++++++++++++++++++--------------------------
 1 file changed, 770 insertions(+), 605 deletions(-)

commit b3f415eddb150341865a1af47959c3baba076b33
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-13 01:53:33 +0800

    Translations: Update the Chinese (simplified) translation.

 po/zh_CN.po | 424 ++++++++++++++++++++++++++++++++++++++----------------------
 1 file changed, 268 insertions(+), 156 deletions(-)

commit 9860d418d296eb3c721e5384fb367c0499b579c8
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-09 23:21:01 +0200

    xzless: Use ||- in LESSOPEN with with "less" 451 and newer.

 src/scripts/xzless.in | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

commit fd0692b0525e6c26b496492be9e2c865cab734f8
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-02-09 23:00:05 +0200

    xzless: Use --show-preproc-errors with "less" 632 and newer.
    
    This makes "less" show a warning if a decompression error occurred.

 src/scripts/xzless.in | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

commit adb073da76a920b5a81e6b32254f4ddb054dc57a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-09 23:59:54 +0800

    liblzma: Fix typo discovered by codespell.

 src/liblzma/check/crc32_arm64.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 55d9fc883d221cbace951a370f1fb144698f8c2e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-09 20:01:06 +0800

    Translations: Update the Swedish translation.

 po/sv.po | 420 ++++++++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 254 insertions(+), 166 deletions(-)

commit 55ba4a1ea321499c805eedfa811ffde690bae311
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-08 20:09:04 +0800

    Translations: Update the Spanish translation.

 po/es.po | 22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

commit 7f2293cd804a89d3c3b2d3ed573560ca9e1520ae
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-07 21:34:35 +0800

    Translations: Update the Spanish translation.

 po/es.po | 419 ++++++++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 253 insertions(+), 166 deletions(-)

commit f4af2036bc625739d6d33d9e1fede583a25c3828
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-07 21:28:32 +0800

    Translations: Update the Polish translation.

 po/pl.po | 411 ++++++++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 249 insertions(+), 162 deletions(-)

commit e5e93bb816043c559cddf03a3b7ba13bec353ee4
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-07 19:40:12 +0800

    Translations: Update the German translation.

 po/de.po | 396 ++++++++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 242 insertions(+), 154 deletions(-)

commit 28f18ff8e26902762fb007c13be235b4ac1ac071
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-07 19:27:25 +0800

    Translations: Update the German man page translations.

 po4a/de.po | 1353 +++++++++++++++++++++++++++++++++---------------------------
 1 file changed, 752 insertions(+), 601 deletions(-)

commit cabfbc7947da05aa5dfe39bec9759e076f940e3c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-06 23:44:06 +0800

    Translations: Update the Romanian translation.

 po/ro.po | 416 ++++++++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 252 insertions(+), 164 deletions(-)

commit bf20c94f5d748cea2147779f4fa7e2fd2eb8555e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-06 23:45:02 +0800

    Translations: Update the Romanian man page translations.

 po4a/ro.po | 1759 +++++++++++++++++++++++++++++++++---------------------------
 1 file changed, 966 insertions(+), 793 deletions(-)

commit 7c25ec9feb0241e4affb7432681cc4f5696f3a96
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-07 20:56:57 +0800

    Translations: Update the Ukrainian translation.

 po/uk.po | 397 ++++++++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 242 insertions(+), 155 deletions(-)

commit b3523250e9eef10b017473754c1e1c9e31f10374
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-06 23:30:03 +0800

    Translations: Update the Ukrainian man page translations.

 po4a/uk.po | 1363 ++++++++++++++++++++++++++++++++++--------------------------
 1 file changed, 764 insertions(+), 599 deletions(-)

commit a5c177f514f4c90e0d2f6045636fca6c2e80a20d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-02 01:39:28 +0800

    Update AUTHORS.

 AUTHORS | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit 7f68a68c19d0ae57bd0e802be0ea8f974e41299f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-02 01:38:51 +0800

    liblzma: Update Authors list in crc32_arm64.h.

 src/liblzma/check/crc32_arm64.h | 1 +
 1 file changed, 1 insertion(+)

commit 97f9ba50b84e67b3dcb5b17dd5d3e1d14f9ad1d0
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-01 16:07:03 +0800

    liblzma: Check HAVE_USABLE_CLMUL before omitting CRC32 table.
    
    This was split from the prior commit so it could be easily applied to
    the 5.4 branch.
    
    Closes: https://github.com/tukaani-project/xz/pull/77

 src/liblzma/check/crc32_table.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit ca9015f4dead2c97b48f5a6933631b0a448b65b9
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-02-01 16:06:29 +0800

    liblzma: Check HAVE_USABLE_CLMUL before omitting CRC64 table.
    
    If liblzma is configured with --disable-clmul-crc
    CFLAGS="-msse4.1 -mpclmul", then it will fail to compile because the
    generic version must be used but the CRC tables were not included.

 src/liblzma/check/crc64_table.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 2f1552a91c825e87013925e1a67a0930e7aef592
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-23 18:02:13 +0800

    liblzma: Only use ifunc in crcXX_fast.c if its needed.
    
    The code was using HAVE_FUNC_ATTRIBUTE_IFUNC instead of CRC_USE_IFUNC.
    With ARM64, ifunc is incompatible because it requires non-inline
    function calls for runtime detection.

 src/liblzma/check/crc32_fast.c | 6 +++---
 src/liblzma/check/crc64_fast.c | 6 +++---
 2 files changed, 6 insertions(+), 6 deletions(-)

commit 30a25f3742287697bc57a1bef86c19ecf5129322
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 22:08:45 +0800

    Docs: Add --disable-arm64-crc32 description to INSTALL.

 INSTALL | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

commit 1940f0ec28f08c0ac72c1413d9706fb82eabe6ad
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 21:36:09 +0800

    liblzma: Omit CRC tables when not needed with ARM64 optimizations.
    
    This is similar to the existing x86-64 CLMUL conditions to omit the
    tables. They were slightly refactored to improve readability.

 src/liblzma/check/crc32_table.c | 18 +++++++++++++++---
 src/liblzma/check/crc64_table.c |  7 ++++++-
 src/liblzma/check/crc_common.h  |  5 ++++-
 3 files changed, 25 insertions(+), 5 deletions(-)

commit 761f5b69a4c778c8bcb09279b845b07c28790575
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 20:54:56 +0800

    liblzma: Rename crc32_aarch64.h to crc32_arm64.h.
    
    Even though the proper name for the architecture is aarch64, this
    project uses ARM64 throughout. So the rename is for consistency.
    
    Additionally, crc32_arm64.h was slightly refactored for the following
    changes:
    
       * Added MSVC, FreeBSD, and macOS support in
         is_arch_extension_supported().
    
       * crc32_arch_optimized() now checks the size when aligning the
         buffer.
    
       * crc32_arch_optimized() loop conditions were slightly modified to
         avoid both decrementing the size and incrementing the buffer
         pointer.
    
       * Use the intrinsic wrappers defined in <arm_acle.h> because GCC and
         Clang name them differently.
    
       * Minor spacing and comment changes.

 CMakeLists.txt                    |   2 +-
 src/liblzma/check/Makefile.inc    |   2 +-
 src/liblzma/check/crc32_aarch64.h | 109 ----------------------------------
 src/liblzma/check/crc32_arm64.h   | 119 ++++++++++++++++++++++++++++++++++++++
 src/liblzma/check/crc32_fast.c    |   3 +-
 src/liblzma/check/crc64_fast.c    |   3 -
 6 files changed, 122 insertions(+), 116 deletions(-)

commit 455a08609caa3223066a717fb01bfa42c5dba47d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 20:49:30 +0800

    liblzma: Refactor crc_common.h.
    
    The CRC_GENERIC is now split into CRC32_GENERIC and CRC64_GENERIC, since
    the ARM64 optimizations will be different between CRC32 and CRC64.
    
    For the same reason, CRC_ARCH_OPTIMIZED is split into
    CRC32_ARCH_OPTIMIZED and CRC64_ARCH_OPTIMIZED.
    
    ifunc will only be used with x86-64 CLMUL because the runtime detection
    methods needed with ARM64 are not compatible with ifunc.

 src/liblzma/check/crc32_fast.c |   8 +--
 src/liblzma/check/crc64_fast.c |   8 +--
 src/liblzma/check/crc_common.h | 108 ++++++++++++++++++++++++++++-------------
 3 files changed, 82 insertions(+), 42 deletions(-)

commit 61908e816049af7a9f43ea804a57ee8570e2e644
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 00:42:28 +0800

    CMake: Add support for ARM64 CRC32 instruction detection.

 CMakeLists.txt | 50 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 50 insertions(+)

commit c5f6d79cc9515a7f22d7ea4860c6cc394b295732
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 00:36:47 +0800

    Build: Add support for ARM64 CRC32 instruction detection.
    
    This adds --enable-arm64-crc32/--disable-arm64-crc32 (enabled by
    default) for using the ARM64 CRC32 instruction. This can be disabled if
    one knows the binary will never need to run on an ARM64 machine
    with this instruction extension.

 configure.ac | 52 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 52 insertions(+)

commit 849d0f282a6a890c5cf5a0e0f02980b12d9ebb0f
Author: Chenxi Mao <chenxi.mao2013@gmail.com>
Date:   2024-01-09 17:23:11 +0800

    Speed up CRC32 calculation on ARM64
    
    The CRC32 instructions in ARM64 can calculate the CRC32 result
    for 8 bytes in a single operation, making the use of ARM64
    instructions much faster compared to the general CRC32 algorithm.
    
    Optimized CRC32 will be enabled if ARM64 has CRC extension
    running on Linux.
    
    Signed-off-by: Chenxi Mao <chenxi.mao2013@gmail.com>

 CMakeLists.txt                    |   1 +
 src/liblzma/check/Makefile.inc    |   3 +-
 src/liblzma/check/crc32_aarch64.h | 109 ++++++++++++++++++++++++++++++++++++++
 src/liblzma/check/crc32_fast.c    |   5 +-
 src/liblzma/check/crc64_fast.c    |   5 +-
 src/liblzma/check/crc_common.h    |  16 +++---
 6 files changed, 130 insertions(+), 9 deletions(-)

commit b43c3e48bf6097095eef36d44cdbec811074940a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-26 19:05:51 +0800

    Bump version number for 5.5.1alpha.

 src/liblzma/api/lzma/version.h  | 2 +-
 src/liblzma/liblzma_generic.map | 2 +-
 src/liblzma/liblzma_linux.map   | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

commit c7a7ae1500ea90bd3c2d54533e4f433933eb598f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-26 19:00:52 +0800

    Add NEWS for 5.5.1alpha

 NEWS | 80 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 80 insertions(+)

commit 0ef8192e8d5af4e6200d5d4aee22d1f177f7a2df
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-26 18:54:24 +0800

    Add NEWS for 5.4.6.

 NEWS | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

commit 93de7e751d17731315a899264f2a7239d7d2d316
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-01-24 20:00:57 +0200

    Move doc/logo/xz-logo.png to "doc" and Doxygen footer to "doxygen".
    
    The footer isn't a complete HTML file so having it in the doxygen
    directory is a tiny bit clearer.

 Makefile.am                                    |   2 +-
 doc/{logo => }/xz-logo.png                     | Bin
 doxygen/Doxyfile                               |   4 ++--
 doc/logo/copyright.html => doxygen/footer.html |   0
 4 files changed, 3 insertions(+), 3 deletions(-)

commit 00fa01698df51c58ae2acf8c7fa4e1fb159f75a9
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-09 17:05:01 +0800

    README: Add COPYING.CC-BY-SA-4.0 entry to section 1.1.
    
    The Overall documentation section (1.1) table spacing had to be adjusted
    since the filename was very long.

 README | 38 ++++++++++++++++++++------------------
 1 file changed, 20 insertions(+), 18 deletions(-)

commit e280470040b27c5e58d78b25b9e2bb71fc6c3882
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-09 16:56:16 +0800

    Build: Add the logo and license to the release.

 Makefile.am | 2 ++
 1 file changed, 2 insertions(+)

commit b1ee6cf259bb49ce91abe9f622294524e37edf4c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-09 16:44:42 +0800

    COPYING: Add the license for the XZ logo.

 COPYING              |   5 +
 COPYING.CC-BY-SA-4.0 | 427 +++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 432 insertions(+)

commit 31293ae7074802cc7286089a89c7b552d930c97f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-09 16:40:56 +0800

    Doxygen: Added the XZ logo and copyright information.
    
    The PROJECT_LOGO field is now used to include the XZ logo. The footer
    of each page now lists the copyright information instead of the default
    footer. The license is also copied to statisfy the copyright and so the
    link in the documentation can be local.

 doc/logo/copyright.html |  11 +++++++++++
 doc/logo/xz-logo.png    | Bin 0 -> 6771 bytes
 doxygen/Doxyfile        |   6 +++---
 3 files changed, 14 insertions(+), 3 deletions(-)

commit 6daa4d0ea46a8441f21f609149f3633158bf4704
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-01-23 18:29:28 +0200

    xz: Use threaded mode by defaut (as if --threads=0 was used).
    
    This hopefully does more good than bad:
    
      + It's faster by default.
    
      + Only the threaded compressor creates files that
        can be decompressed in threaded mode.
    
      - Compression ratio is worse, usually not too much though.
        When it matters, -T1 must be used.
    
      - Memory usage increases.
    
      - Scripts that assume single-threaded mode but don't use -T1 will
        possibly use too much resources, for example, if they run
        multiple xz processes in parallel to compress multiple files.
    
      - Output from single-threaded and multi-threaded compressors
        differ but such changes could happen for other reasons too
        (they just haven't happened since 5.0.0).

 src/xz/hardware.c | 6 +++++-
 src/xz/message.c  | 4 ++--
 src/xz/xz.1       | 9 +++++++++
 3 files changed, 16 insertions(+), 3 deletions(-)

commit a2dd2dc8e5307a7280bb99868bc478560facba2c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-23 23:52:49 +0800

    CI: Use RISC-V filter when building with BCJ support.

 build-aux/ci_build.sh | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 3060e1070b2421b26c0e17794c1307ec5622f11d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-23 23:52:14 +0800

    Tests: Use smaller dictionary size in RISC-V test files.

 tests/files/good-1-riscv-lzma2-1.xz | Bin 7512 -> 7512 bytes
 tests/files/good-1-riscv-lzma2-2.xz | Bin 7516 -> 7512 bytes
 2 files changed, 0 insertions(+), 0 deletions(-)

commit 44ff2fa5c94dc345c4dd69195a19fc5238df60b3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-23 23:50:57 +0800

    Tests: Skip RISC-V test files if decoder was not built.

 tests/test_files.sh | 5 +++++
 1 file changed, 5 insertions(+)

commit 6133a3f30049d3beaf7d22535b1e5d38e109be4e
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-01-23 16:11:54 +0200

    xz: Man page: Add more examples of LZMA2 options with BCJ filters.

 src/xz/xz.1 | 38 +++++++++++++++++++++++++++++++-------
 1 file changed, 31 insertions(+), 7 deletions(-)

commit 50255feeaabcc7e7db22b858a6bd64a9b5b4f16d
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-01-23 00:09:48 +0200

    liblzma: RISC-V filter: Use byte-by-byte access.
    
    Not all RISC-V processors support fast unaligned access so
    it's better to read only one byte in the main loop. This can
    be faster even on x86-64 when compared to reading 32 bits at
    a time as half the time the address is only 16-bit aligned.
    
    The downside is larger code size on archs that do support
    fast unaligned access.

 src/liblzma/simple/riscv.c | 114 +++++++++++++++++++++++++++++++++------------
 1 file changed, 84 insertions(+), 30 deletions(-)

commit db5eb5f563e8baa8d912ecf576f53391ff861596
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 23:33:39 +0800

    xz: Update xz -lvv for RISC-V filter.
    
    Version 5.6.0 will be shown, even though upcoming alphas and betas
    will be able to support this filter. 5.6.0 looks nicer in the output and
    people shouldn't be encouraged to use an unstable version in production
    in any way.

 src/xz/list.c | 10 ++++++++++
 1 file changed, 10 insertions(+)

commit e2870db5be1503e6a489fc3d47daf950d6f62723
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 23:33:39 +0800

    Tests: Add two RISC-V Filter test files.
    
    These test files achieve 100% code coverage in
    src/liblzma/simple/riscv.c. They contain all of the instructions that
    should be filtered and a few cases that should not.

 tests/files/README                  |   8 ++++++++
 tests/files/good-1-riscv-lzma2-1.xz | Bin 0 -> 7512 bytes
 tests/files/good-1-riscv-lzma2-2.xz | Bin 0 -> 7516 bytes
 3 files changed, 8 insertions(+)

commit b26a89869315ece2f6d9d10d32d45f672550f245
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 23:33:39 +0800

    xz: Update message in --long-help for RISC-V Filter.

 src/xz/message.c | 1 +
 1 file changed, 1 insertion(+)

commit 283f778908873eca61388029fc418fa800c9d7d7
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 23:33:39 +0800

    xz: Update the man page for the RISC-V Filter.
    
    A special note was added to suggest using four-byte alignment when the
    compressed instruction extension is not present in a RISC-V binary.

 src/xz/xz.1 | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit ac3691ccca051d67f60b4a3b05b88e511d0b1b28
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 23:33:39 +0800

    Tests: Add RISC-V Filter test in test_compress.sh.

 tests/test_compress.sh | 1 +
 1 file changed, 1 insertion(+)

commit 2959dbc7358efcf421ce51bc9cd7eae8fdd8fec4
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 23:33:39 +0800

    liblzma: Update string_conversion.c to support RISC-V Filter.

 src/liblzma/common/string_conversion.c | 5 +++++
 1 file changed, 5 insertions(+)

commit 34372a5adbe5a7f6bf29498410ba3a463a720966
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 23:33:39 +0800

    CMake: Support RISC-V BCJ Filter for encoding and decoding.

 CMakeLists.txt | 1 +
 1 file changed, 1 insertion(+)

commit 440a2eccb082dc13400c09e22308a58fef85146c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-22 23:33:39 +0800

    liblzma: Add RISC-V BCJ filter.
    
    The new Filter ID is 0x0B.
    
    Thanks to Chien Wong <m@xv97.com> for the initial version of the Filter,
    the xz CLI updates, and the Autotools build system modifications.
    
    Thanks to Igor Pavlov for his many contributions to the design of
    the filter.

 configure.ac                        |   4 +-
 src/liblzma/api/lzma/bcj.h          |   5 +
 src/liblzma/common/filter_common.c  |   9 +
 src/liblzma/common/filter_decoder.c |   8 +
 src/liblzma/common/filter_encoder.c |  10 +
 src/liblzma/simple/Makefile.inc     |   4 +
 src/liblzma/simple/riscv.c          | 688 ++++++++++++++++++++++++++++++++++++
 src/liblzma/simple/simple_coder.h   |   9 +
 src/xz/args.c                       |   7 +
 9 files changed, 742 insertions(+), 2 deletions(-)

commit 5540f4329bbdb4deb4850d4af48b18ad074bba19
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-19 23:08:14 +0800

    Docs: Update .xz file format specification to 1.2.0.
    
    The new RISC-V filter was added to the specification, in addition to
    updating the specification URL.

 doc/xz-file-format.txt | 29 +++++++++++++++++------------
 1 file changed, 17 insertions(+), 12 deletions(-)

commit 22d86192f8cf00902a1f90ee2a83ca600794459b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-19 23:08:14 +0800

    xz: Update website URLs in the man pages.

 src/xz/xz.1       | 6 +++---
 src/xzdec/xzdec.1 | 4 ++--
 2 files changed, 5 insertions(+), 5 deletions(-)

commit 6b63c4c6139fa1bb21b570521d3d2b4a608bc34d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-19 23:08:14 +0800

    liblzma: Update website URL.

 dos/config.h           | 2 +-
 src/liblzma/api/lzma.h | 6 +++---
 2 files changed, 4 insertions(+), 4 deletions(-)

commit fce4758018f3a3589236f3fe7999fd9dd08c77e9
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-19 23:08:14 +0800

    Docs: Update website URLs.

 .github/SECURITY.md        |  2 +-
 COPYING                    |  3 ++-
 README                     |  4 ++--
 doc/faq.txt                |  2 +-
 doc/lzma-file-format.txt   | 18 +++++++++---------
 windows/README-Windows.txt |  3 ++-
 6 files changed, 17 insertions(+), 15 deletions(-)

commit c26812c5b2c8a2a47f43214afe6b0b840c73e4f5
Author: Jia Tan <jiat0218@gmail.com>
Date:   2024-01-19 23:08:14 +0800

    Build: Update website URL.

 CMakeLists.txt | 2 +-
 configure.ac   | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

commit fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-01-11 15:01:50 +0200

    liblzma: CRC: Add a comment to crc_x86_clmul.h about BUILDING_ macros.

 src/liblzma/check/crc_x86_clmul.h | 6 ++++++
 1 file changed, 6 insertions(+)

commit 4f518c1b6b7b7ce5dcefea81acd44d7a086a8882
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-01-11 15:22:36 +0200

    liblzma: CRC: Remove crc_always_inline, use lzma_always_inline instead.
    
    Now crc_simd_body() in crc_x86_clmul.h is only called once
    in a translation unit, we no longer need to be so cautious
    about ensuring the always-inline behavior.

 src/liblzma/check/crc_common.h    | 20 --------------------
 src/liblzma/check/crc_x86_clmul.h |  2 +-
 2 files changed, 1 insertion(+), 21 deletions(-)

commit 35c03ec6bf66f1b159964c9721a2dce0e2859b20
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-01-11 14:39:46 +0200

    liblzma: CRC: Update CLMUL comments to more generic wording.

 src/liblzma/check/crc32_fast.c | 16 ++++++++--------
 src/liblzma/check/crc64_fast.c | 10 +++++-----
 2 files changed, 13 insertions(+), 13 deletions(-)

commit 66f080e8016129576536482ac377e2ecac7a2b90
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-01-10 18:23:31 +0200

    liblzma: Rename arch-specific CRC functions and macros.
    
    CRC_CLMUL was split to CRC_ARCH_OPTIMIZED and CRC_X86_CLMUL.
    CRC_ARCH_OPTIMIZED is defined when an arch-optimized version is used.
    Currently the x86 CLMUL implementations are the only arch-optimized
    versions, and these also use the CRC_x86_CLMUL macro to tell when
    crc_x86_clmul.h needs to be included.
    
    is_clmul_supported() was renamed to is_arch_extension_supported().
    crc32_clmul() and crc64_clmul() were renamed to
    crc32_arch_optimized() and crc64_arch_optimized().
    This way the names make sense with arch-specific non-CLMUL
    implementations as well.

 src/liblzma/check/crc32_fast.c    | 13 +++++++------
 src/liblzma/check/crc64_fast.c    | 13 +++++++------
 src/liblzma/check/crc_common.h    |  9 ++++++---
 src/liblzma/check/crc_x86_clmul.h | 21 +++++++++++----------
 4 files changed, 31 insertions(+), 25 deletions(-)

commit 3dbed75b0b9c7087c76fe687acb5cf582cd57b99
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2024-01-10 18:19:21 +0200

    liblzma: Fix a comment in crc_common.h.

 src/liblzma/check/crc_common.h | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit 419f55f9dfc2df8792902b8953d50690121afeea
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-20 23:35:10 +0300

    liblzma: Avoid extern lzma_crc32_clmul() and lzma_crc64_clmul().
    
    A CLMUL-only build will have the crcxx_clmul() inlined into
    lzma_crcxx(). Previously a jump to the extern lzma_crcxx_clmul()
    was needed. Notes about shared liblzma on ELF platforms:
    
      - On platforms that support ifunc and -fvisibility=hidden, this
        was silly because CLMUL-only build would have that single extra
        jump instruction of extra overhead.
    
      - On platforms that support neither -fvisibility=hidden nor linker
        version script (liblzma*.map), jumping to lzma_crcxx_clmul()
        would go via PLT so a few more instructions of overhead (still
        not a big issue but silly nevertheless).
    
    There was a downside with static liblzma too: if an application only
    needs lzma_crc64(), static linking would make the linker include the
    CLMUL code for both CRC32 and CRC64 from crc_x86_clmul.o even though
    the CRC32 code wouldn't be needed, thus increasing code size of the
    executable (assuming that -ffunction-sections isn't used).
    
    Also, now compilers are likely to inline crc_simd_body()
    even if they don't support the always_inline attribute
    (or MSVC's __forceinline). Quite possibly all compilers
    that build the code do support such an attribute. But now
    it likely isn't a problem even if the attribute wasn't supported.
    
    Now all x86-specific stuff is in crc_x86_clmul.h. If other archs
    The other archs can then have their own headers with their own
    is_clmul_supported() and crcxx_clmul().
    
    Another bonus is that the build system doesn't need to care if
    crc_clmul.c is needed.
    
    is_clmul_supported() stays as inline function as it's not needed
    when doing a CLMUL-only build (avoids a warning about unused function).

 CMakeLists.txt                                     |  7 +-
 configure.ac                                       |  1 -
 src/liblzma/check/Makefile.inc                     |  6 +-
 src/liblzma/check/crc32_fast.c                     |  9 ++-
 src/liblzma/check/crc64_fast.c                     |  9 ++-
 src/liblzma/check/crc_common.h                     | 64 ----------------
 src/liblzma/check/{crc_clmul.c => crc_x86_clmul.h} | 86 ++++++++++++++++++----
 7 files changed, 91 insertions(+), 91 deletions(-)

commit e3833e297dfb5021a197bda34ba2a795e30aaf8a
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-21 00:06:52 +0300

    liblzma: crc_clmul.c: Add crc_attr_target macro.
    
    This reduces the number of the complex #if directives.

 src/liblzma/check/crc_clmul.c | 30 ++++++++++++++++--------------
 1 file changed, 16 insertions(+), 14 deletions(-)

commit d164ac0e62904126f7920c25f9a2875c8cd28b97
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-20 22:49:48 +0300

    liblzma: Simplify existing cases with lzma_attr_no_sanitize_address.

 src/liblzma/check/crc_clmul.c | 12 +++---------
 1 file changed, 3 insertions(+), 9 deletions(-)

commit 9523c1300d22fa715765c181cf991d14d6112fb1
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-20 21:53:35 +0300

    liblzma: #define crc_attr_no_sanitize_address in crc_common.h.

 src/liblzma/check/crc_common.h | 10 ++++++++++
 1 file changed, 10 insertions(+)

commit 93d144f0930821590524247bd174afd38003d7f0
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-20 23:25:14 +0300

    liblzma: CRC: Add empty lines.
    
    And remove one too.

 src/liblzma/check/crc32_fast.c | 2 ++
 src/liblzma/check/crc64_fast.c | 3 +++
 src/liblzma/check/crc_clmul.c  | 1 -
 3 files changed, 5 insertions(+), 1 deletion(-)

commit 0c7e854ffd27f1cec2e9b0e61601d6f90bfa10ae
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-20 23:19:33 +0300

    liblzma: crc_clmul.c: Tidy up the location of MSVC pragma.
    
    It makes no difference in practice.

 src/liblzma/check/crc_clmul.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 15cf3f04f270d707a5c91cc0208b23b6db42b774
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-12-20 21:16:24 +0200

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit cd64dd70d5665b6048829c45772d08606f44672e
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-12-20 21:15:16 +0200

    liblzma: Use 8-byte method in memcmplen.h on ARM64.
    
    It requires fast unaligned access to 64-bit integers
    and a fast instruction to count leading zeros in
    a 64-bit integer (__builtin_ctzll()). This perhaps
    should be enabled on some other archs too.
    
    Thanks to Chenxi Mao for the original patch:
    https://github.com/tukaani-project/xz/pull/75 (the first commit)
    According to the numbers there, this may improve encoding
    speed by about 3-5 %.
    
    This enables the 8-byte method on MSVC ARM64 too which
    should work but wasn't tested.

 src/liblzma/common/memcmplen.h | 18 ++++++++++--------
 1 file changed, 10 insertions(+), 8 deletions(-)

commit 12c90c00f05e19da3c0c91d8cd8e0d0d45965606
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-12-20 21:01:06 +0200

    liblzma: Check also for __clang__ in memcmplen.h.
    
    This change hopefully makes no practical difference as Clang
    likely was detected via __GNUC__ or _MSC_VER already.

 src/liblzma/common/memcmplen.h | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit 133c5851eb917c6d99d0b623c1689c8518e65f38
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-21 21:39:08 +0800

    Translations: Update the French translation.

 po/fr.po | 632 +++++++++++++++++++++++++++++++++++++--------------------------
 1 file changed, 370 insertions(+), 262 deletions(-)

commit 710cbc186cad0ac601c38bd6bf31167648a5581e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-21 16:39:53 +0800

    xz: Add a comment to Capsicum sandbox setup.
    
    This comment is repeated in xzdec.c to help remind us why all the
    capabilities are removed from stdin in certain situations.

 src/xz/file_io.c | 1 +
 1 file changed, 1 insertion(+)

commit 4e1c695676bafbaecc9fb307f6ee94138ae72c12
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-20 22:19:19 +0800

    Docs: Update --enable-sandbox option in INSTALL.
    
    xzdec now also uses the sandbox when its configured.

 INSTALL | 17 ++++++++++-------
 1 file changed, 10 insertions(+), 7 deletions(-)

commit ebddf20214143a8e002ab897e95e880bb4c5ac44
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-20 22:39:13 +0800

    CMake: Move sandbox detection outside of xz section.
    
    The sandbox is now enabled for xzdec as well, so it no longer belongs
    in just the xz section. xz and xzdec are always built, except for older
    MSVC versions, so there isn't a need to conditionally show the sandbox
    configuration. CMake will do a little unecessary work on older MSVC
    versions that can't build xz or xzdec, but this is a very small
    downside.

 CMakeLists.txt | 178 +++++++++++++++++++++++++++++++--------------------------
 1 file changed, 98 insertions(+), 80 deletions(-)

commit 5feb09266fd2928ec0a4dcb98c1dc7f053111316
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-20 22:43:44 +0800

    Build: Allow sandbox to be configured for just xzdec.
    
    If xz is disabled, then xzdec can still use the sandbox.

 configure.ac | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

commit d74fb5f060b76db709b50f5fd37490394e52f975
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-19 21:18:28 +0800

    xzdec: Add sandbox support for Pledge, Capsicum, and Landlock.
    
    A very strict sandbox is used when the last file is decompressed. The
    likely most common use case of xzdec is to decompress a single file.
    The Pledge sandbox is applied to the entire process with slightly more
    relaxed promises, until the last file is processed.
    
    Thanks to Christian Weisgerber for the initial patch adding Pledge
    sandboxing.

 src/xzdec/xzdec.c | 146 +++++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 139 insertions(+), 7 deletions(-)

commit b34b6a9912d6165e34ba0db151b7f9941d2e06d5
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-20 21:31:34 +0800

    liblzma: Initialize lzma_lz_encoder pointers with NULL.
    
    This fixes the recent change to lzma_lz_encoder that used memzero
    instead of the NULL constant. On some compilers the NULL constant
    (always 0) may not equal the NULL pointer (this only needs to guarentee
    to not point to valid memory address).
    
    Later code compares the pointers to the NULL pointer so we must
    initialize them with the NULL pointer instead of 0 to guarentee
    code correctness.

 src/liblzma/lz/lz_encoder.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

commit 183a62f0b540ff4d23cc19b2b6bc2525f0bd64df
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-16 20:51:38 +0800

    liblzma: Set all values in lzma_lz_encoder to NULL after allocation.
    
    The first member of lzma_lz_encoder doesn't necessarily need to be set
    to NULL since it will always be set before anything tries to use it.
    However the function pointer members must be set to NULL since other
    functions rely on this NULL value to determine if this behavior is
    supported or not.
    
    This fixes a somewhat serious bug, where the options_update() and
    set_out_limit() function pointers are not set to NULL. This seems to
    have been forgotten since these function pointers were added many years
    after the original two (code() and end()).
    
    The problem is that by not setting this to NULL we are relying on the
    memory allocation to zero things out if lzma_filters_update() is called
    on a LZMA1 encoder. The function pointer for set_out_limit() is less
    serious because there is not an API function that could call this in an
    incorrect way. set_out_limit() is only called by the MicroLZMA encoder,
    which must use LZMA1 where set_out_limit() is always set. Its currently
    not possible to call set_out_limit() on an LZMA2 encoder at this time.
    
    So calling lzma_filters_update() on an LZMA1 encoder had undefined
    behavior since its possible that memory could be manipulated so the
    options_update member pointed to a different instruction sequence.
    
    This is unlikely to be a bug in an existing application since it relies
    on calling lzma_filters_update() on an LZMA1 encoder in the first place.
    For instance, it does not affect xz because lzma_filters_update() can
    only be used when encoding to the .xz format.
    
    This is fixed by using memzero() to set all members of lzma_lz_encoder
    to NULL after it is allocated. This ensures this mistake will not occur
    here in the future if any additional function pointers are added.

 src/liblzma/lz/lz_encoder.c | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

commit 1a1bb381db7a20cf86cb45a350e5cca35224d017
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-16 20:30:55 +0800

    liblzma: Tweak a comment.

 src/liblzma/lz/lz_encoder.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 55810780e04f759747b02683fb8020b8cd022a85
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-16 20:28:21 +0800

    liblzma: Make parameter names in function definition match declaration.
    
    lzma_raw_encoder() and lzma_raw_encoder_init() used "options" as the
    parameter name instead of "filters" (used by the declaration). "filters"
    is more clear since the parameter represents the list of filters passed
    to the raw encoder, each of which contains filter options.

 src/liblzma/common/filter_encoder.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

commit 5dad6f628af742bab826819760deb677597445f7
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-16 20:18:47 +0800

    liblzma: Improve lzma encoder init function consistency.
    
    lzma_encoder_init() did not check for NULL options, but
    lzma2_encoder_init() did. This is more of a code style improvement than
    anything else to help make lzma_encoder_init() and lzma2_encoder_init()
    more similar.

 src/liblzma/lzma/lzma_encoder.c | 3 +++
 1 file changed, 3 insertions(+)

commit e1b1a9d6370b788bd6078952c6c201e12bc27cbf
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-16 11:20:20 +0800

    Docs: Update repository URL in Changelog.

 ChangeLog | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit f9b82bc64a9405e486575c65c1729229eb0a8198
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-15 16:56:31 +0800

    CI: Update Upload Artifact Action.

 .github/workflows/ci.yml         | 2 +-
 .github/workflows/windows-ci.yml | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

commit d0b24efe6cdc47db5b0fdf6306f70a2e0e63e49e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-07 21:48:07 +0800

    Tests: Silence -Wsign-conversion warning on GCC version < 10.
    
    Since GCC version 10, GCC no longer complains about simple implicit
    integer conversions with Arithmetic operators.
    
    For instance:
    
        uint8_t a = 5;
        uint32_t b = a + 5;
    
    Give a warning on GCC 9 and earlier but this:
    
        uint8_t a = 5;
        uint32_t b = (a + 5) * 2;
    
    Gives a warning with GCC 10+.

 tests/test_block_header.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 4a972a8ee3ed88ac14067c1d2f15b78988e5dae8
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-06 18:39:03 +0800

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit ee2f48350099201694a7586e41d7aa2f09fc74da
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-12-06 18:30:25 +0800

    Tests: Minor cleanups to OSS-Fuzz files.
    
    Most of these fixes are small typos and tweaks. A few were caused by bad
    advice from me. Here is the summary of what is changed:
    
    - Author line edits
    
    - Small comment changes/additions
    
    - Using the return value in the error messages in the fuzz targets'
      coder initialization code
    
    - Removed fuzz_encode_stream.options. This set a max length, which may
      prevent some worthwhile code paths from being properly exercised.
    
    - Removed the max_len option from fuzz_decode_stream.options for the
      same reason as fuzz_encode_stream. The alone decoder fuzz target still
      has this restriction.
    
    - Altered the dictionary contents for fuzz_lzma.dict. Instead of keeping
      the properties static and varying the dictionary size, the properties
      are varied and the dictionary size is kept small. The dictionary size
      doesn't have much impact on the code paths but the properties do.
    
    Closes: https://github.com/tukaani-project/xz/pull/73

 tests/ossfuzz/Makefile                          |  3 ++
 tests/ossfuzz/config/fuzz_decode_stream.options |  1 -
 tests/ossfuzz/config/fuzz_lzma.dict             | 34 +++++++++++-----------
 tests/ossfuzz/fuzz_common.h                     | 16 +++++------
 tests/ossfuzz/fuzz_decode_alone.c               | 15 +++++-----
 tests/ossfuzz/fuzz_decode_stream.c              | 15 +++++-----
 tests/ossfuzz/fuzz_encode_stream.c              | 38 +++++++++++++++----------
 7 files changed, 66 insertions(+), 56 deletions(-)

commit 483bb90eec7c83e1c2bcd06287714afd62d8c17d
Author: Maksym Vatsyk <maksym.vatsyk@leviathansecurity.com>
Date:   2023-12-05 16:31:09 +0100

    Tests: Add fuzz_encode_stream ossfuzz target.
    
    This fuzz target handles .xz stream encoding. The first byte of input
    is used to dynamically set the preset level in order to increase the
    fuzz coverage of complex critical code paths.

 tests/ossfuzz/config/fuzz_encode_stream.options |  2 +
 tests/ossfuzz/fuzz_encode_stream.c              | 79 +++++++++++++++++++++++++
 2 files changed, 81 insertions(+)

commit 7ca8c9869df82756c3128c4fcf1058da4d18aa48
Author: Maksym Vatsyk <maksym.vatsyk@leviathansecurity.com>
Date:   2023-12-04 17:23:24 +0100

    Tests: Add fuzz_decode_alone OSS-Fuzz target
    
    This fuzz target that handles LZMA alone decoding. A new fuzz
    dictionary .dict was also created with common LZMA header values to
    help speed up the discovery of valid headers.

 tests/ossfuzz/config/fuzz_decode_alone.options |  3 ++
 tests/ossfuzz/config/fuzz_lzma.dict            | 22 ++++++++++++++
 tests/ossfuzz/fuzz_decode_alone.c              | 41 ++++++++++++++++++++++++++
 3 files changed, 66 insertions(+)

commit 37581a77ad5a49615325b1d1925fdc402b1e1d5a
Author: Maksym Vatsyk <maksym.vatsyk@leviathansecurity.com>
Date:   2023-12-04 17:21:29 +0100

    Tests: Update OSS-Fuzz Makefile.
    
    All .c files can be built as separate fuzz targets. This simplifies
    the Makefile by allowing us to use wildcards instead of having a
    Makefile target for each fuzz target.

 tests/ossfuzz/Makefile | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

commit 28ce6a1c2a74866c51f7996a6869679c236d3c94
Author: Maksym Vatsyk <maksym.vatsyk@leviathansecurity.com>
Date:   2023-12-04 17:20:08 +0100

    Tests: Move common OSS-Fuzz target code to .h file.

 tests/ossfuzz/fuzz_common.h        | 56 ++++++++++++++++++++++++++++++++++++
 tests/ossfuzz/fuzz_decode_stream.c | 59 ++++++++++----------------------------
 2 files changed, 71 insertions(+), 44 deletions(-)

commit bf0521ea1591c25b9d510c1b8be86073e9d847c6
Author: Maksym Vatsyk <maksym.vatsyk@leviathansecurity.com>
Date:   2023-12-04 17:18:20 +0100

    Tests: Rename OSS-Fuzz files.

 tests/ossfuzz/config/fuzz.options                | 2 --
 tests/ossfuzz/config/fuzz_decode_stream.options  | 3 +++
 tests/ossfuzz/config/{fuzz.dict => fuzz_xz.dict} | 0
 tests/ossfuzz/{fuzz.c => fuzz_decode_stream.c}   | 0
 4 files changed, 3 insertions(+), 2 deletions(-)

commit 685094b8e1c1aa1bf934de0366ca42ef599d25f7
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-30 23:10:43 +0800

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 3b3023e00b0071e10f589bbc3674e0ec432b8add
Author: Kian-Meng Ang <kianmeng@cpan.org>
Date:   2023-11-30 23:01:19 +0800

    Tests: Fix typos

 tests/test_index.c        | 2 +-
 tests/test_lzip_decoder.c | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

commit 424d46ead8cbc0da57f406b76926ec4ed47437f5
Author: Kian-Meng Ang <kianmeng@cpan.org>
Date:   2023-11-30 22:59:47 +0800

    xz: Fix typo

 src/xz/file_io.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 35558adf9c45e5597f2c8dbd969885dd484038d2
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-30 20:41:00 +0800

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit fd170e8557727bed6bec0518c16415064d972e4e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-22 21:20:12 +0800

    CI: Test musl libc builds on Ubuntu runner.

 .github/workflows/ci.yml | 19 +++++++++++++++++--
 1 file changed, 17 insertions(+), 2 deletions(-)

commit db2b4aa068a492c0013279a4ed43803e8ff9bb3e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-22 21:12:15 +0800

    CI: Allow ci_build.sh to set a different C compiler.

 build-aux/ci_build.sh | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

commit ff7badef53c2cd698d4b72b945f34dfd0835e13c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-24 21:19:12 +0800

    CMake: Use consistent indentation with check_c_source_compiles().

 CMakeLists.txt | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit d4af167570f2c14b002ee18a39d5b1e7e5a892b1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-22 20:33:36 +0800

    CMake: Change __attribute__((__ifunc__())) detection.
    
    This renames ALLOW_ATTR_IFUNC to USE_ATTR_IFUNC and applies the ifunc
    detection changes that were made to the Autotools build.
    
    Fixes: https://github.com/tukaani-project/xz/issues/70

 CMakeLists.txt | 53 +++++++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 45 insertions(+), 8 deletions(-)

commit 20ecee40a0053fd16371ef0628046bf45e548d72
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-24 20:19:11 +0800

    Docs: Update INSTALL for --enable_ifunc change.

 INSTALL | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

commit ffb456593d695d70052a2f71c7a2e6269217d194
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-21 20:56:55 +0800

    Build: Change --enable-ifunc handling.
    
    Some compilers support __attribute__((__ifunc__())) even though the
    dynamic linker does not. The compiler is able to create the binary
    but it will fail on startup. So it is not enough to just test if
    the attribute is supported.
    
    The default value for enable_ifunc is now auto, which will attempt
    to compile a program using __attribute__((__ifunc__())). There are
    additional checks in this program if glibc is being used or if it
    is running on FreeBSD.
    
    Setting --enable-ifunc will skip this test and always enable
    __attribute__((__ifunc__())), even if is not supported.

 configure.ac | 61 +++++++++++++++++++++++++++++++++++++++++++-----------------
 1 file changed, 44 insertions(+), 17 deletions(-)

commit 12b89bcc9915090eb42ae638e565af44b6832a23
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-11-23 17:39:10 +0200

    xz: Tweak a comment.

 src/xz/util.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 2ab2e4b5a542eab93902985ce4e642719a8b7a4e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-23 22:13:39 +0800

    xz: Use is_tty() in message.c.

 src/xz/message.c | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

commit 584e3a258f32d579b1d07f99b4dc6e856c10ac7e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-23 22:04:35 +0800

    xz: Create separate is_tty() function.
    
    The new is_tty() will report if a file descriptor is a terminal or not.
    On POSIX systems, it is a wrapper around isatty(). However, the native
    Windows implementation of isatty() will return true for all character
    devices, not just terminals. So is_tty() has a special case for Windows
    so it can use alternative Windows API functions to determine if a file
    descriptor is a terminal.
    
    This fixes a bug with MSVC and MinGW-w64 builds that refused to read from
    or write to non-terminal character devices because xz thought it was a
    terminal. For instance:
    
        xz foo -c > /dev/null
    
    would fail because /dev/null was assumed to be a terminal.

 src/xz/util.c | 30 +++++++++++++++++++++++-------
 src/xz/util.h | 14 ++++++++++++++
 2 files changed, 37 insertions(+), 7 deletions(-)

commit 6b05f827f50e686537e9a23c49c5aa4c0aa6b23d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-22 20:39:41 +0800

    tuklib_integer: Fix typo discovered by codespell.
    
    Based on internet dictionary searches, 'choise' is an outdated spelling
    of 'choice'.

 src/common/tuklib_integer.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 659aca0d695807c0762d4101765189e4e33d1e2c
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-11-17 19:35:19 +0200

    xz: Move the check for --suffix with --format=raw a few lines earlier.
    
    Now it reads from argv[] instead of args->arg_names.

 src/xz/args.c | 44 ++++++++++++++++++++++----------------------
 1 file changed, 22 insertions(+), 22 deletions(-)

commit ca278eb2b7f5a4940f5ab18955297b398d423824
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-17 20:35:11 +0800

    Tests: Create test_suffix.sh.
    
    This tests some complicated interactions with the --suffix= option.
    The suffix option must be used with --format=raw, but can optionally
    be used to override the default .xz suffix.
    
    This test also verifies some recent bugs have been correctly solved
    and to hopefully avoid further regressions in the future.

 tests/Makefile.am    |   2 +
 tests/test_suffix.sh | 189 +++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 191 insertions(+)

commit 2a732aba22da1b0d4a1241cb32280ed010ba03ce
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-17 20:19:26 +0800

    xz: Fix a bug with --files and --files0 in raw mode without a suffix.
    
    The following command caused a segmentation fault:
    
        xz -Fraw --lzma1 --files=foo
    
    when foo was a valid file. The usage of --files or --files0 was not
    being checked when compressing or decompressing in raw mode without a
    suffix. The suffix checking code was meant to validate that all files
    to be processed are "-" (if not writing to standard out), meaning the
    data is only coming from standard in. In this case, there were no file
    names to check since --files and --files0 store their file name in a
    different place.
    
    Later code assumed the suffix was set and caused a segmentation fault.
    Now, the above command results in an error.

 src/xz/args.c | 5 +++++
 1 file changed, 5 insertions(+)

commit 299920bab9ae258a247366339264e8aefca9e3ce
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-17 20:04:58 +0800

    Tests: Fix typo in a comment.

 tests/test_files.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit f481523baac946fa3bc13d79186ffaf0c0b818a7
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-15 23:40:13 +0800

    xz: Refactor suffix test with raw format.
    
    The previous version set opt_stdout, but this caused an issue with
    copying an input file to standard out when decompressing an unknown file
    type. The following needs to result in an error:
    
        echo foo | xz -df
    
    since -c, --stdout is not used. This fixes the previous error by not
    setting opt_stdout.

 src/xz/args.c | 38 +++++++++++++-------------------------
 1 file changed, 13 insertions(+), 25 deletions(-)

commit 837ea40b1c9d4998cac4500b55171bf33e0c31a6
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-14 20:27:46 +0800

    xz: Move suffix check after stdout mode is detected.
    
    This fixes a bug introduced in cc5aa9ab138beeecaee5a1e81197591893ee9ca0
    when the suffix check was initially moved. This caused a situation that
    previously worked:
    
        echo foo | xz -Fraw --lzma1 | wc -c
    
    to fail because the old code knew that this would write to standard out
    so a suffix was not needed.

 src/xz/args.c | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

commit d4f4a4d040ef47a5e82dffd0f067e92716606ddf
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-14 20:27:04 +0800

    xz: Detect when all data will be written to standard out earlier.
    
    If the -c, --stdout argument is not used, then we can still detect when
    the data will be written to standard out if all of the provided
    filenames are "-" (denoting standard in) or if no filenames are
    provided.

 src/xz/args.c | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

commit 2ade7246e7ba729a91460d2fab0f4c7b89d3998b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-09 01:21:53 +0800

    liblzma: Add missing comments to lz_encoder.h.

 src/liblzma/lz/lz_encoder.h | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

commit 5fe1450603dc625340b8b7866fb4a83ff748ad06
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-11-01 20:18:30 +0800

    Add NEWS for 5.4.5.

 NEWS | 74 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 74 insertions(+)

commit 46007049cd42e606543dbe650feb17bdf4469c29
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-31 21:41:09 +0200

    liblzma: Fix compilation of fastpos_tablegen.c.
    
    The macro lzma_attr_visibility_hidden has to be defined to make
    fastpos.h usable. The visibility attribute is irrelevant to
    fastpos_tablegen.c so simply #define the macro to an empty value.
    
    fastpos_tablegen.c is never built by the included build systems
    and so the problem wasn't noticed earlier. It's just a standalone
    program for generating fastpos_table.c.
    
    Fixes: https://github.com/tukaani-project/xz/pull/69
    Thanks to GitHub user Jamaika1.

 src/liblzma/lzma/fastpos_tablegen.c | 2 ++
 1 file changed, 2 insertions(+)

commit 148e20607e95781558bdfc823ecba07b7af4b590
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-31 21:51:40 +0800

    Build: Fix text wrapping in an output message.

 configure.ac | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

commit 8c36ab79cbf23104ce7a3d533d5ac98cd492e57c
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-30 18:09:53 +0200

    liblzma: Add a note why crc_always_inline exists for now.
    
    Solaris Studio is a possible example (not tested) which
    supports the always_inline attribute but might not get
    detected by the common.h #ifdefs.

 src/liblzma/check/crc_common.h | 5 +++++
 1 file changed, 5 insertions(+)

commit e7a86b94cd247435ac96bc79ba528b690b9ca388
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-22 17:59:11 +0300

    liblzma: Use lzma_always_inline in memcmplen.h.

 src/liblzma/common/memcmplen.h | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

commit dcfe5632992fb7f06f921da13fcdd84f83d0d285
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-30 17:43:03 +0200

    liblzma: #define lzma_always_inline in common.h.

 src/liblzma/common/common.h | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

commit 41113fe30a47f6fd3e30cb4494dd538e86212edf
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-22 17:15:32 +0300

    liblzma: Use lzma_attr_visibility_hidden on private extern declarations.
    
    These variables are internal to liblzma and not exposed in the API.

 src/liblzma/check/check.h                | 7 +++++++
 src/liblzma/common/stream_flags_common.h | 3 +++
 src/liblzma/lz/lz_encoder_hash.h         | 1 +
 src/liblzma/lzma/fastpos.h               | 1 +
 src/liblzma/rangecoder/price.h           | 1 +
 5 files changed, 13 insertions(+)

commit a2f5ca706acc6f7715b8d260a8c6ed50d7717478
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-22 17:08:39 +0300

    liblzma: #define lzma_attr_visibility_hidden in common.h.
    
    In ELF shared libs:
    
    -fvisibility=hidden affects definitions of symbols but not
    declarations.[*] This doesn't affect direct calls to functions
    inside liblzma as a linker can replace a call to lzma_foo@plt
    with a call directly to lzma_foo when -fvisibility=hidden is used.
    
    [*] It has to be like this because otherwise every installed
        header file would need to explictly set the symbol visibility
        to default.
    
    When accessing extern variables that aren't defined in the
    same translation unit, compiler assumes that the variable has
    the default visibility and thus indirection is needed. Unlike
    function calls, linker cannot optimize this.
    
    Using __attribute__((__visibility__("hidden"))) with the extern
    variable declarations tells the compiler that indirection isn't
    needed because the definition is in the same shared library.
    
    About 15+ years ago, someone told me that it would be good if
    the CRC tables would be defined in the same translation unit
    as the C code of the CRC functions. While I understood that it
    could help a tiny amount, I didn't want to change the code because
    a separate translation unit for the CRC tables was needed for the
    x86 assembly code anyway. But when visibility attributes are
    supported, simply marking the extern declaration with the
    hidden attribute will get identical result. When there are only
    a few affected variables, this is trivial to do. I wish I had
    understood this back then already.

 src/liblzma/common/common.h | 11 +++++++++++
 1 file changed, 11 insertions(+)

commit 2c7ee92e44e1e66f0a427555233eb22c78f6c4f8
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-30 22:54:28 +0300

    liblzma: Refer to MinGW-w64 instead of MinGW in the API headers.
    
    MinGW (formely a MinGW.org Project, later the MinGW.OSDN Project
    at <https://osdn.net/projects/mingw/>) has GCC 9.2.0 as the
    most recent GCC package (released 2021-02-02). The project might
    still be alive but majority of people have switched to MinGW-w64.
    Thus it seems clearer to refer to MinGW-w64 in our API headers too.
    Building with MinGW is likely to still work but I haven't tested it
    in the recent years.

 src/liblzma/api/lzma.h         | 4 ++--
 src/liblzma/api/lzma/version.h | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

commit 597f49b61475438a43a417236989b2acc968a686
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-27 00:58:17 +0300

    CMake: Use -D_FILE_OFFSET_BITS=64 if (and only if) needed.
    
    A CMake option LARGE_FILE_SUPPORT is created if and only if
    -D_FILE_OFFSET_BITS=64 affects sizeof(off_t).
    
    This is needed on many 32-bit platforms and even with 64-bit builds
    with MinGW-w64 to get support for files larger than 2 GiB.

 CMakeLists.txt                        |  7 ++++-
 cmake/tuklib_large_file_support.cmake | 52 +++++++++++++++++++++++++++++++++++
 2 files changed, 58 insertions(+), 1 deletion(-)

commit 1bc548b8210366e44ba35b0b11577a8e328c1228
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-30 02:14:25 +0300

    CMake: Generate and install liblzma.pc if not using MSVC.
    
    Autotools based build uses -pthread and thus adds it to Libs.private
    in liblzma.pc. CMake doesn't use -pthread at all if pthread functions
    are available in libc so Libs.private doesn't get -pthread either.

 CMakeLists.txt | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

commit 2add71966f891d315105d6245f724ed4f43a4eff
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-30 01:13:13 +0300

    CMake: Rearrange the PACKAGE_ variables.
    
    The windres workaround now replaces spaces with \x20 so
    the package name isn't repeated.
    
    These changes will help with creation of liblzma.pc.

 CMakeLists.txt | 26 +++++++++++++++-----------
 1 file changed, 15 insertions(+), 11 deletions(-)

commit a7d1b2825c49dc83f1910eeb8ba0f1dfbd886d91
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-29 20:46:11 +0300

    liblzma: Add Cflags.private to liblzma.pc.in for MSYS2.
    
    It properly adds -DLZMA_API_STATIC when compiling code that
    will be linked against static liblzma. Having it there on
    systems other than Windows does no harm.
    
    See: https://www.msys2.org/docs/pkgconfig/

 src/liblzma/liblzma.pc.in | 1 +
 1 file changed, 1 insertion(+)

commit 80e0750e3996c1c659e972ce9cf789ca2e99f702
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-27 22:46:20 +0300

    CMake: Create liblzma.def when building liblzma.dll with MinGW-w64.

 CMakeLists.txt              | 20 ++++++++++++++++++++
 cmake/remove-ordinals.cmake | 26 ++++++++++++++++++++++++++
 2 files changed, 46 insertions(+)

commit 08d12595f486890cf601b87f36ee0ddbce57728e
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-26 21:44:42 +0300

    CMake: Change one CMAKE_CURRENT_SOURCE_DIR to CMAKE_CURRENT_LIST_DIR.
    
    In this case they have identical values.

 CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit e67aaf698de75c73443a5ec786781cbf2034461d
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-01 19:10:57 +0300

    CMake/Windows: Fix the import library filename.
    
    Both PREFIX and IMPORT_PERFIX have to be set to "" to get
    liblzma.dll and liblzma.dll.a.

 CMakeLists.txt | 1 +
 1 file changed, 1 insertion(+)

commit 88588b1246d8c26ffbc138b3e5c413c5f14c3179
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-25 19:13:25 +0300

    Build: Detect -fsanitize= in CFLAGS and incompatible build options.
    
    Now configure will fail if -fsanitize= is found in CFLAGS
    and sanitizer-incompatible ifunc or Landlock sandboxing
    would be used. These are incompatible with one or more sanitizers.
    It's simpler to reject all -fsanitize= uses instead of trying to
    pass those that might not cause problems.
    
    CMake-based build was updated similarly. It lets the configuration
    finish (SEND_ERROR instead of FATAL_ERROR) so that both error
    messages can be seen at once.

 CMakeLists.txt | 29 +++++++++++++++++++++++++++++
 configure.ac   | 37 +++++++++++++++++++++++++++++++++----
 2 files changed, 62 insertions(+), 4 deletions(-)

commit 5e3d890f8862a7d4fbef5e38e11b6c9fbd98f468
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-24 00:50:08 +0800

    CI: Disable sandboxing in fsanitize=address,undefined job.
    
    The sandboxing on Linux now supports Landlock, which restricts all
    supported filesystem actions after xz opens the files it needs. The
    sandbox is only enabled when one file is input and we are writing to
    standard out. With fsanitize=address,undefined, the instrumentation
    needs to read additional files after the sandbox is in place. This
    forces all xz based test to fail, so the sandbox must instead be
    disabled.

 .github/workflows/ci.yml | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

commit b1408987ea832e2760e478ae960a636df17a1363
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-24 00:15:39 +0800

    CI: Allow disabling the sandbox in ci_build.sh.

 build-aux/ci_build.sh | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

commit 91c435cf1c7a1e893706d4d716dfd361621ed824
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-11 19:47:44 +0300

    CMake: Don't shadow the cache entry ENABLE_THREADS with a normal variable.
    
    Using set(ENABLE_THREADS "posix") is confusing because it sets
    a new normal variable and leaves the cache entry with the same
    name unchanged. The intent wasn't to change the cache entry so
    this switches to a different variable name.

 CMakeLists.txt | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

commit fa1609eb9393ecd30decfed4891c907829f06710
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-09 22:28:49 +0300

    Docs: Update INSTALL about sandboxing support.

 INSTALL | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

commit 8276c7f41c671eee4aa3239490658b23dcfd3021
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-09 22:07:52 +0300

    xz: Support basic sandboxing with Linux Landlock (ABI versions 1-3).
    
    It is enabled only when decompressing one file to stdout,
    similar to how Capsicum is used.
    
    Landlock was added in Linux 5.13.

 CMakeLists.txt   | 12 +++++++++++-
 configure.ac     | 11 ++++++++---
 src/xz/file_io.c | 58 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/xz/main.c    | 19 +++++++++++++++++++
 src/xz/private.h |  3 ++-
 5 files changed, 98 insertions(+), 5 deletions(-)

commit 3a1e9fd031b9320d769d63b503ef4e82e1b6ea8c
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-09 21:12:31 +0300

    CMake: Edit threading related messages.
    
    It's mostly to change from "thread method" to "threading method".

 CMakeLists.txt | 19 ++++++++++---------
 1 file changed, 10 insertions(+), 9 deletions(-)

commit bf011352528ae3539ea7b780b45b96736ee57a99
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-09 20:59:24 +0300

    CMake: Use FATAL_ERROR if user-supplied options aren't understood.
    
    This way typos are caught quickly and compounding error messages
    are avoided (a single typo could cause more than one error).
    
    This keeps using SEND_ERROR when the system is lacking a feature
    (like threading library or sandboxing method). This way the whole
    configuration log will be generated in case someone wishes to
    report a problem upstream.

 CMakeLists.txt | 28 ++++++++++++++--------------
 1 file changed, 14 insertions(+), 14 deletions(-)

commit 3f53870c249945d657ca3d75e0993e6267d71f75
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-09 18:37:32 +0300

    CMake: Add sandboxing support.

 CMakeLists.txt | 50 +++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 49 insertions(+), 1 deletion(-)

commit 2e2cd11535ad77364cf021297e0b3f162fa3a3d0
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-09 18:13:08 +0300

    Simplify detection of Capsicum support.
    
    This removes support for FreeBSD 10.0 and 10.1 which used
    <sys/capability.h> instead of <sys/capsicum.h>. Support for
    FreeBSD 10.1 ended on 2016-12-31. So now FreeBSD >= 10.2 is
    required to enable Capsicum support.
    
    This also removes support for Capsicum on Linux (libcaprights)
    which seems to have been unmaintained since 2017 and Linux 4.11:
    https://github.com/google/capsicum-linux

 configure.ac            |  4 +--
 m4/ax_check_capsicum.m4 | 85 -------------------------------------------------
 src/xz/Makefile.am      |  2 +-
 src/xz/file_io.c        | 14 +++-----
 src/xz/private.h        |  2 +-
 5 files changed, 9 insertions(+), 98 deletions(-)

commit c57858b60e186d020b2dbaf7aabd9b32c71da824
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-25 01:46:36 +0300

    xz/Windows: Allow clock_gettime with POSIX threads.
    
    If winpthreads are used for threading, it's OK to use clock_gettime()
    from winpthreads too.

 src/xz/mytime.c | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

commit dd32f628bb5541ef4e8ce66966ef456a1934084c
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-25 01:39:26 +0300

    mythread.h: Make MYTHREAD_POSIX compatible with MinGW-w64's winpthreads.
    
    This might be almost useless but it doesn't need much extra code either.

 src/common/mythread.h | 23 ++++++++++++++++++++++-
 1 file changed, 22 insertions(+), 1 deletion(-)

commit 680e52cdd086e92691d8a0bca2c98815565f60ca
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-23 03:06:36 +0300

    CMake: Check for clock_gettime() even on Windows.
    
    This mirrors configure.ac although currently MinGW-w64 builds
    don't use clock_gettime() even if it is found.

 CMakeLists.txt | 44 +++++++++++++++++++++-----------------------
 1 file changed, 21 insertions(+), 23 deletions(-)

commit 1c1a8c3ee4dad0064dbe63b8dbc4ac4bc679f419
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-23 03:23:32 +0300

    Build: Check for clock_gettime() even if not using POSIX threads.
    
    See the new comment in the code.
    
    This also makes the check for clock_gettime() run with MinGW-w64
    with which we don't want to use clock_gettime(). The previous
    commit already took care of this situation.

 configure.ac | 31 ++++++++++++++++++-------------
 1 file changed, 18 insertions(+), 13 deletions(-)

commit 46fd991cd2808ef62554853864c946232e7547f0
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-24 22:58:53 +0300

    xz/Windows: Ensure that clock_gettime() isn't used with MinGW-w64.
    
    This commit alone doesn't change anything in the real-world:
    
      - configure.ac currently checks for clock_gettime() only
        when using pthreads.
    
      - CMakeLists.txt doesn't check for clock_gettime() on Windows.
    
    So clock_gettime() wasn't used with MinGW-w64 before either.
    
    clock_gettime() provides monotonic time and it's better than
    gettimeofday() in this sense. But clock_gettime() is defined
    in winpthreads, and liblzma or xz needs nothing else from
    winpthreads. By avoiding clock_gettime(), we avoid the dependency on
    libwinpthread-1.dll or the need to link against the static version.
    
    As a bonus, GetTickCount64() and MinGW-w64's gettimeofday() can be
    faster than clock_gettime(CLOCK_MONOTONIC, &tv). The resolution
    is more than good enough for the progress indicator in xz.

 src/xz/mytime.c | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

commit cdb4d91f2464b50c985ef7b9517314ea237ddda7
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-24 00:21:22 +0300

    xz/Windows: Use GetTickCount64() with MinGW-w64 if using Vista threads.

 src/xz/mytime.c | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

commit 988e09f27b9b04a43d45d10f92782e0092ee27a9
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-20 19:17:46 +0800

    liblzma: Move is_clmul_supported() back to crc_common.h.
    
    This partially reverts creating crc_clmul.c
    (8c0f9376f58c0696d5d6719705164d35542dd891) where is_clmul_supported()
    was moved, extern'ed, and renamed to lzma_is_clmul_supported(). This
    caused a problem when the function call to lzma_is_clmul_supported()
    results in a call through the PLT. ifunc resolvers run very early in
    the dynamic loading sequence, so the PLT may not be setup properly at
    this point. Whether the PLT is used or not for
    lzma_is_clmul_supported() depened upon the compiler-toolchain used and
    flags.
    
    In liblzma compiled with GCC, for instance, GCC will go through the PLT
    for function calls internal to liblzma if the version scripts and
    symbol visibility hiding are not used. If lazy-binding is disabled,
    then it would have made any program linked with liblzma fail during
    dynamic loading in the ifunc resolver.

 src/liblzma/check/crc32_fast.c |  2 +-
 src/liblzma/check/crc64_fast.c |  2 +-
 src/liblzma/check/crc_clmul.c  | 45 ------------------------------------
 src/liblzma/check/crc_common.h | 52 +++++++++++++++++++++++++++++++++++++++---
 4 files changed, 51 insertions(+), 50 deletions(-)

commit 105c7ca90d4152942e0798580a37f736d02faa22
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-19 16:23:32 +0800

    Build: Remove check for COND_CHECK_CRC32 in check/Makefile.inc.
    
    Currently crc32 is always enabled, so COND_CHECK_CRC32 must always be
    set. Because of this, it makes the recent change to conditionally
    compile check/crc_clmul.c appear wrong since that file has CLMUL
    implementations for both CRC32 and CRC64.

 src/liblzma/check/Makefile.inc | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 139757170468f0f1fafdf0a8ffa74363d1ea1d0c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-19 16:09:01 +0800

    CMake: Add ALLOW_CLMUL_CRC option to enable/disable CLMUL.
    
    The option is enabled by default, but will only be visible to a user
    listing cache variables or using a CMake GUI application if the
    immintrin.h header file is found.
    
    This mirrors our Autotools build --disable-clmul-crc functionality.

 CMakeLists.txt | 44 +++++++++++++++++++++++++-------------------
 1 file changed, 25 insertions(+), 19 deletions(-)

commit c60b25569d414bb73b705977a4dd342f8f9f1965
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-19 00:22:50 +0800

    liblzma: Fix -fsanitize=address failure with crc_clmul functions.
    
    After forcing crc_simd_body() to always be inlined it caused
    -fsanitize=address to fail for lzma_crc32_clmul() and
    lzma_crc64_clmul(). The __no_sanitize_address__ attribute was added
    to lzma_crc32_clmul() and lzma_crc64_clmul(), but not removed from
    crc_simd_body(). ASAN and inline functions behavior has changed over
    the years for GCC specifically, so while strictly required we will
    keep __attribute__((__no_sanitize_address__)) on crc_simd_body() in
    case this becomes a requirement in the future.
    
    Older GCC versions refuse to inline a function with ASAN if the
    caller and callee do not agree on sanitization flags
    (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89124#c3). If the
    function was forced to be inlined, it will not compile if the callee
    function has __no_sanitize_address__ but the caller doesn't.

 src/liblzma/check/crc_clmul.c | 6 ++++++
 1 file changed, 6 insertions(+)

commit 9a78971261bc67622cbd7dae02f6966968ac1393
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-14 20:16:13 +0300

    tuklib_integer: Update the CMake test for fast unaligned access.

 cmake/tuklib_integer.cmake | 69 ++++++++++++++++++++++++++++++++++++----------
 1 file changed, 54 insertions(+), 15 deletions(-)

commit 2f81ac852bc5aafc91c8e2adc66b5114761703c4
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-23 23:28:48 +0300

    Build: Enabled unaligned access by default on PowerPC64LE and some RISC-V.
    
    PowerPC64LE wasn't tested but it seems like a safe change.
    POWER8 supports unaligned access in little endian mode. Testing
    on godbolt.org shows that GCC uses unaligned access by default.
    
    The RISC-V macro __riscv_misaligned_fast is very new and not
    in any stable compiler release yet.
    
    Documentation in INSTALL was updated to match.
    
    Documentation about an autodetection bug when using ARM64 GCC
    with -mstrict-align was added to INSTALL.
    
    CMake files weren't updated yet.

 INSTALL              | 39 +++++++++++++++++++++++++++++++++++++--
 m4/tuklib_integer.m4 | 34 +++++++++++++++++++++++++++-------
 2 files changed, 64 insertions(+), 9 deletions(-)

commit c8f715f1bca4c30db814fcf1fd2fe88b8992ede2
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-14 17:56:59 +0300

    tuklib_integer: Revise unaligned reads and writes on strict-align archs.
    
    In XZ Utils context this doesn't matter much because
    unaligned reads and writes aren't used in hot code
    when TUKLIB_FAST_UNALIGNED_ACCESS isn't #defined.

 src/common/tuklib_integer.h | 256 ++++++++++++++++++++++++++++++++------------
 1 file changed, 189 insertions(+), 67 deletions(-)

commit 6828242735cbf61b93d140383336e1e51a006f2d
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-23 02:21:49 +0300

    tuklib_integer: Add missing write64be and write64le fallback functions.

 src/common/tuklib_integer.h | 34 ++++++++++++++++++++++++++++++++++
 1 file changed, 34 insertions(+)

commit 1c8884f0af28b3a4690bb573cdf3240a8ec73416
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-18 19:57:10 +0800

    liblzma: Set the MSVC optimization fix to only cover lzma_crc64_clmul().
    
    After testing a 32-bit Release build on MSVC, only lzma_crc64_clmul()
    has the bug. crc_simd_body() and lzma_crc32_clmul() do not need the
    optimizations disabled.

 src/liblzma/check/crc_clmul.c | 30 +++++++++++++++---------------
 1 file changed, 15 insertions(+), 15 deletions(-)

commit 5ce0f7a48bdf5c3b45430850a4487307afac6143
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-18 14:30:00 +0300

    liblzma: CRC_USE_GENERIC_FOR_SMALL_INPUTS cannot be used with ifunc.

 src/liblzma/check/crc_common.h | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

commit 27735380491bb5ce0d0f41d5244d89c1d0825f6b
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-17 21:53:11 +0300

    liblzma: Include common.h in crc_common.h.
    
    crc_common.h depends on common.h. The headers include common.h except
    when there is a reason to not do so.

 src/liblzma/check/crc_clmul.c  | 1 -
 src/liblzma/check/crc_common.h | 3 +++
 2 files changed, 3 insertions(+), 1 deletion(-)

commit e13b7947b92355c334edd594295d3a2c99c4bca1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-18 01:23:26 +0800

    liblzma: Add include guards to crc_common.h.

 src/liblzma/check/crc_common.h | 5 +++++
 1 file changed, 5 insertions(+)

commit 40abd88afcc61a8157fcd12d78d491caeb8e12be
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-18 22:50:25 +0800

    liblzma: Add the crc_always_inline macro to crc_simd_body().
    
    Forcing this to be inline has a significant speed improvement at the
    cost of a few repeated instructions. The compilers tested on did not
    inline this function since it is large and is used twice in the same
    translation unit.

 src/liblzma/check/crc_clmul.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit a5966c276bd6fa975f0389f8a8dc61393de750b0
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-18 22:48:19 +0800

    liblzma: Create crc_always_inline macro.
    
    This macro must be used instead of the inline keyword. On MSVC, it is
    a replacement for __forceinline which is an MSVC specific keyword that
    should not be used with inline (it will issue a warning if it is).
    
    It does not use a build system check to determine if
    __attribute__((__always_inline__)) since all compilers that can use
    CLMUL extensions (except the special case for MSVC) should support this
    attribute. If this assumption is incorrect then it will result in a bug
    report instead of silently producing slow code.

 src/liblzma/check/crc_common.h | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

commit 96b663f67c0e738a99ba8f35d9f4ced9add74544
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-14 13:23:23 +0800

    liblzma: Refactor CRC comments.
    
    A detailed description of the three dispatch methods was added. Also,
    duplicated comments now only appear in crc32_fast.c or were removed from
    both crc32_fast.c and crc64_fast.c if they appeared in crc_clmul.c.

 src/liblzma/check/crc32_fast.c | 64 +++++++++++++++++++++++++++++-------------
 src/liblzma/check/crc64_fast.c | 61 ++++++----------------------------------
 2 files changed, 53 insertions(+), 72 deletions(-)

commit 8c0f9376f58c0696d5d6719705164d35542dd891
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-14 12:17:57 +0800

    liblzma: Create crc_clmul.c.
    
    Both crc32_clmul() and crc64_clmul() are now exported from
    crc32_clmul.c as lzma_crc32_clmul() and lzma_crc64_clmul(). This
    ensures that is_clmul_supported() (now lzma_is_clmul_supported()) is
    not duplicated between crc32_fast.c and crc64_fast.c.
    
    Also, it encapsulates the complexity of the CLMUL implementations into a
    single file and reduces the complexity of crc32_fast.c and crc64_fast.c.
    Before, CLMUL code was present in crc32_fast.c, crc64_fast.c, and
    crc_common.h.
    
    During the conversion, various cleanups were applied to code (thanks to
    Lasse Collin) including:
    
    - Require using semicolons with MASK_/L/H/LH macros.
    - Variable typing and const handling improvements.
    - Improvements to comments.
    - Fixes to the pragmas used.
    - Removed unneeded variables.
    - Whitespace improvements.
    - Fixed CRC_USE_GENERIC_FOR_SMALL_INPUTS handling.
    - Silenced warnings and removed the need for some #pragmas

 CMakeLists.txt                 |   6 +-
 configure.ac                   |   6 +-
 src/liblzma/check/Makefile.inc |   3 +
 src/liblzma/check/crc32_fast.c | 120 +-----------
 src/liblzma/check/crc64_fast.c | 128 +------------
 src/liblzma/check/crc_clmul.c  | 414 +++++++++++++++++++++++++++++++++++++++++
 src/liblzma/check/crc_common.h | 190 +------------------
 7 files changed, 444 insertions(+), 423 deletions(-)

commit a3ebc2c516b09616638060806c841bd4bcf7bce3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-14 10:23:03 +0800

    liblzma: Define CRC_USE_IFUNC in crc_common.h.
    
    When ifunc is supported, we can define a simpler macro instead of
    repeating the more complex check in both crc32_fast.c and crc64_fast.c.

 src/liblzma/check/crc32_fast.c | 3 +--
 src/liblzma/check/crc64_fast.c | 3 +--
 src/liblzma/check/crc_common.h | 5 +++++
 3 files changed, 7 insertions(+), 4 deletions(-)

commit f1cd9d7194f005cd66ec03c6635ceae75f90ef17
Author: Hans Jansen <hansjansen162@outlook.com>
Date:   2023-10-12 19:37:01 +0200

    liblzma: Added crc32_clmul to crc32_fast.c.

 src/liblzma/check/crc32_fast.c  | 247 ++++++++++++++++++++++++++++++++++++++--
 src/liblzma/check/crc32_table.c |  19 +++-
 2 files changed, 255 insertions(+), 11 deletions(-)

commit 93e6fb08b22c7c13be2dd1e7274fe78413436254
Author: Hans Jansen <hansjansen162@outlook.com>
Date:   2023-10-12 19:23:40 +0200

    liblzma: Moved CLMUL CRC logic to crc_common.h.
    
    crc64_fast.c was updated to use the code from crc_common.h instead.

 src/liblzma/check/crc64_fast.c | 257 ++---------------------------------------
 src/liblzma/check/crc_common.h | 230 +++++++++++++++++++++++++++++++++++-
 2 files changed, 240 insertions(+), 247 deletions(-)

commit 233885a437f8b55a5c8442984ebc0aaa579e92de
Author: Hans Jansen <hansjansen162@outlook.com>
Date:   2023-10-12 19:07:50 +0200

    liblzma: Rename crc_macros.h to crc_common.h.

 CMakeLists.txt                                   | 2 +-
 src/liblzma/check/Makefile.inc                   | 2 +-
 src/liblzma/check/crc32_fast.c                   | 2 +-
 src/liblzma/check/crc64_fast.c                   | 2 +-
 src/liblzma/check/{crc_macros.h => crc_common.h} | 2 +-
 5 files changed, 5 insertions(+), 5 deletions(-)

commit 37947d4a7565b87e4cec8b89229d35b0a3f8d2cd
Author: Gabriela Gutierrez <gabigutierrez@google.com>
Date:   2023-09-26 15:55:13 +0000

    CI: Bump and ref actions by commit SHA in windows-ci.yml
    
    Referencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.
    
    It's important to make sure the SHA's are from the original repositories and not forks.
    
    For reference:
    
    https://github.com/msys2/setup-msys2/releases/tag/v2.20.1
    https://github.com/msys2/setup-msys2/commit/27b3aa77f672cb6b3054121cfd80c3d22ceebb1d
    
    https://github.com/actions/checkout/releases/tag/v4.1.0
    https://github.com/actions/checkout/commit/8ade135a41bc03ea155e62e844d188df1ea18608
    
    https://github.com/actions/upload-artifact/releases/tag/v3.1.3
    https://github.com/actions/upload-artifact/commit/a8a3f3ad30e3422c9c7b888a15615d19a852ae32
    
    Signed-off-by: Gabriela Gutierrez <gabigutierrez@google.com>

 .github/workflows/windows-ci.yml | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit f28cc9bd481ce493da11f98c18526d324211599a
Author: Gabriela Gutierrez <gabigutierrez@google.com>
Date:   2023-09-26 14:35:08 +0000

    CI: Bump and ref actions by commit SHA in ci.yml
    
    Referencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.
    
    It's important to make sure the SHA's are from the original repositories and not forks.
    
    For reference:
    
    https://github.com/actions/checkout/releases/tag/v4.1.0
    https://github.com/actions/checkout/commit/8ade135a41bc03ea155e62e844d188df1ea18608
    
    https://github.com/actions/upload-artifact/releases/tag/v3.1.3
    https://github.com/actions/upload-artifact/commit/a8a3f3ad30e3422c9c7b888a15615d19a852ae32
    
    Signed-off-by: Gabriela Gutierrez <gabigutierrez@google.com>

 .github/workflows/ci.yml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit f74f1740067b75042497edbfa6ea457ff75484b9
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-10-12 20:12:18 +0800

    Build: Update visibility.m4 from Gnulib.
    
    Updating from version 6 -> 8 from upstream. Declarations for variables
    and function bodies were added to avoid unnecessary failures with
    -Werror.

 m4/visibility.m4 | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

commit 5c4bca521e6fb435898a0012b3276eee70a6dadf
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-06 19:36:35 +0300

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-10-06 18:55:57 +0300

    CMake/Windows: Fix when the windres workaround is applied.
    
    CMake doesn't set WIN32 on CYGWIN but the workaround is
    probably needed on Cygwin too. Same for MSYS and MSYS2.
    
    The workaround must not be used with Clang that is acting in
    MSVC mode. This fixes it by checking for the known environments
    that need the workaround instead of using "NOT MSVC".
    
    Thanks to Martin Storsjö.
    https://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129098431

 CMakeLists.txt | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit 01e34aa1171b04f8b28960b1cc6135a903e0c13d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-29 22:11:54 +0800

    CI: Disable CLANG64 MSYS2 environment until bug is resolved.
    
    lld 17.0.1 searches for libraries to link first in the toolchain
    directories before the local directory when building. The is a problem
    for us because liblzma.a is installed in MSYS2 CLANG64 by default and
    xz.exe will thus use the installed library instead of the one being
    built.
    
    This causes tests to fail when they are expecting features to be
    disabled. More importantly, it will compile xz.exe with an incorrect
    liblzma and could cause unexpected behavior by being unable to update
    liblzma code in static builds. The CLANG64 environment can be tested
    again once this is fixed.
    
    Link to bug: https://github.com/llvm/llvm-project/issues/67779.

 .github/workflows/windows-ci.yml | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

commit 30d0c35327f3639cb11224872aa58fdbf0b1526e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-29 20:14:39 +0800

    CMake: Rename xz and man page symlink custom targets.
    
    The Ninja Generator for CMake cannot have a custom target and its
    BYPRODUCTS have the same name. This has prevented Ninja builds on
    Unix-like systems since the xz symlinks were introduced in
    80a1a8bb838842a2be343bd88ad1462c21c5e2c9.

 CMakeLists.txt | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit 506d03127a8565442b028ec991e1578124fd3025
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-29 19:58:44 +0800

    CMake: Specify LINKER_LANGUAGE for libgnu target to fix Ninja Generator.
    
    CMake is unable to guess the linker language for just a header file so
    it must be explicitly set.

 CMakeLists.txt | 6 ++++++
 1 file changed, 6 insertions(+)

commit 0570308ddd9c0e39e85597ebc0e31d4fc81d436f
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-27 19:54:35 +0300

    CMake: Fix Windows build with Clang/LLVM 17.
    
    llvm-windres 17.0.0 has more accurate emulation of GNU windres, so
    the hack for GNU windres must now be used with llvm-windres too.
    
    LLVM 16.0.6 has the old behavior and there likely won't be more
    16.x releases. So we can simply check for >= 17.0.0.
    
    See also:
    https://github.com/llvm/llvm-project/commit/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47

 CMakeLists.txt | 26 ++++++++++++++------------
 1 file changed, 14 insertions(+), 12 deletions(-)

commit 5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-26 21:47:13 +0300

    liblzma: Update a comment.
    
    The C standards don't allow an empty translation unit which can be
    avoided by declaring something, without exporting any symbols.
    
    When I committed f644473a211394447824ea00518d0a214ff3f7f2 I had
    a feeling that some specific toolchain somewhere didn't like
    empty object files (assembler or maybe "ar" complained) but
    I cannot find anything to confirm this now. Quite likely I
    remembered nonsense. I leave this here as a note to my future self. :-)

 src/liblzma/check/crc64_table.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

commit 8ebaf3f665ddc7e4f19c613005050dde5ccbe499
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-27 00:02:11 +0800

    liblzma: Avoid compiler warning without creating extra symbol.
    
    When the generic fast crc64 method is used, then we omit
    lzma_crc64_table[][]. Similar to
    d9166b52cf3458a4da3eb92224837ca8fc208d79, we can avoid compiler warnings
    with -Wempty-translation-unit (Clang) or -pedantic (GCC) by creating a
    never used typedef instead of an extra symbol.

 src/liblzma/check/crc64_table.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

commit 092d21db2e5eea19fe079264ce48c178989c7606
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-26 17:24:15 +0300

    Build: Update the comment about -Werror usage in checks.

 configure.ac | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

commit a37a2763383e6c204fe878e1416dd35e7711d3a9
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-26 15:00:43 +0300

    Build: Fix __attribute__((ifunc(...))) detection with clang -Wall.
    
    Now if user-supplied CFLAGS contains -Wall -Wextra -Wpedantic
    the two checks that need -Werror will still work.
    
    At CMake side there is add_compile_options(-Wall -Wextra)
    but it didn't affect the -Werror tests. So with both Autotools
    and CMake only user-supplied CFLAGS could make the checks fail
    when they shouldn't.
    
    This is not a full fix as things like -Wunused-macros in
    user-supplied CFLAGS will still cause problems with both
    GCC and Clang.

 CMakeLists.txt | 8 ++++++++
 configure.ac   | 8 ++++++++
 2 files changed, 16 insertions(+)

commit 9c42f936939b813f25d0ff4e99c3eb9c2d17a0d2
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-26 13:51:31 +0300

    Build: Fix underquoted AC_LANG_SOURCE.
    
    It made no practical difference in this case.

 configure.ac | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 9f1444a8a5c0e724b2c7ef83424f642f07a95982
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-26 13:14:37 +0300

    Build: Silence two Autoconf warnings.
    
    There were two uses of AC_COMPILE_IFELSE that didn't use
    AC_LANG_SOURCE and Autoconf warned about these. The omission
    had been intentional but it turned out that this didn't do
    what I thought it would.
    
    Autoconf 2.71 manual gives an impression that AC_LANG_SOURCE
    inserts all #defines that have been made with AC_DEFINE so
    far (confdefs.h). The idea was that omitting AC_LANG_SOURCE
    would mean that only the exact code included in the
    AC_COMPILE_IFELSE call would be compiled.
    
    With C programs this is not true: the #defines get added without
    AC_LANG_SOURCE too. There seems to be no neat way to avoid this.
    Thus, with the C language at least, adding AC_LANG_SOURCE makes
    no other difference than silencing a warning from Autoconf. The
    generated "configure" remains identical. (Docs of AC_LANG_CONFTEST
    say that the #defines have been inserted since Autoconf 2.63b and
    that AC_COMPILE_IFELSE uses AC_LANG_CONFTEST. So the behavior is
    documented if one also reads the docs of macros that one isn't
    calling directly.)
    
    Any extra code, including #defines, can cause problems for
    these two tests because these tests must use -Werror.
    CC=clang CFLAGS=-Weverything is the most extreme example.
    It enables -Wreserved-macro-identifier which warns about
    #define __EXTENSIONS__ 1 because it begins with two underscores.
    It's possible to write a test file that passes -Weverything but
    it becomes impossible when Autoconf inserts confdefs.h.
    
    So this commit adds AC_LANG_SOURCE to silence Autoconf warnings.
    A different solution is needed for -Werror tests.

 configure.ac | 9 ++++-----
 1 file changed, 4 insertions(+), 5 deletions(-)

commit 519e47c2818acde571fadc79551294527fe6cc22
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-26 01:17:11 +0800

    CMake: Remove accidental extra newline.

 CMakeLists.txt | 1 -
 1 file changed, 1 deletion(-)

commit bbb42412da6a02705ba3e668e90840c2683e4e67
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-26 00:47:26 +0800

    Build: Remove Gnulib dependency from tests.
    
    The tests do not use any Gnulib replacements so they do not need to link
    libgnu.a or have /lib in the include path.

 tests/Makefile.am | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

commit d265f6b75691c6c8fa876eb5320c3ff5aed17dfa
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-26 00:43:43 +0800

    CMake: Remove /lib from tests include path.
    
    The tests never included anything from /lib, so this was not needed.

 CMakeLists.txt | 1 -
 1 file changed, 1 deletion(-)

commit 9fb5de41f2fb654ca952d4bda15cf3777c2b720f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-24 22:10:41 +0800

    Scripts: Change quoting style from `...' to '...'.

 src/scripts/xzdiff.in | 2 +-
 src/scripts/xzgrep.in | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

commit eaebdef4d4de3c088b0905f42626b74e0d23abf3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-24 22:10:18 +0800

    xz: Change quoting style from `...' to '...'.

 src/xz/args.c    |  6 +++---
 src/xz/file_io.c |  2 +-
 src/xz/main.c    |  4 ++--
 src/xz/message.c | 14 +++++++-------
 src/xz/options.c |  2 +-
 src/xz/suffix.c  |  2 +-
 src/xz/util.c    |  6 +++---
 7 files changed, 18 insertions(+), 18 deletions(-)

commit f6667702bf075a05fbe336dbf3576ad1a82ec645
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-24 22:09:47 +0800

    liblzma: Change quoting style from `...' to '...'.
    
    This was done for both internal and API headers.

 src/liblzma/api/lzma/base.h            | 18 +++++++++---------
 src/liblzma/api/lzma/container.h       | 10 +++++-----
 src/liblzma/api/lzma/filter.h          |  6 +++---
 src/liblzma/api/lzma/index.h           |  8 ++++----
 src/liblzma/api/lzma/lzma12.h          |  2 +-
 src/liblzma/lz/lz_encoder.h            |  2 +-
 src/liblzma/rangecoder/range_decoder.h |  2 +-
 7 files changed, 24 insertions(+), 24 deletions(-)

commit be012b8097a4eaee335b51357d6befa745f753ce
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-24 22:09:16 +0800

    Build: Change quoting style from `...' to '...'.

 configure.ac          | 18 +++++++++---------
 dos/config.h          |  6 +++---
 m4/getopt.m4          |  2 +-
 m4/tuklib_progname.m4 |  2 +-
 windows/build.bash    |  2 +-
 5 files changed, 15 insertions(+), 15 deletions(-)

commit ce162db07f03495bd333696e66883c8f36abdc1e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-24 22:05:02 +0800

    Docs: Change quoting style from `...' to '...'.
    
    These days the ` and ' do not look symmetric. This quoting style has
    been changed in various apps over the years including the GNU tools.

 INSTALL                         |  6 +++---
 doc/examples/01_compress_easy.c |  2 +-
 doc/examples/11_file_info.c     | 16 ++++++++--------
 3 files changed, 12 insertions(+), 12 deletions(-)

commit db17656721e43939bfa4ec13506e7c76f4b86da6
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-24 21:25:01 +0800

    lib: Silence -Wsign-conversion in getopt.c.

 lib/getopt.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit a6234f677d66888f435010bc0b67de6a32fefcf6
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-24 20:48:52 +0800

    Build: Update getopt.m4 from Gnulib.
    
    This file was modified from upstream since we do not need to replace
    getopt() and can avoid complexity and feature tests.

 m4/getopt.m4 | 79 ++++++++++++++++++++++++++++++------------------------------
 1 file changed, 39 insertions(+), 40 deletions(-)

commit 84808b68f1075e8603a8ef95d361a61fdc6a5b10
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-26 00:09:53 +0800

    CMake: Add /lib to include path.

 CMakeLists.txt | 5 +++++
 1 file changed, 5 insertions(+)

commit 01804a0b4b64e0f33568e947e0579263808c59d3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-24 20:36:34 +0800

    CMake: Update libgnu target with new header files.

 CMakeLists.txt | 5 +++++
 1 file changed, 5 insertions(+)

commit d34558388fe1d8929f6478d61dc322eb4f2900af
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-23 00:47:52 +0800

    lib: Update Makefile.am for new header files.

 lib/Makefile.am | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

commit 52bf644bdf536e20fcc743b712cede135e05eec5
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-24 20:34:03 +0800

    lib: Update getopt1.c from Gnulib.
    
    The only difference was maintaining the conditional inclusion for
    config.h.

 lib/getopt1.c | 56 ++++++++++++++++++++++----------------------------------
 1 file changed, 22 insertions(+), 34 deletions(-)

commit 7e884c00d0093c38339f17fb1d280eec493f42ca
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-23 03:27:00 +0800

    lib: Update getopt.in.h from Gnulib with modifications.
    
    We can still avoid modifying the contents of this file during
    configuration to simplify the build systems. Gnulib added replacements
    for inclusions guards for Cygwin. Cygwin should not need getopt_long
    replacement so this feature can be omitted.
    
    <unistd.h> is conditionally included to avoid MSVC since it is not
    available.
    
    The definition for _GL_ARG_NONNULL was also copied into this file from
    Gnulib since this stage is usually done during gnulib-tool.

 lib/getopt.in.h | 228 +++++++-------------------------------------------------
 1 file changed, 29 insertions(+), 199 deletions(-)

commit cff05f82066ca3ce9425dafdb086325a8eef8de3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-23 00:31:55 +0800

    lib: Update getopt_int.h from Gnulib.

 lib/getopt_int.h | 109 ++++++++++++++++++++++++-------------------------------
 1 file changed, 48 insertions(+), 61 deletions(-)

commit 04bd86a4b010d43c6a016a3857ecb38dc1d5b024
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-23 00:27:23 +0800

    lib: Update getopt.c from Gnulib with modifications.
    
    The code maintains the prior modifications of conditionally including
    config.h and disabling NLS support.
    
    _GL_UNUSED is repalced with the simple cast to void trick. _GL_UNUSED
    is only used for these two parameters so its simpler than having to
    define it.

 lib/getopt.c | 1134 +++++++++++++++++++---------------------------------------
 1 file changed, 377 insertions(+), 757 deletions(-)

commit 56b42be7287844db20b3a3bc1372c6ae8c040d63
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-23 00:18:56 +0800

    lib: Add getopt-cdefs.h for getopt_long update.
    
    This was modified slightly from Gnulib. In Gnulib, it expects the
    @HAVE_SYS_CDEFS_H@ to be replaced. Instead, we can set HAVE_SYS_CDEFS_H
    on systems that have it and avoid copying another file into the build
    directory. Since we are not using gnulib-tool, copying extra files
    requires extra build system updates (and special handling with CMake) so
    we should avoid when possible.

 lib/getopt-cdefs.h | 70 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 70 insertions(+)

commit 9834e591a4cf9dc2f49e42e26bf28d1d247bc196
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-23 00:15:25 +0800

    lib: Copy new header files from Gnulib without modification.
    
    The getopt related files have changed from Gnulib by splitting up
    getopt.in.h into more modular header files. We could have kept
    everything in just getopt.in.h, but this will help us continue to update
    in the future.

 lib/getopt-core.h     | 96 +++++++++++++++++++++++++++++++++++++++++++++++++++
 lib/getopt-ext.h      | 77 +++++++++++++++++++++++++++++++++++++++++
 lib/getopt-pfx-core.h | 66 +++++++++++++++++++++++++++++++++++
 lib/getopt-pfx-ext.h  | 70 +++++++++++++++++++++++++++++++++++++
 4 files changed, 309 insertions(+)

commit 5b7a6f06e93d99d6635a740fd2e12fab66096c93
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-22 21:16:52 +0300

    Windows: Update the version requirement comments from Win95 to W2k.

 windows/README-Windows.txt | 10 ++++------
 windows/build.bash         |  6 +++---
 2 files changed, 7 insertions(+), 9 deletions(-)

commit e582f8e0fee46e7cd967f42f465d6bb608b73bc1
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-22 21:12:54 +0300

    tuklib_physmem: Comment out support for Windows versions older than 2000.

 src/common/tuklib_physmem.c | 20 +++++++++-----------
 1 file changed, 9 insertions(+), 11 deletions(-)

commit 7d73d1f0e08f96c4ab7aac91b958e37a3dadf07a
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-24 16:32:32 +0300

    sysdefs.h: Update the comment about __USE_MINGW_ANSI_STDIO.

 src/common/sysdefs.h | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

commit 2a9929af0ab7e6c0ab725565034afe3293e51d71
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-22 02:33:29 +0300

    xz: Windows: Don't (de)compress to special files like "con" or "nul".
    
    Before this commit, the following writes "foo" to the
    console and deletes the input file:
    
        echo foo | xz > con_xz
        xz --suffix=_xz --decompress con_xz
    
    It cannot happen without --suffix because names like con.xz
    are also special and so attempting to decompress con.xz
    (or compress con to con.xz) will already fail when opening
    the input file.
    
    Similar thing is possible when compressing. The following
    writes to "nul" and the input file "n" is deleted.
    
        echo foo | xz > n
        xz --suffix=ul n
    
    Now xz checks if the destination is a special file before
    continuing. DOS/DJGPP version had a check for this but
    Windows (and OS/2) didn't.

 src/xz/file_io.c | 35 ++++++++++++++++++++++++++++-------
 1 file changed, 28 insertions(+), 7 deletions(-)

commit 01311b81f03cce1c0ce847a3d556f84dbd439343
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-21 20:42:52 +0300

    CMake: Wrap two overlong lines that are possible to wrap.

 CMakeLists.txt | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

commit 152d0771ddd0cffcac9042ad1a66f110d228eee2
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-21 20:36:31 +0300

    CMake: Add a comment about threads on Cygwin.

 CMakeLists.txt | 1 +
 1 file changed, 1 insertion(+)

commit 6df988cceffaa3100b428ed816fad334935b27bf
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-12 23:53:25 +0300

    MSVC: Remove Visual Studio project files and update INSTALL-MSVC.txt.
    
    CMake is now the preferred build file generator when building
    with MSVC.

 windows/INSTALL-MSVC.txt           |  37 ++--
 windows/vs2013/config.h            | 157 ---------------
 windows/vs2013/liblzma.vcxproj     | 363 ---------------------------------
 windows/vs2013/liblzma_dll.vcxproj | 398 ------------------------------------
 windows/vs2013/xz_win.sln          |  48 -----
 windows/vs2017/config.h            | 157 ---------------
 windows/vs2017/liblzma.vcxproj     | 363 ---------------------------------
 windows/vs2017/liblzma_dll.vcxproj | 398 ------------------------------------
 windows/vs2017/xz_win.sln          |  48 -----
 windows/vs2019/config.h            | 157 ---------------
 windows/vs2019/liblzma.vcxproj     | 364 ---------------------------------
 windows/vs2019/liblzma_dll.vcxproj | 399 -------------------------------------
 windows/vs2019/xz_win.sln          |  51 -----
 13 files changed, 12 insertions(+), 2928 deletions(-)

commit edd563daf0da1d00018684614803c77ab62efcd6
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-21 19:17:40 +0300

    CMake: Require VS2015 or later for building xzdec.
    
    xzdec might build with VS2013 but it hasn't been tested.
    It was never supported before and VS2013 is old anyway
    so for simplicity only liblzma is supported with VS2013.

 CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit daea64d158a7151ca6c255a0e4554c6d521cd589
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-12 23:43:49 +0300

    CMake: Allow building xz with Visual Studio 2015 and later.
    
    Building the command line tools xz and xzdec with the combination
    of CMake + Visual Studio 2015/2017/2019/2022 works now.
    
    VS2013 update 2 should still be able to build liblzma.
    VS2013 cannot build the xz command line tool because xz
    needs snprintf() that roughly conforms to C99.
    VS2013 is old and no extra code will be added to support it.
    
    Thanks to Kelvin Lee and Jia Tan for testing.

 CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 8c2d197c940d246849b2ec48109bb22e54036927
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-12 23:34:31 +0300

    MSVC: #define inline and restrict only when needed.
    
    This also drops the check for _WIN32 as that shouldn't be needed.

 src/common/sysdefs.h | 13 ++++++++-----
 1 file changed, 8 insertions(+), 5 deletions(-)

commit af66cd585902045e5689a0418103ec81f19f1d0a
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-12 22:16:56 +0300

    CMake: Add support for replacement getopt_long (lib/getopt*).
    
    Thanks to Jia Tan for the initial work. I added the libgnu target
    and made a few related minor edits.

 CMakeLists.txt | 54 +++++++++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 47 insertions(+), 7 deletions(-)

commit e3288fdb45c580cb849f6799cf419c4922004ae5
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-12 21:12:34 +0300

    CMake: Bump maximum policy version to 3.27.
    
    There are several new policies. CMP0149 may affect the Windows SDK
    version that CMake will choose by default. The new behavior is more
    predictable, always choosing the latest SDK version by default.
    
    The other new policies shouldn't affect this package.

 CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit aff1b479c7b168652bd20305ceed4317d5db6661
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-12 20:55:10 +0300

    lib/getopt*.c: Include <config.h> only HAVE_CONFIG_H is defined.
    
    The CMake-based build doesn't use config.h.
    
    Up-to-date getopt_long in Gnulib is LGPLv2 so at some
    point it could be included in XZ Utils too but for now
    this commit is enough to make CMake-based build possible.

 lib/getopt.c  | 4 +++-
 lib/getopt1.c | 4 +++-
 2 files changed, 6 insertions(+), 2 deletions(-)

commit aa0cd585d2ed1455d35732798e0d90e3520e8ba5
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-08 19:08:57 +0300

    Doxygen: Add more C macro names to PREDEFINED.

 doxygen/Doxyfile | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

commit ee7709bae53637e1765ce142ef102914f1423cb5
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-11 18:47:26 +0300

    liblzma: Move a few __attribute__ uses in function declarations.
    
    The API headers have many attributes but these were left
    as is for now.

 src/liblzma/common/common.c    | 6 ++++--
 src/liblzma/common/common.h    | 8 ++++----
 src/liblzma/common/memcmplen.h | 3 ++-
 3 files changed, 10 insertions(+), 7 deletions(-)

commit 217958d88713b5dc73d366d24dd64b2b311b86fe
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-11 19:03:35 +0300

    xz, xzdec, lzmainfo: Use tuklib_attr_noreturn.
    
    For compatibility with C23's [[noreturn]], tuklib_attr_noreturn
    must be at the beginning of declaration (before "extern" or
    "static", and even before any GNU C's __attribute__).
    
    This commit also moves all other function attributes to
    the beginning of function declarations. "extern" is kept
    at the beginning of a line so the attributes are listed on
    separate lines before "extern" or "static".

 src/lzmainfo/lzmainfo.c |  6 ++++--
 src/xz/coder.c          |  3 ++-
 src/xz/hardware.h       |  3 ++-
 src/xz/message.h        | 30 +++++++++++++++++-------------
 src/xz/options.c        |  3 ++-
 src/xz/util.h           |  8 ++++----
 src/xzdec/xzdec.c       |  9 ++++++---
 7 files changed, 37 insertions(+), 25 deletions(-)

commit 18a66fbac031c98f9c2077fc88846e4d07849197
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-11 18:53:31 +0300

    Remove incorrect uses of __attribute__((__malloc__)).
    
    xrealloc() is obviously incorrect, modern GCC docs even
    mention realloc() as an example where this attribute
    cannot be used.
    
    liblzma's lzma_alloc() and lzma_alloc_zero() would be
    correct uses most of the time but custom allocators
    may use a memory pool or otherwise hold the pointer
    so aliasing issues could happen in theory.
    
    The xstrdup() case likely was correct but I removed it anyway.
    Now there are no __malloc__ attributes left in the code.
    The allocations aren't in hot paths so this should make
    no practical difference.

 src/liblzma/common/common.c | 4 ++--
 src/liblzma/common/common.h | 4 ++--
 src/xz/util.h               | 4 ++--
 3 files changed, 6 insertions(+), 6 deletions(-)

commit 74b0e900c92d5b222b36f474f1efa431f8e262f7
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-08 18:41:25 +0300

    Build: Omit -Wc99-c11-compat since it warns about _Noreturn.

 configure.ac | 1 -
 1 file changed, 1 deletion(-)

commit 90c94dddfd57b7d744bfad64c54e10d15778144b
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-08 18:19:26 +0300

    tuklib: Update tuklib_attr_noreturn for C11/C17 and C23.
    
    This makes no difference for GCC or Clang as they support
    GNU C's __attribute__((__noreturn__)) but this helps with MSVC:
    
      - VS 2019 version 16.7 and later support _Noreturn if the
        options /std:c11 or /std:c17 are used. This gets handled
        with the check for __STDC_VERSION__ >= 201112.
    
      - When MSVC isn't in C11/C17 mode, __declspec(noreturn) is used.
    
    C23 will deprecate _Noreturn (and <stdnoreturn.h>)
    for [[noreturn]]. This commit anticipates that but
    the final __STDC_VERSION__ value isn't known yet.

 src/common/tuklib_common.h | 22 +++++++++++++++++++++-
 src/common/tuklib_exit.h   |  4 ++--
 2 files changed, 23 insertions(+), 3 deletions(-)

commit 189f72581329ab281ad6af37f60135910cb1b146
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-11 17:22:44 +0300

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 79334e7f20f2bf9e0de095835b48868f1238f584
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-05 22:42:10 +0300

    MSVC: xz: Make file_io.c and file_io.h compatible with MSVC.
    
    Thanks to Kelvin Lee for the original patches
    and testing the modifications I made.

 src/xz/file_io.c | 26 ++++++++++++++++++++++++++
 src/xz/file_io.h | 10 ++++++++++
 2 files changed, 36 insertions(+)

commit c660b8d78b7bda43b12b285550d8c70e8ccec698
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-05 21:33:35 +0300

    MSVC: xz: Use GetTickCount64() to implement mytime_now().
    
    It's available since Windows Vista.

 src/xz/mytime.c | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

commit 5c6f892d411670e3060f4bc309402617a209e57c
Author: Kelvin Lee <kiyolee@gmail.com>
Date:   2023-09-05 15:05:09 +0300

    MSVC: xz: Use _stricmp() instead of strcasecmp() in suffix.c.

 src/xz/suffix.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

commit e241051f50044259d174e8b4633dd9a1c4478408
Author: Kelvin Lee <kiyolee@gmail.com>
Date:   2023-09-05 15:01:10 +0300

    MSVC: xz: Use _isatty() from <io.h> to implement isatty().

 src/xz/message.c | 5 +++++
 src/xz/util.c    | 5 +++++
 2 files changed, 10 insertions(+)

commit d14bba8fc2be02a9fed8c9bcaaf61103451755f8
Author: Kelvin Lee <kiyolee@gmail.com>
Date:   2023-09-05 15:10:31 +0300

    MSVC: xz: Use _fileno() instead of fileno().

 src/xz/private.h | 4 ++++
 1 file changed, 4 insertions(+)

commit c4edd367678e6a38c42b149856159bf417da7fe1
Author: Kelvin Lee <kiyolee@gmail.com>
Date:   2023-09-05 15:00:07 +0300

    MSVC: xzdec: Use _fileno and _setmode.

 src/xzdec/xzdec.c | 4 ++++
 1 file changed, 4 insertions(+)

commit cfd1054b9b539ee92524901e95d7bb5a1fe670a0
Author: Kelvin Lee <kiyolee@gmail.com>
Date:   2023-09-05 14:37:50 +0300

    MSVC: Don't #include <unistd.h>.

 lib/getopt.c      | 4 +++-
 lib/getopt.in.h   | 4 +++-
 src/xz/private.h  | 5 ++++-
 src/xzdec/xzdec.c | 5 ++++-
 4 files changed, 14 insertions(+), 4 deletions(-)

commit adef92f23563a2cc088b31ddee9040ecc96bc996
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-19 14:03:45 +0300

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 953e775941a25bfcfa353f802b13e66acb1edf2c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-14 21:13:23 +0800

    CI: Enable CLMUL in address sanitization test.
    
    The crc64_clmul() function should be ignored by the address sanitizer
    now so these builds should still pass.

 .github/workflows/ci.yml | 12 ++++--------
 1 file changed, 4 insertions(+), 8 deletions(-)

commit f167e79bc98f3f56af2e767b83aa81c2d2b9ed77
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-14 16:35:46 +0300

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 4f44ef86758a41a8ec814096f4cb6ee6de04c82e
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-09-14 16:34:07 +0300

    liblzma: Mark crc64_clmul() with __attribute__((__no_sanitize_address__)).
    
    Thanks to Agostino Sarubbo.
    Fixes: https://github.com/tukaani-project/xz/issues/62

 src/liblzma/check/crc64_fast.c | 8 ++++++++
 1 file changed, 8 insertions(+)

commit 7379bb3eed428c0ae734d0cc4a1fd04359d53f08
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-12 22:36:12 +0800

    CMake: Fix time.h checks not running on second CMake run.
    
    If CMake was configured more than once, HAVE_CLOCK_GETTIME and
    HAVE_CLOCK_MONOTONIC would not be set as compile definitions. The check
    for librt being needed to provide HAVE_CLOCK_GETTIME was also
    simplified.

 CMakeLists.txt | 18 ++++++++++--------
 1 file changed, 10 insertions(+), 8 deletions(-)

commit 5d691fe58286b92d704c0dc5cd0c4df22881c6c6
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-09-12 22:34:06 +0800

    CMake: Fix unconditionally defining HAVE_CLOCK_MONOTONIC.
    
    If HAVE_CLOCK_GETTIME was defined, then HAVE_CLOCK_MONOTONIC was always
    added as a compile definition even if the check for it failed.

 CMakeLists.txt | 8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)

commit eccf12866527b8d24c7d7f92f755142be8ef9b11
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-08-31 19:50:05 +0300

    xz: Refactor thousand separator detection and disable it on MSVC.
    
    Now the two variations of the format strings are created with
    a macro, and the whole detection code can be easily disabled
    on platforms where thousand separator formatting is known to
    not work (MSVC has no support, and on DJGPP 2.05 it can have
    problems in some cases).

 src/xz/util.c | 89 ++++++++++++++++++++++++++++++-----------------------------
 1 file changed, 45 insertions(+), 44 deletions(-)

commit f7093cd9d130477c234b40aeda613964171f8f21
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-08-31 18:14:43 +0300

    xz: Fix a too relaxed assertion and remove uses of SSIZE_MAX.
    
    SSIZE_MAX isn't readily available on MSVC. Removing it means
    that there is one thing less to worry when porting to MSVC.

 src/xz/file_io.c | 5 ++---
 src/xz/file_io.h | 4 ++--
 2 files changed, 4 insertions(+), 5 deletions(-)

commit 74c3449d8b816a724b12ebce7417e00fb597309a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-28 23:14:45 +0800

    Tests: Improve invalid unpadded size check in test_lzma_index_append().
    
    This check was extended to test the code added to fix a failing assert
    in ae5c07b22a6b3766b84f409f1b6b5c100469068a.

 tests/test_index.c | 26 +++++++++++++++++++++++---
 1 file changed, 23 insertions(+), 3 deletions(-)

commit 2544274a8b8a27f4ea6c457d2c4c32eb1e4cd336
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-28 21:54:41 +0800

    Tests: Improve comments in test_index.c.

 tests/test_index.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit 49be29d6380b94e6fb26e511dd2cdbd9afce0f8b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-28 21:52:54 +0800

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 721e3d9f7a82f59f32795d5fb97e0210d1aa839a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-28 21:50:16 +0800

    liblzma: Update assert in vli_ceil4().
    
    The argument to vli_ceil4() should always guarantee the return value
    is also a valid lzma_vli. Thus the highest three valid lzma_vli values
    are invalid arguments. All uses of the function ensure this so the
    assert is updated to match this.

 src/liblzma/common/index.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit ae5c07b22a6b3766b84f409f1b6b5c100469068a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-28 21:31:25 +0800

    liblzma: Add overflow check for Unpadded size in lzma_index_append().
    
    This was not a security bug since there was no path to overflow
    UINT64_MAX in lzma_index_append() or when it calls index_file_size().
    The bug was discovered by a failing assert() in vli_ceil4() when called
    from index_file_size() when unpadded_sum (the sum of the compressed size
    of current Stream and the unpadded_size parameter) exceeds LZMA_VLI_MAX.
    
    Previously, the unpadded_size parameter was checked to be not greater
    than UNPADDED_SIZE_MAX, but no check was done once compressed_base was
    added.
    
    This could not have caused an integer overflow in index_file_size() when
    called by lzma_index_append(). The calculation for file_size breaks down
    into the sum of:
    
    - Compressed base from all previous Streams
    - 2 * LZMA_STREAM_HEADER_SIZE (size of the current Streams header and
      footer)
    - stream_padding (can be set by lzma_index_stream_padding())
    - Compressed base from the current Stream
    - Unpadded size (parameter to lzma_index_append())
    
    The sum of everything except for Unpadded size must be less than
    LZMA_VLI_MAX. This is guarenteed by overflow checks in the functions
    that can set these values including lzma_index_stream_padding(),
    lzma_index_append(), and lzma_index_cat(). The maximum value for
    Unpadded size is enforced by lzma_index_append() to be less than or
    equal UNPADDED_SIZE_MAX. Thus, the sum cannot exceed UINT64_MAX since
    LZMA_VLI_MAX is half of UINT64_MAX.
    
    Thanks to Joona Kannisto for reporting this.

 src/liblzma/common/index.c | 6 ++++++
 1 file changed, 6 insertions(+)

commit 1057765aaabfe0f1397b8094531846655376ae38
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-28 22:18:29 +0800

    Translations: Update the Esperanto translation.

 po/eo.po | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit f2e94d064f305bb8ad77ca70f91d93e55f5cf856
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-26 20:10:23 +0800

    Translations: Update the Esperanto translation.

 po/eo.po | 47 +++++++++++++++++++++++++++++------------------
 1 file changed, 29 insertions(+), 18 deletions(-)

commit 2b871f4dbffe3801d0da3f89806b5935f758d5f3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-09 20:55:36 +0800

    Docs: Update INSTALL for --enable-threads method win95.
    
    The Autotools build allows win95 threads and --enable-small together now
    if the compiler supports __attribute__((__constructor__)).

 INSTALL | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

commit 356ad5b26b4196f085ce3afa1869154ca81faad8
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-09 20:54:15 +0800

    CMake: Conditionally allow win95 threads and --enable-small.

 CMakeLists.txt | 28 ++++++++++++++++++++--------
 1 file changed, 20 insertions(+), 8 deletions(-)

commit de574404c4c2f87aca049f232c38526e3ce092aa
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-09 20:35:16 +0800

    Build: Conditionally allow win95 threads and --enable-small.
    
    When the compiler supports __attribute__((__constructor__))
    mythread_once() is never used, even with --enable-small. A configuration
    with win95 threads and --enable-small will compile and be thread safe so
    it can be allowed.
    
    This isn't a very common configuration since MSVC does not support
    __attribute__((__constructor__)), but MINGW32 and CLANG32 environments
    for MSYS2 can use win95 threads and have
    __attribute__((__constructor__)) support.

 configure.ac | 21 +++++++++++++--------
 1 file changed, 13 insertions(+), 8 deletions(-)

commit 6bf33b704cd31dccf25e68480464aa22d3fcad5a
Author: Jamaika1 <lukaszcz18@wp.pl>
Date:   2023-08-08 14:07:59 +0200

    mythread.h: Fix typo error in Vista threads mythread_once().
    
    The "once_" variable was accidentally referred to as just "once". This
    prevented building with Vista threads when
    HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR was not defined.

 src/common/mythread.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 80cb961e5380a3878246d41341ff91378ca59e05
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-04 22:17:11 +0800

    codespell: Add .codespellrc to set default options.
    
    The .codespellrc allows setting default options to avoid false positive
    matches, set additional dictionaries, etc. For now, codespell can be
    used locally before committing doc and comment changes.
    
    It should help prevent silly errors and fix up commits in the future.

 .codespellrc | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

commit cd678a6077358935249b64a4a16fe8d17434f9c9
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-03 20:10:21 +0800

    Tests: Style fixes to test_lzip_decoder.c.

 tests/test_lzip_decoder.c | 36 ++++++++++++++++++++++++------------
 1 file changed, 24 insertions(+), 12 deletions(-)

commit 1cac5ed4fa45c9861d745b02d80575cb2ff01d81
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-03 15:56:20 +0800

    Translations: Update the Chinese (simplified) translation.

 po/zh_CN.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 16068f6c30b888cdb873f6285af941d00f95741d
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-08-02 17:15:12 +0300

    xz: Omit an empty paragraph on the man page.

 src/xz/xz.1 | 1 -
 1 file changed, 1 deletion(-)

commit 9ae4371b5106189486e850ce777e40f7b6021c0b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-02 20:30:07 +0800

    Add NEWS for 5.4.4.

 NEWS | 43 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 43 insertions(+)

commit e8c2203b2c76466d8d3387c5212b46151de8e605
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-08-02 15:19:43 +0300

    build-aux/manconv.sh: Fix US-ASCII and UTF-8 output.
    
    groff defaults to SGR escapes. Using -P-c passes -c to grotty
    which restores the old behavior. Perhaps there is a better way to
    get pure plain text output but this works for now.

 build-aux/manconv.sh | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 9a706167b0d903d92fd134895acb4bc6a5e3e688
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-08-01 19:10:43 +0300

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 33e25a0f5650754c38bed640deedefe3b4fec5ef
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-08-01 18:22:24 +0300

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 81db3b889830132334d1f2129bdc93177ac2ca7d
Author: ChanTsune <41658782+ChanTsune@users.noreply.github.com>
Date:   2023-08-01 18:17:17 +0300

    mythread.h: Disable signal functions in builds targeting Wasm + WASI.
    
    signal.h in WASI SDK doesn't currently provide sigprocmask()
    or sigset_t. liblzma doesn't need them so this change makes
    liblzma and xzdec build against WASI SDK. xz doesn't build yet
    and the tests don't either as tuktest needs setjmp() which
    isn't (yet?) implemented in WASI SDK.
    
    Closes: https://github.com/tukaani-project/xz/pull/57
    See also: https://github.com/tukaani-project/xz/pull/56
    
    (The original commit was edited a little by Lasse Collin.)

 src/common/mythread.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 71c638c611324e606d324c8189fef8fe79db6991
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-08-01 21:58:51 +0800

    Add newline to end of .gitignore.
    
    Newline was accidentally removed in commit
    01cbb7f023ee7fda8ddde04bd17cf7d3c2418706.

 .gitignore | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 42df7c7aa1cca385e509eb33c65136e61890f0bf
Author: Dimitri Papadopoulos Orfanos <3234522+DimitriPapadopoulos@users.noreply.github.com>
Date:   2023-07-31 14:02:21 +0200

    Docs: Fix typos found by codespell

 CMakeLists.txt                            | 4 ++--
 NEWS                                      | 2 +-
 configure.ac                              | 2 +-
 src/liblzma/api/lzma/container.h          | 4 ++--
 src/liblzma/api/lzma/filter.h             | 2 +-
 src/liblzma/api/lzma/lzma12.h             | 4 ++--
 src/liblzma/common/block_buffer_encoder.c | 2 +-
 src/liblzma/common/common.h               | 2 +-
 src/liblzma/common/file_info.c            | 2 +-
 src/liblzma/common/lzip_decoder.c         | 2 +-
 src/liblzma/common/stream_decoder_mt.c    | 8 ++++----
 src/liblzma/common/string_conversion.c    | 6 +++---
 src/liblzma/lz/lz_encoder.h               | 2 +-
 src/liblzma/lzma/lzma_encoder.c           | 4 ++--
 src/xz/hardware.c                         | 4 ++--
 tests/test_filter_flags.c                 | 4 ++--
 tests/test_index.c                        | 2 +-
 tests/test_vli.c                          | 2 +-
 18 files changed, 29 insertions(+), 29 deletions(-)

commit 01cbb7f023ee7fda8ddde04bd17cf7d3c2418706
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-26 20:26:23 +0800

    Update .gitignore.

 .gitignore | 4 ++++
 1 file changed, 4 insertions(+)

commit f97a1afd564c48ad9cb94682e10972a72e11fa08
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-28 22:03:08 +0800

    CMake: Conditionally allow the creation of broken symlinks.
    
    The CMake build will try to create broken symlinks on Unix and Unix-like
    platforms. Cygwin and MSYS2 are Unix-like, but may not be able to create
    broken symlinks. The value of the CYGWIN or MSYS environment variables
    determine if broken symlinks are valid.
    
    The default for MSYS2 does not allow for broken symlinks, so the CMake
    build has been broken for MSYS2 since commit
    80a1a8bb838842a2be343bd88ad1462c21c5e2c9.

 CMakeLists.txt | 82 +++++++++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 75 insertions(+), 7 deletions(-)

commit 7190f4cc7c9ade5b9b3675d0cbfa3b6d6ec9cb4f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-28 21:56:48 +0800

    CI: Fix windows-ci dependency installation.
    
    All of the MSYS2 environments need make, and it does not come with the
    toolchain package. The toolchain package will install the needed
    compiler toolchains since without this package CMake cannot properly
    generate the Makefiles.

 .github/workflows/windows-ci.yml | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit a048f472cd9a2245265cb292853cbbcdd4f02001
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-28 21:54:22 +0800

    CI: Update ci_build.sh CMake to always make Unix Makefiles.
    
    The default for many of the MSYS2 environments is for CMake to create
    Ninja build files. This would complicate the build script since we would
    need a different command to run the tests. Its simpler to always use
    Unix Makefiles so that "make test" is always a usable target for
    testing.

 build-aux/ci_build.sh | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 7870396a0ca945473aa0d1d790f4cbef456610bd
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-25 20:17:23 +0800

    CI: Test CMake builds and test framework with MSYS2.

 .github/workflows/windows-ci.yml | 32 ++++++++++++++++++++------------
 1 file changed, 20 insertions(+), 12 deletions(-)

commit 6497d1f8875cb7e3007f714336cc09c06fed235b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-25 20:14:53 +0800

    CI: Windows CI rename system matrix variable -> msys2_env.
    
    Calling the MSYS2 environment "system" was a bit vague and should be
    more specific.

 .github/workflows/windows-ci.yml | 15 +++++----------
 1 file changed, 5 insertions(+), 10 deletions(-)

commit 785e4121d9b2921ad36bd3af1cf61fa20a9265bd
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-24 23:11:45 +0800

    CI: Add Clang64 MSYS2 environment to Windows CI.

 .github/workflows/windows-ci.yml | 1 +
 1 file changed, 1 insertion(+)

commit d9166b52cf3458a4da3eb92224837ca8fc208d79
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-24 21:43:44 +0800

    liblzma: Prevent an empty translation unit in Windows builds.
    
    To workaround Automake lacking Windows resource compiler support, an
    empty source file is compiled to overwrite the resource files for static
    library builds. Translation units without an external declaration are
    not allowed by the C standard and result in a warning when used with
    -Wempty-translation-unit (Clang) or -pedantic (GCC).

 src/liblzma/Makefile.am | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

commit db5019d691f980d622fb56fdcf383af2c3519c98
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-22 18:37:56 +0800

    Translations: Update the Vietnamese translation.

 po/vi.po | 45 ++++++++++++++++++++++++++++-----------------
 1 file changed, 28 insertions(+), 17 deletions(-)

commit f3a055f762ba5b71b746fc2d44a6ababde2c61b5
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-22 14:55:42 +0800

    CI: Add Windows runner for Autotools builds with MSYS2.
    
    Only a subset of the tests run by the Linux and MacOS Autotools builds
    are run. The most interesting tests are the ones that disable threads,
    encoders, and decoders.
    
    The Windows runner will only be run manually since these tests will
    likely take much longer than the Linux and MacOS runners. This runner
    should be used before merging any large features and before releases.
    
    Currently the clang64 environment fails to due to a warning and
    -Werror is enabled for the CI tests. This is still an early version
    since the CMake build can be done for MSVC and optionally each of the
    MSYS2 environments. GitHub does not allow manually running the CI tests
    unless the workflow is checked on the default branch so checking in a
    minimum version is a good idea.
    
    Thanks to Arthur S for the original proposing the original patch.
    
    Closes: https://github.com/tukaani-project/xz/pull/34

 .github/workflows/windows-ci.yml | 119 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 119 insertions(+)

commit 556536a3525df9e5ed78b8c7057991cfa9edfac8
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-21 22:11:01 +0800

    CI: Add argument to ci_build.sh to pass flags to autogen.sh.

 build-aux/ci_build.sh | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

commit 39a32d36fc465c4e70f13192eea380e518ba6e8a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-21 18:05:44 +0800

    Tests: Skip .lz files in test_files.sh if not configured.
    
    Previously if the lzip decoder was not configured then test_files.sh
    would pass the lzip tests instead of skipping them.

 tests/test_files.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 194d12724b30fe42789d12a0184f9d412c449347
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 22:11:13 +0800

    Tests: Add ARM64 filter test to test_compress.sh.

 tests/test_compress.sh | 1 +
 1 file changed, 1 insertion(+)

commit d850365c444368102c69beaddf849ed463c33467
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:30:05 +0800

    Translations: Update the Croatian translation.

 po/hr.po | 49 ++++++++++++++++++++++++++++++-------------------
 1 file changed, 30 insertions(+), 19 deletions(-)

commit 24049eb7acf6d42a60f00efe4e7289fe8e1797fe
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:28:32 +0800

    Translations: Update the Korean man page translations.

 po4a/ko.po | 1255 ++++++++++++++++++++++++++++++------------------------------
 1 file changed, 629 insertions(+), 626 deletions(-)

commit 4d4a4fa07de6cb9d913fb2f97712fddda2527b49
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:25:24 +0800

    Translations: Update the Korean translation.

 po/ko.po | 45 ++++++++++++++++++++++++++++-----------------
 1 file changed, 28 insertions(+), 17 deletions(-)

commit 237f06d9c55cf438a7538a598354bcf103f23711
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:24:05 +0800

    Translations: Update the Polish translation.

 po/pl.po | 47 +++++++++++++++++++++++++++++------------------
 1 file changed, 29 insertions(+), 18 deletions(-)

commit 80c2c832136656d5ac7a1bca8bc42d95e13d281a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:22:23 +0800

    Translations: Update the German man page translations.

 po4a/de.po | 1255 ++++++++++++++++++++++++++++++------------------------------
 1 file changed, 629 insertions(+), 626 deletions(-)

commit fdbde14503ca03069d3649aa51926f5f796b89d8
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:18:44 +0800

    Translations: Update the German translation.

 po/de.po | 47 +++++++++++++++++++++++++++++------------------
 1 file changed, 29 insertions(+), 18 deletions(-)

commit 9f3bf5ff5b2b5cf0b252a2bf381238ca49dc4101
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:17:10 +0800

    Translations: Update the Chinese (simplified) translation.

 po/zh_CN.po | 47 +++++++++++++++++++++++++++++------------------
 1 file changed, 29 insertions(+), 18 deletions(-)

commit 376938c588011567c74f1d5a160c0ccce6336d46
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:15:47 +0800

    Translations: Update the Swedish translation.

 po/sv.po | 47 +++++++++++++++++++++++++++++------------------
 1 file changed, 29 insertions(+), 18 deletions(-)

commit 26b0bc6eb82c84559936a7c7080de5c71c8276f8
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:14:00 +0800

    Translations: Update the Ukrainian man page translations.

 po4a/uk.po | 1253 ++++++++++++++++++++++++++++++------------------------------
 1 file changed, 628 insertions(+), 625 deletions(-)

commit 2d02c8b7640b54f3c5aa1c8b5990ba56f322393b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:09:15 +0800

    Translations: Update the Ukrainian translation.

 po/uk.po | 45 ++++++++++++++++++++++++++++-----------------
 1 file changed, 28 insertions(+), 17 deletions(-)

commit f881018b503fd334331c24a09075429558abbce1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:06:57 +0800

    Translations: Update the Spanish translation.

 po/es.po | 47 +++++++++++++++++++++++++++++------------------
 1 file changed, 29 insertions(+), 18 deletions(-)

commit 791fe6d3ffd6877fa5f852be69d9251397dfaa31
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:05:19 +0800

    Translations: Update the Romanian translation.

 po/ro.po | 48 ++++++++++++++++++++++++++++++------------------
 1 file changed, 30 insertions(+), 18 deletions(-)

commit 8827e90704f699fe08bb5bed56b1717a2bc0eb77
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-20 20:02:56 +0800

    Translations: Update the Romanian man page translations.

 po4a/ro.po | 1254 ++++++++++++++++++++++++++++++------------------------------
 1 file changed, 629 insertions(+), 625 deletions(-)

commit 0184d344fa4f215cd345bb131db9068e077c69b8
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-19 23:36:00 +0800

    liblzma: Suppress -Wunused-function warning.
    
    Clang 16.0.0 and earlier have a bug that the ifunc resolver function
    triggers the -Wunused-function warning. The resolver function is static
    and only "used" by the __attribute__((__ifunc()__)).
    
    At this time, the bug is still unresolved, but has been reported:
    https://github.com/llvm/llvm-project/issues/63957
    
    This is not a problem in GCC.

 src/liblzma/check/crc64_fast.c | 10 ++++++++++
 1 file changed, 10 insertions(+)

commit 43845fa70fc751736c44c18f4cee42d49bfd1392
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-18 22:52:25 +0800

    liblzma: Reword lzma_str_list_filters() documentation.
    
    This further improves the documentation from commit
    f36ca7982f6bd5e9827219ed4f3c5a1fbf5d7bdf. The previous wording of
    "supported options" was slightly misleading since the options that are
    printed are the ones that are relevant for encoding/decoding. It is not
    about which options can or must be specified.

 src/liblzma/api/lzma/filter.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 818701ba1c9dff780b7fbf28f9ab8eb11a25dd67
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-18 22:49:57 +0800

    liblzma: Improve comment in string_conversion.c.
    
    The comment used "flag" when referring to decoder options. Just
    referring to them as options is more clear and consistent.

 src/liblzma/common/string_conversion.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit b6b7d065853cd4c3f5b8d9be8aea0b6dcb0fe090
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-07-18 17:37:33 +0300

    xz: Translate the second "%s: " in message.c since French needs "%s : ".
    
    This string is used to print a filename when using "xz -v" and
    stderr isn't a terminal.

 src/xz/message.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit be644042c3066d8e7a2834f989671ba74d27f749
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-07-18 14:35:33 +0300

    xz: Make "%s: %s" translatable because French needs "%s : %s".

 src/xz/args.c    |  5 ++++-
 src/xz/coder.c   |  8 ++++----
 src/xz/file_io.c |  8 ++++----
 src/xz/list.c    | 11 ++++++-----
 4 files changed, 18 insertions(+), 14 deletions(-)

commit 97fd5cb669ee0afc48d2087675ab166aff89eaa2
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-07-18 13:57:54 +0300

    liblzma: Tweak #if condition in memcmplen.h.
    
    Maybe ICC always #defines _MSC_VER on Windows but now
    it's very clear which code will get used.

 src/liblzma/common/memcmplen.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 40392c19f71985852d75997f109dea97177d6f3f
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-07-18 13:49:43 +0300

    liblzma: Omit unnecessary parenthesis in a preprocessor directive.

 src/liblzma/common/memcmplen.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit abc1d5601b7e419ebc28a1ab4b268613b52e6f98
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-18 00:51:48 +0800

    xz: Update Authors list in a few files.

 src/xz/args.c    | 3 ++-
 src/xz/args.h    | 3 ++-
 src/xz/coder.c   | 3 ++-
 src/xz/coder.h   | 3 ++-
 src/xz/message.c | 3 ++-
 5 files changed, 10 insertions(+), 5 deletions(-)

commit 289034a168878baa9df6ff6e159110aade69cba5
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-14 23:20:33 +0800

    Docs: Add a new section to INSTALL for Tests.
    
    The new Tests section describes basic information about the tests, how
    to run them, and important details when cross compiling. We have had a
    few questions about how to compile the tests without running them, so
    hopefully this information will help others with the same question in the
    future.
    
    Fixes: https://github.com/tukaani-project/xz/issues/54

 INSTALL | 81 +++++++++++++++++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 64 insertions(+), 17 deletions(-)

commit 1119e5f5a519b0ab71c81fc4dc84c0cc72abe513
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-14 21:10:27 +0800

    Docs: Update README.
    
    This adds an entry to "Other implementations of the .xz format" for
    XZ for Java.

 README | 4 ++++
 1 file changed, 4 insertions(+)

commit f99e2e4e53b7ea89e4eef32ddd4882e0416357c9
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-13 23:32:10 +0800

    xz: Fix typo in man page.
    
    The Memory limit information section described three output
    columns when it actually has six. This was reworded to
    "multiple" to make it more future proof.

 src/xz/xz.1 | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit f907705eb1f6c5edaafc9668a34c51a989932f1d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-13 21:46:12 +0800

    xz: Minor clean up for coder.c
    
    * Moved max_block_list_size from a global to local variable.
    * Reworded error message in validate_block_list_filter().
    * Removed helper function filter_chain_error().
    * Changed 1 << X to 1U << X in many places

 src/xz/coder.c | 53 +++++++++++++++++++++--------------------------------
 1 file changed, 21 insertions(+), 32 deletions(-)

commit 9adc9e56157ecbf2948e5036df8567809b9ae177
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-13 21:26:47 +0800

    xz: Update man page Authors and date.

 src/xz/xz.1 | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

commit c12e429f2635da8d8f5749e5f733f451baca6945
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-20 20:32:59 +0800

    xz: Add a section to man page for robot mode --filters-help.

 src/xz/xz.1 | 32 ++++++++++++++++++++++++++++++--
 1 file changed, 30 insertions(+), 2 deletions(-)

commit e10f2db5d10300c16fa482a136ed31c1aa6e8e8d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-19 23:11:41 +0800

    xz: Slight reword in xz man page for consistency.
    
    Changed will print => prints in xz --robot --version description to
    match --robot --info-memory description.

 src/xz/xz.1 | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit f5dc172a402fa946f3c45a16929d7fe14c9f5e81
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-19 23:07:10 +0800

    xz: Reorder robot mode subsections in the man page.
    
    The order is now consistent with the order the command line arguments
    are documented earlier in the man page. The new order is:
    1. --list
    2. --info-memory
    3. --version
    
    Instead of the previous order:
    1. --version
    2. --info-memory
    3. --list

 src/xz/xz.1 | 192 ++++++++++++++++++++++++++++++------------------------------
 1 file changed, 96 insertions(+), 96 deletions(-)

commit 9628be23aef2784249fd9f3199799d785d2ec5cc
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-13 00:46:50 +0800

    xz: Update man page for new --filters-help option.

 src/xz/xz.1 | 10 ++++++++++
 1 file changed, 10 insertions(+)

commit a165d7df1964121eb9df715e6f836a31c865beef
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-13 00:44:41 +0800

    xz: Add a new --filters-help option.
    
    The --filters-help can be used to help create filter chains with the
    --filters and --filtersX options. The message in --long-help is too
    short to fully explain the syntax to construct complex filter chains.
    
    In --robot mode, xz will only print the output from liblzma function
    lzma_str_list_filters.

 src/xz/args.c    |  8 ++++++++
 src/xz/message.c | 30 ++++++++++++++++++++++++++++++
 src/xz/message.h |  5 +++++
 3 files changed, 43 insertions(+)

commit 95f1a414b156ee35d3e71862a14915fdd138f913
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-21 20:28:11 +0800

    xz: Update the man page for --block-list and --filtersX
    
    The --block-list option description needed updating since the new
    --filtersX option changes how it can be used. The new entry for
    --filters1=FILTERS ... --filter9=FILTERS was created right after
    the --filters option.

 src/xz/xz.1 | 106 +++++++++++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 80 insertions(+), 26 deletions(-)

commit 47a63cad2aa778280e0c1926b7159427ea028cb1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-21 19:50:14 +0800

    xz: Update --long-help for the new --filtersX option.

 src/xz/message.c | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

commit 8b9913a13daca2550d02dfdcdc9be15f55ca4d13
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-17 20:46:21 +0800

    xz: Ignore filter chains that are set but never used in --block-list.
    
    If a filter chain is set but not used in --block-list, it introduced
    unexpected behavior such as requiring an unneeded amount of memory to
    compress, reducing the number of threads in multi-threaded encoding, and
    printing an incorrect amount of memory needed to decompress.
    
    This also renames filters_init_mask => filters_used_mask. A filter is
    assumed to be used if it is specified in --filtersX until
    coder_set_compression_settings() determines which filters are referenced
    in --block-list.

 src/xz/coder.c | 66 ++++++++++++++++++++++++++++++++++++++++++----------------
 1 file changed, 48 insertions(+), 18 deletions(-)

commit 183819bfd9efac8c184d9bf123325719b7eee30f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-13 20:11:13 +0800

    xz: Set the Block size for mt encoding correctly.
    
    When opt_block_size is not used, the Block size for mt encoder is
    derived from the minimum of the largest Block specified by
    --block-list and the recommended Block size on all filter chains
    calculated by lzma_mt_block_size(). This avoids using unnecessary
    memory and ensures that all Blocks are large enough for the most memory
    needy filter chain.

 src/xz/coder.c | 68 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 67 insertions(+), 1 deletion(-)

commit afb2dbec3d857b026486b75e42a4728e12d234cb
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-11 00:09:41 +0800

    xz: Validate --flush-timeout for all specified filter chains.

 src/xz/coder.c | 24 ++++++++++++++++--------
 1 file changed, 16 insertions(+), 8 deletions(-)

commit 5f0c5a04388f8334962c70bc37a8c2ff8f605e0a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-13 19:54:33 +0800

    xz: Allows --block-list filters to scale down memory usage.
    
    Previously, only the default filter chain could have its memory usage
    adjusted. The filter chains specified with --filtersX were not checked
    for memory usage. Now, all used filter chains will be adjusted if
    necessary.

 src/xz/coder.c | 269 +++++++++++++++++++++++++++++++++++++++++++++------------
 1 file changed, 214 insertions(+), 55 deletions(-)

commit 479fd58d60622331fcbe48fddf756927b9f80d9a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-10 21:50:33 +0800

    xz: Do not include block splitting if encoders are disabled.
    
    The block splitting logic and split_block() function are not needed if
    encoders are disabled. This will help slightly reduce the binary size
    when built without encoders and allow split_block() to use functions
    that require encoders being enabled.

 src/xz/coder.c | 29 ++++++++++++++++++++---------
 1 file changed, 20 insertions(+), 9 deletions(-)

commit f86ede22500f7ae024ec3ec3f3489ab5a857a3b3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-10 22:38:59 +0800

    xz: Free filters[] in debug mode.
    
    This will only free filter chains created with --filters1-9 since the
    default filter chain may be set from a static function variable. The
    complexity to free the default filter chain is not worth the burden on
    code maintenance.

 src/xz/coder.c | 10 ++++++++++
 1 file changed, 10 insertions(+)

commit f281cd0d692ac0c70fc7669b80dddb863ea947e1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-13 19:28:23 +0800

    xz: Add a message if --block-list is used outside of xz compresssion.
    
    --block-list is only supported with compression in xz format. This avoids
    silently ignoring when --block-list is unused.

 src/xz/args.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

commit d6af7f347077b22403133239592e478931307759
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-18 20:29:09 +0800

    xz: Create command line options for filters[1-9].
    
    The new command line options are meant to be combined with --block-list.
    They work as an optional extension to --block-list to specify a custom
    filter chain for each block listed. The new options allow the creation
    of up to 9 reusable filter chains. For instance:
    
    xz --block-list=1:10MiB,3:5MiB,,2:5MiB,1:0 --filters1=delta--lzma2 \
    --filters2=x86--lzma2 --filters3=arm64--lzma2
    
    Will create the following blocks:
    1. A block of size 10 MiB with filter chain delta, lzma2.
    2. A block of size 5 MiB with filter chain arm64, lzma2.
    3. A block of size 5 MiB with filter chain arm64, lzma2.
    4. A block of size 5 MiB with filter chain x86, lzma2.
    5. A block containing the rest of the file contents with filter chain
       delta, lzma2.

 src/xz/args.c  |  82 ++++++++++++++++++++++---
 src/xz/coder.c | 188 ++++++++++++++++++++++++++++++++++++++++++---------------
 src/xz/coder.h |  20 +++++-
 3 files changed, 230 insertions(+), 60 deletions(-)

commit 072d29250113268536719ad0e040ab8a66fb6435
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-13 19:36:09 +0800

    xz: Use lzma_filters_free() in forget_filter_chain().
    
    This is a little cleaner than the previous implementation of
    forget_filter_chain(). It is also more consistent since
    lzma_str_to_filters() will always terminate the filter chain so there
    is no need to terminate it later in coder_set_compression_settings().

 src/xz/coder.c | 18 ++++++++++--------
 1 file changed, 10 insertions(+), 8 deletions(-)

commit 3d21da5cff4b511633cb6e0d8a1090485c0c1059
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-17 22:22:45 +0800

    xz: Separate string to filter conversion into a helper function.
    
    Converting from string to filter will also need to be done for block
    specific filter chains.

 src/xz/coder.c | 33 ++++++++++++++++++++-------------
 1 file changed, 20 insertions(+), 13 deletions(-)

commit a6583726e5f950278f96abcf79c04f1056810be6
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-06 00:03:35 +0800

    Tests: Use new --filters option in test_compress.sh

 tests/test_compress.sh | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

commit 5f3b898d07cc9b7160c7c88b3120b7edabb8a5b0
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-06 00:03:06 +0800

    xz: Update --long-help and man page for new --filters option.

 src/xz/message.c |  6 ++++++
 src/xz/xz.1      | 41 ++++++++++++++++++++++++++++++++++++-----
 2 files changed, 42 insertions(+), 5 deletions(-)

commit 9ded880a0221f4d1256845fc4ab957ffd377c760
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-06 00:02:29 +0800

    xz: Add --filters option to CLI.
    
    The --filters option uses the new lzma_str_to_filters() function
    to convert a string into a full filter chain. Using this option
    will reset all previous filters set by --preset, --[filter], or
    --filters.

 src/xz/args.c  |  9 +++++++--
 src/xz/coder.c | 50 ++++++++++++++++++++++++++++++++++++++++++++++++--
 src/xz/coder.h |  3 +++
 3 files changed, 58 insertions(+), 4 deletions(-)

commit 2c189bb00af73dc7ba1a67a9d274d5be03ee3a88
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-14 21:30:25 +0800

    Tests: Improve feature testing for skipping.
    
    Fixed a bug where test_compress_* would all fail if arm64 or armthumb
    filters were enabled for compression but arm was disabled. Since the
    grep tests only checked for "define HAVE_ENCODER_ARM", this would match
    on HAVE_ENCODER_ARM64 or HAVE_ENCODER_ARMTHUMB.
    
    Now the config.h feature test requires " 1" at the end to prevent the
    prefix problem. have_feature() was also updated for this even though
    there were known current bugs affecting it. This is just in case future
    features have a similar prefix problem.

 tests/test_compress.sh | 4 ++--
 tests/test_files.sh    | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

commit 80a6b9bcad016c99c9ba3f3eeb4a619fcadfd357
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-10 20:56:28 +0800

    Translations: Update the Chinese (traditional) translation.

 po/zh_TW.po | 659 ++++++++++++++++++++++++++++++++++--------------------------
 1 file changed, 377 insertions(+), 282 deletions(-)

commit 17f8844e6fc355abf997d77637a7447c4f7bbcbd
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-08 21:24:19 +0800

    liblzma: Remove non-portable empty initializer.
    
    Commit 78704f36e74205857c898a351c757719a6c8b666 added an empty
    initializer {} to prevent a warning. The empty initializer is a GNU
    extension and results in a build failure on MSVC. The -wpedantic flag
    warns about empty initializers.

 src/liblzma/common/stream_encoder_mt.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 3aca4f629cd577f0c54f594d5d88722edf0b0413
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-07-08 20:03:59 +0800

    Translations: Update the Vietnamese translation.

 po/vi.po | 620 +++++++++++++++++++++++++++++++++++----------------------------
 1 file changed, 349 insertions(+), 271 deletions(-)

commit 66bdcfa85fef2911cc80f5f30fed3f9610faccb4
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-28 20:46:31 +0800

    Tests: Fix memory leaks in test_index.
    
    Several tests were missing calls to lzma_index_end() to clean up the
    lzma_index structs. The memory leaks were discovered by using
    -fsanitize=address with GCC.

 tests/test_index.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

commit fe3bd438fb119f9bad3f08dc29d331e4956196e1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-28 20:43:29 +0800

    Tests: Fix memory leaks in test_block_header.
    
    test_block_header was not properly freeing the filter options between
    calls to lzma_block_header_decode(). The memory leaks were discovered by
    using -fsanitize=address with GCC.

 tests/test_block_header.c | 38 ++++++++++++++++++++++----------------
 1 file changed, 22 insertions(+), 16 deletions(-)

commit 78704f36e74205857c898a351c757719a6c8b666
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-28 20:31:11 +0800

    liblzma: Prevent uninitialzed warning in mt stream encoder.
    
    This change only impacts the compiler warning since it was impossible
    for the wait_abs struct in stream_encode_mt() to be used before it was
    initialized since mythread_condtime_set() will always be called before
    mythread_cond_timedwait().
    
    Since the mythread.h code is different between the POSIX and
    Windows versions, this warning was only present on Windows builds.
    
    Thanks to Arthur S for reporting the warning and providing an initial
    patch.

 src/liblzma/common/stream_encoder_mt.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit e3356a204c5ae02db3ec4552b6c1be354e9b6142
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-28 20:22:38 +0800

    liblzma: Prevent warning for MSYS2 Windows build.
    
    In lzma_memcmplen(), the <intrin.h> header file is only included if
    _MSC_VER and _M_X64 are both defined but _BitScanForward64() was
    previously used if _M_X64 was defined. GCC for MSYS2 defines _M_X64 but
    not _MSC_VER so _BitScanForward64() was used without including
    <intrin.h>.
    
    Now, lzma_memcmplen() will use __builtin_ctzll() for MSYS2 GCC builds as
    expected.

 src/liblzma/common/memcmplen.h | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

commit 45e250a9e9f3c3e8e8af2983366b170bf54f890e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-28 21:01:22 +0800

    CI: Add test with -fsanitize=address,undefined.
    
    ci_build.sh was updated to accept disabling of __attribute__ ifunc
    and CLMUL. This will allow -fsanitize=address to pass because ifunc
    is incompatible with -fsanitize=address. The CLMUL implementation has
    optimizations that potentially read past the buffer and mask out the
    unwanted bytes.
    
    This test will only run on Autotools Linux.

 .github/workflows/ci.yml | 23 +++++++++++++++++++----
 build-aux/ci_build.sh    |  8 +++++++-
 2 files changed, 26 insertions(+), 5 deletions(-)

commit 596ee722cd7ddf0afae584fc06365adc0e735977
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-28 20:16:04 +0800

    CI: Upgrade checkout action from v2 to v3.

 .github/workflows/ci.yml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 86118ea320f867e09e98a8682cc08cbbdfd640e2
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-27 23:38:32 +0800

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 3d1fdddf92321b516d55651888b9c669e254634e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-27 17:27:09 +0300

    Docs: Document the configure option --disable-ifunc in INSTALL.

 INSTALL | 8 ++++++++
 1 file changed, 8 insertions(+)

commit b4cf7a2822e8d30eb2b12a1a07fd04383b10ade3
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-06-27 17:24:49 +0300

    Minor tweaks to style and comments.

 CMakeLists.txt | 8 ++++----
 configure.ac   | 9 +++++----
 2 files changed, 9 insertions(+), 8 deletions(-)

commit 23fb9e3a329117c2968c1e7388b6ef07c782dba1
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-06-27 17:19:49 +0300

    CMake: Rename CHECK_ATTR_IFUNC to ALLOW_ATTR_IFUNC.
    
    It's so that there's a clear difference in wording compared
    to liblzma's integrity check types.

 CMakeLists.txt | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit ee44863ae88e377a5df10db007ba9bfadde3d314
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-06-27 17:05:23 +0300

    liblzma: Add ifunc implementation to crc64_fast.c.
    
    The ifunc method avoids indirection via the function pointer
    crc64_func. This works on GNU/Linux and probably on FreeBSD too.
    The previous __attribute((__constructor__)) method is kept for
    compatibility with ELF platforms which do support ifunc.
    
    The ifunc method has some limitations, for example, building
    liblzma with -fsanitize=address will result in segfaults.
    The configure option --disable-ifunc must be used for such builds.
    
    Thanks to Hans Jansen for the original patch.
    Closes: https://github.com/tukaani-project/xz/pull/53

 src/liblzma/check/crc64_fast.c | 35 ++++++++++++++++++++++++++---------
 1 file changed, 26 insertions(+), 9 deletions(-)

commit b72d21202402a603db6d512fb9271cfa83249639
Author: Hans Jansen <hansjansen162@outlook.com>
Date:   2023-06-22 19:49:30 +0200

    Add ifunc check to CMakeLists.txt
    
    CMake build system will now verify if __attribute__((__ifunc__())) can be
    used in the build system. If so, HAVE_FUNC_ATTRIBUTE_IFUNC will be
    defined to 1.

 CMakeLists.txt | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

commit 23b5c36fb71904bfbe16bb20f976da38dadf6c3b
Author: Hans Jansen <hansjansen162@outlook.com>
Date:   2023-06-22 19:46:55 +0200

    Add ifunc check to configure.ac
    
    configure.ac will now verify if __attribute__((__ifunc__())) can be used in
    the build system. If so, HAVE_FUNC_ATTRIBUTE_IFUNC will be defined to 1.

 configure.ac | 28 ++++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)

commit dbb3a536ed9873ffa0870321f6873e564c6a9da8
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-07 00:18:30 +0800

    CI: Add apt update command before installing dependencies.
    
    Without the extra command, all of the CI tests were automatically
    failing because the Ubuntu servers could not be reached properly.

 .github/workflows/ci.yml | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

commit 6bcd516812331de42b347922913230895bebad34
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-06-07 00:10:38 +0800

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 0d94ba69220d894d2a86081821d2d7a89df5a10b
Author: Benjamin Buch <bebuch@users.noreply.github.com>
Date:   2023-06-06 15:32:45 +0200

    CMake: Protects against double find_package
    
    Boost iostream uses `find_package` in quiet mode and then again uses
    `find_package` with required. This second call triggers a
    `add_library cannot create imported target "ZLIB::ZLIB" because another
    target with the same name already exists.`
    
    This can simply be fixed by skipping the alias part on secondary
    `find_package` runs.

 CMakeLists.txt | 16 +++++++++-------
 1 file changed, 9 insertions(+), 7 deletions(-)

commit 045d7aae286ecd2ce163be9e0d9041343a03f89a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-31 20:26:42 +0800

    Translations: Update the Esperanto translation.

 po/eo.po | 185 +++++++++++++++++++++++++++++++--------------------------------
 1 file changed, 92 insertions(+), 93 deletions(-)

commit b0cc7c2dcefe4cbc4e1e697598c14fb687ed0b78
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-31 20:25:00 +0800

    Translations: Update the Croatian translation.

 po/hr.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit af045ef6f848f02cd14c9ad195a5f87bb0c02dce
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-31 20:15:53 +0800

    Translations: Update the Chinese (simplified) translation.

 po/zh_CN.po | 317 ++++++++++++++++++++++++++++++------------------------------
 1 file changed, 157 insertions(+), 160 deletions(-)

commit e6b92d5817fe91ad27a0f7f57bd0f2144311e383
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-17 23:12:13 +0800

    Translations: Update German translation of man pages.

 po4a/de.po | 52 ++++++++++++----------------------------------------
 1 file changed, 12 insertions(+), 40 deletions(-)

commit 592961ccdbba39c7d60fe37e36764232feb57c60
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-17 23:09:18 +0800

    Translations: Update the German translation.

 po/de.po | 189 +++++++++++++++++++++++++++++++--------------------------------
 1 file changed, 94 insertions(+), 95 deletions(-)

commit 13572cb2c391f5b7503e333c6e05b20bd5bbb524
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-17 20:30:01 +0800

    Translations: Update the Croatian translation.

 po/hr.po | 187 +++++++++++++++++++++++++++++++--------------------------------
 1 file changed, 93 insertions(+), 94 deletions(-)

commit 4e6e425ea8f097c6fb43e69cc9540294dca3680d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-17 20:26:54 +0800

    Translations: Update Korean translation of man pages.

 po4a/ko.po | 3015 ++++++++++++------------------------------------------------
 1 file changed, 568 insertions(+), 2447 deletions(-)

commit d5ef1f6faf7c270f60093629257150085ecf19ca
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-17 20:13:01 +0800

    Translations: Update the Korean translation.

 po/ko.po | 319 +++++++++++++++++++++++++++++++--------------------------------
 1 file changed, 158 insertions(+), 161 deletions(-)

commit e22d0b0f2e301e7906d0106689d967ed84362028
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-16 23:49:09 +0800

    Translations: Update the Spanish translation.

 po/es.po | 319 +++++++++++++++++++++++++++++++--------------------------------
 1 file changed, 158 insertions(+), 161 deletions(-)

commit f50da74d52d01f6cfd826a921249e289cf671678
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-16 23:47:23 +0800

    Translations: Update the Romanian translation.

 po/ro.po | 195 ++++++++++++++++++++++++++++++++-------------------------------
 1 file changed, 98 insertions(+), 97 deletions(-)

commit 4b9ad60a7305e9841b7cb4ea611bdf5fa7271696
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-16 23:45:43 +0800

    Translations: Update Romanian translation of man pages.

 po4a/ro.po | 19 ++++++++++---------
 1 file changed, 10 insertions(+), 9 deletions(-)

commit cb6fd57f889c5d9fab36ae8c9e10083a5fe32dea
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-16 23:43:51 +0800

    Translations: Update Ukrainian translation of man pages.

 po4a/uk.po | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

commit c3e8fcbc2db4861f92ad15606c995bd255803c52
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-16 23:37:54 +0800

    Translations: Update the Ukrainian translation.

 po/uk.po | 321 +++++++++++++++++++++++++++++++--------------------------------
 1 file changed, 159 insertions(+), 162 deletions(-)

commit 27b81b84fcedbc55aa6e6b21004c44070b15b038
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-16 23:07:35 +0800

    Translations: Update the Polish translation.

 po/pl.po | 316 +++++++++++++++++++++++++++++++--------------------------------
 1 file changed, 155 insertions(+), 161 deletions(-)

commit 8024ad636a65ed6ea95c94d57255be4c6724d6ed
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-16 22:52:14 +0800

    Translations: Update the Swedish translation.

 po/sv.po | 319 +++++++++++++++++++++++++++++++--------------------------------
 1 file changed, 158 insertions(+), 161 deletions(-)

commit 6699a29673f227c4664826db485ed9f7596320d2
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-16 21:21:38 +0800

    Translations: Update the Esperanto translation.

 po/eo.po | 34 +++++++++++++++++-----------------
 1 file changed, 17 insertions(+), 17 deletions(-)

commit f36ca7982f6bd5e9827219ed4f3c5a1fbf5d7bdf
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-13 21:21:54 +0800

    liblzma: Slightly rewords lzma_str_list_filters() documentation.
    
    Reword "options required" to "supported options". The previous may have
    suggested that the options listed were all required anytime a filter is
    used for encoding or decoding. The reword makes this more clear that
    adjusting the options is optional.

 src/liblzma/api/lzma/filter.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 3374a5359e52f1671d8f831d65827d5020fe2595
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-11 23:49:23 +0800

    liblzma: Adds lzma_nothrow to MicroLZMA API functions.
    
    None of the liblzma functions may throw an exception, so this
    attribute should be applied to all liblzma API functions.

 src/liblzma/api/lzma/container.h | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

commit 8f236574986e7c414c0ea059f441982d1387e6a4
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-09 20:20:06 +0800

    liblzma: Exports lzma_mt_block_size() as an API function.
    
    The lzma_mt_block_size() was previously just an internal function for
    the multithreaded .xz encoder. It is used to provide a recommended Block
    size for a given filter chain.
    
    This function is helpful to determine the maximum Block size for the
    multithreaded .xz encoder when one wants to change the filters between
    blocks. Then, this determined Block size can be provided to
    lzma_stream_encoder_mt() in the lzma_mt options parameter when
    intializing the coder. This requires one to know all the filter chains
    they are using before starting to encode (or at least the filter chain
    that will need the largest Block size), but that isn't a bad limitation.

 src/liblzma/api/lzma/container.h       | 28 ++++++++++++++++++++++++++++
 src/liblzma/common/filter_encoder.c    | 16 ++++++++++------
 src/liblzma/common/filter_encoder.h    |  6 +-----
 src/liblzma/common/stream_encoder_mt.c | 20 +++++++++-----------
 src/liblzma/liblzma_generic.map        |  5 +++++
 src/liblzma/liblzma_linux.map          |  5 +++++
 src/liblzma/lzma/lzma2_encoder.c       |  3 +++
 7 files changed, 61 insertions(+), 22 deletions(-)

commit d0f33d672a4da7985ebb5ba8d829f885de49c171
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-08 22:58:09 +0800

    liblzma: Creates IS_ENC_DICT_SIZE_VALID() macro.
    
    This creates an internal liblzma macro to test if the dictionary size
    is valid for encoding.

 src/liblzma/lz/lz_encoder.c | 4 +---
 src/liblzma/lz/lz_encoder.h | 8 ++++++++
 2 files changed, 9 insertions(+), 3 deletions(-)

commit c247d06e1f6cada9a76f4f6225cbd97ea760f52f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-02 20:39:56 +0800

    Add NEWS for 5.4.3.

 NEWS | 10 ++++++++++
 1 file changed, 10 insertions(+)

commit 77050b78364ffb6b0f129e742b7c31602d725c08
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-02 20:39:37 +0800

    Add NEWS for 5.2.12.

 NEWS | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

commit 713e15e43eb6279a7ab4bbad3d1325ebfdcf09a0
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-04 20:38:52 +0800

    Translations: Update the Croatian translation.

 po/hr.po | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit 9ad64bdf309844b6ca6c3e8a4dfb6dbaedda0ca9
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-04 20:30:25 +0800

    tuklib_integer.h: Reverts previous commit.
    
    Previous commit 6be460dde07113fe3f08f814b61ddc3264125a96 would cause an
    error if the integer size was 32 bit.

 src/common/tuklib_integer.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 6be460dde07113fe3f08f814b61ddc3264125a96
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-05-04 19:25:20 +0800

    tuklib_integer.h: Changes two other UINT_MAX == UINT32_MAX to >=.

 src/common/tuklib_integer.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 44c0c5eae990a22ef04e9b88c1a15838a0d00878
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-05-03 22:46:42 +0300

    tuklib_integer.h: Fix a recent copypaste error in Clang detection.
    
    Wrong line was changed in 7062348bf35c1e4cbfee00ad9fffb4a21aa6eff7.
    Also, this has >= instead of == since ints larger than 32 bits would
    work too even if not relevant in practice.

 src/common/tuklib_integer.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 2cf5ae5b5b279b0b2e69ca4724e7bd705865fe68
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-25 20:06:15 +0800

    CI: Adds a build and test for small configuration.

 .github/workflows/ci.yml | 5 +++++
 1 file changed, 5 insertions(+)

commit 16b81a057a87c2f18e6ed6447f003af0cbdcfe43
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-25 20:05:26 +0800

    CI: ci_build.sh allows configuring small build.

 build-aux/ci_build.sh | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

commit 78ccd93951f9e988d447bcdd70b24f6df5448d1d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-20 20:15:00 +0800

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit f41df2ac2fed347d3f107f3533e76e000d29c6cb
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-19 22:22:16 +0800

    Windows: Include <intrin.h> when needed.
    
    Legacy Windows did not need to #include <intrin.h> to use the MSVC
    intrinsics. Newer versions likely just issue a warning, but the MSVC
    documentation says to include the header file for the intrinsics we use.
    
    GCC and Clang can "pretend" to be MSVC on Windows, so extra checks are
    needed in tuklib_integer.h to only include <intrin.h> when it will is
    actually needed.

 src/common/tuklib_integer.h    |  6 ++++++
 src/liblzma/common/memcmplen.h | 10 ++++++++++
 2 files changed, 16 insertions(+)

commit 7062348bf35c1e4cbfee00ad9fffb4a21aa6eff7
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-19 21:59:03 +0800

    tuklib_integer: Use __builtin_clz() with Clang.
    
    Clang has support for __builtin_clz(), but previously Clang would
    fallback to either the MSVC intrinsic or the regular C code. This was
    discovered due to a bug where a new version of Clang required the
    <intrin.h> header file in order to use the MSVC intrinsics.
    
    Thanks to Anton Kochkov for notifying us about the bug.

 src/common/tuklib_integer.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit 3938718ce3773c90755785c0df8777f133b7ae29
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-04-14 18:42:33 +0300

    liblzma: Update project maintainers in lzma.h.
    
    AUTHORS was updated earlier, lzma.h was simply forgotten.

 src/liblzma/api/lzma.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 2a89670ab295e377f8b44f5bda6d198deb8ea285
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-13 20:45:19 +0800

    liblzma: Cleans up old commented out code.

 src/liblzma/common/alone_encoder.c | 11 -----------
 1 file changed, 11 deletions(-)

commit 0fbb2b87a7b5a1dd9d0f4a5e84ac7919557dbe81
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-07 20:46:41 +0800

    Docs: Add missing word to SECURITY.md.

 .github/SECURITY.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit fb9c50f38a17bf37581de4034b36c8df8ec90a87
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-07 20:43:22 +0800

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 537c6cd8a9db0dd6b13683e64ddac2943190d715
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-04-07 20:42:12 +0800

    Docs: Minor edits to SECURITY.md.

 .github/SECURITY.md | 25 ++++++++++++++++++++-----
 1 file changed, 20 insertions(+), 5 deletions(-)

commit 6549df8dd53f358345957e232648fdb699930074
Author: Gabriela Gutierrez <gabigutierrez@google.com>
Date:   2023-04-07 12:08:30 +0000

    Docs: Create SECURITY.md
    
    Signed-off-by: Gabriela Gutierrez <gabigutierrez@google.com>

 .github/SECURITY.md | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

commit d0faa85df5a5d253a4625d45313cf5e9277e6cd2
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-28 22:48:24 +0800

    CI: Tests for disabling threading on CMake builds.

 .github/workflows/ci.yml | 3 ---
 build-aux/ci_build.sh    | 4 ++--
 2 files changed, 2 insertions(+), 5 deletions(-)

commit 8be5cc3b1359d88b4b30a39067466c0ae0bfbc4d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-28 22:45:42 +0800

    CI: Removes CMakeCache.txt between builds.
    
    If the cache file is not removed, CMake will not reset configurations
    back to their default values. In order to make the tests independent, it
    is simplest to purge the cache. Unfortunatly, this will slow down the
    tests a little and repeat some checks.

 build-aux/ci_build.sh | 2 ++
 1 file changed, 2 insertions(+)

commit 2cb6028fc31de082b7f927632363bb1426b61aaa
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-28 22:32:40 +0800

    CMake: Update liblzma-config.cmake generation.
    
    Now that the threading is configurable, the liblzma CMake package only
    needs the threading library when using POSIX threads.

 CMakeLists.txt | 33 ++++++++++++++++++++++-----------
 1 file changed, 22 insertions(+), 11 deletions(-)

commit 4d7fac0b07cc722825ba8d7838c558827e635611
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-28 22:25:33 +0800

    CMake: Allows setting thread method.
    
    The thread method is now configurable for the CMake build. It matches
    the Autotools build by allowing ON (pick the best threading method),
    OFF (no threading), posix, win95, and vista. If both Windows and
    posix threading are both available, then ON will choose Windows
    threading. Windows threading will also not use:
    
    target_link_libraries(liblzma Threads::Threads)
    
    since on systems like MinGW-w64 it would link the posix threads
    without purpose.

 CMakeLists.txt | 144 +++++++++++++++++++++++++++++++++++++++++----------------
 1 file changed, 104 insertions(+), 40 deletions(-)

commit 20cd905d898c1494dee42b78530769bb9c9f8076
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-24 23:05:48 +0800

    CI: Runs CMake feature tests.
    
    Now, CMake will run similar feature disable tests that the Autotools
    version did before. In order to do this without repeating lines in
    ci.yml, it now makes sense to use the GitHub Workflow matrix to create
    a loop.

 .github/workflows/ci.yml | 169 +++++++++++++++--------------------------------
 1 file changed, 55 insertions(+), 114 deletions(-)

commit 4fabdb269f1fc5624b3b94a170c4efb329d1d229
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-24 20:35:11 +0800

    CI: ci_build.sh allows CMake features to be configured.
    
    Also included various clean ups for style and helper functions for
    repeated work.

 build-aux/ci_build.sh | 233 +++++++++++++++++++++++++++++++-------------------
 1 file changed, 143 insertions(+), 90 deletions(-)

commit cf3d1f130e50cf63da4bb1031771605f6f443b6a
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-24 20:06:33 +0800

    CI: Change ci_build.sh to use bash instead of sh.
    
    This script is only meant to be run as part of the CI build/test process
    on machines that are known to have bash (Ubuntu and MacOS). If this
    assumption changes in the future, then the bash specific commands will
    need to be replaced with a more portable option. For now, it is
    convenient to use bash commands.

 build-aux/ci_build.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit ddfe164368e779c40d061aa4ccc376129e92f8e1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-24 20:05:59 +0800

    CMake: Only build xzdec if decoders are enabled.

 CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 116e81f002c503d3c3cd12726db8f9116e58ef25
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-22 15:42:04 +0800

    Build: Removes redundant check for LZMA1 filter support.

 src/liblzma/lzma/Makefile.inc | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

commit 0ba234f692772595329d225462d391fe2c199d0a
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-23 15:14:29 +0200

    CMake: Bump maximum policy version to 3.26.
    
    It adds only one new policy related to FOLDERS which we don't use.
    This makes it clear that the code is compatible with the policies
    up to 3.26.

 CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit b0891684b4436aed31510fddcbb218d513bd5489
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-21 23:36:00 +0800

    CMake: Conditionally build xz list.* files if decoders are enabled.

 CMakeLists.txt | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

commit 2c1a830efb61d9d65906a09c9ee3ce27c2c49227
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-25 11:46:50 +0800

    CMake: Allow configuring features as cache variables.
    
    This allows users to change the features they build either in
    CMakeCache.txt or by using a CMake GUI. The sources built for
    liblzma are affected by this too, so only the necessary files
    will be compiled.

 CMakeLists.txt | 528 ++++++++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 391 insertions(+), 137 deletions(-)

commit 8be136f667aaeb8f9e16fbd57a83cb282f0c27ff
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-21 14:07:51 +0200

    Build: Add a comment that AC_PROG_CC_C99 is needed for Autoconf 2.69.
    
    It's obsolete in Autoconf >= 2.70 and just an alias for AC_PROG_CC
    but Autoconf 2.69 requires AC_PROG_CC_C99 to get a C99 compiler.

 configure.ac | 3 +++
 1 file changed, 3 insertions(+)

commit 53cc475f2652d9e390ca002018dfd0af0626ef80
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-21 14:04:37 +0200

    Build: configure.ac: Use AS_IF and AS_CASE where required.
    
    This makes no functional difference in the generated configure
    (at least with the Autotools versions I have installed) but this
    change might prevent future bugs like the one that was just
    fixed in the commit 5a5bd7f871818029d5ccbe189f087f591258c294.

 configure.ac | 30 +++++++++++++++---------------
 1 file changed, 15 insertions(+), 15 deletions(-)

commit 3b8890a40233b6c783bb101ec14405e786871775
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-21 13:12:03 +0200

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 5a5bd7f871818029d5ccbe189f087f591258c294
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-21 13:11:49 +0200

    Build: Fix --disable-threads breaking the building of shared libs.
    
    This is broken in the releases 5.2.6 to 5.4.2. A workaround
    for these releases is to pass EGREP='grep -E' as an argument
    to configure in addition to --disable-threads.
    
    The problem appeared when m4/ax_pthread.m4 was updated in
    the commit 6629ed929cc7d45a11e385f357ab58ec15e7e4ad which
    introduced the use of AC_EGREP_CPP. AC_EGREP_CPP calls
    AC_REQUIRE([AC_PROG_EGREP]) to set the shell variable EGREP
    but this was only executed if POSIX threads were enabled.
    Libtool code also has AC_REQUIRE([AC_PROG_EGREP]) but Autoconf
    omits it as AC_PROG_EGREP has already been required earlier.
    Thus, if not using POSIX threads, the shell variable EGREP
    would be undefined in the Libtool code in configure.
    
    ax_pthread.m4 is fine. The bug was in configure.ac which called
    AX_PTHREAD conditionally in an incorrect way. Using AS_CASE
    ensures that all AC_REQUIREs get always run.
    
    Thanks to Frank Busse for reporting the bug.
    Fixes: https://github.com/tukaani-project/xz/issues/45

 configure.ac | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

commit dfe1710784c0a3c3a90c17b80c9e1fe19b5fce06
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-19 22:45:59 +0200

    liblzma: Silence -Wsign-conversion in SSE2 code in memcmplen.h.
    
    Thanks to Christian Hesse for reporting the issue.
    Fixes: https://github.com/tukaani-project/xz/issues/44

 src/liblzma/common/memcmplen.h | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit f0c580c5fc38bf49a184b48d76c1d8c057d499ce
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-18 22:10:57 +0800

    Add NEWS for 5.4.2.

 NEWS | 48 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 48 insertions(+)

commit af4925e6043113ec9b5f9c0cf13abf2a18ccb1f6
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-18 22:10:12 +0800

    Add NEWS for 5.2.11.

 NEWS | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

commit 5a7b930efa7f9849d8da8397e8e5d8638f92be40
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-18 16:00:54 +0200

    Update the copy of GNU GPLv3 from gnu.org to COPYING.GPLv3.

 COPYING.GPLv3 | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

commit b473a92891f7e991398a3b5eff305f6f2b6d7293
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-18 15:51:57 +0200

    Change a few HTTP URLs to HTTPS.
    
    The xz man page timestamp was intentionally left unchanged.

 INSTALL                    |  2 +-
 README                     |  8 ++++----
 configure.ac               |  2 +-
 dos/INSTALL.txt            |  4 ++--
 src/liblzma/api/lzma.h     |  8 ++++----
 src/liblzma/check/sha256.c |  2 +-
 src/xz/xz.1                |  2 +-
 windows/INSTALL-MinGW.txt  | 10 +++++-----
 8 files changed, 19 insertions(+), 19 deletions(-)

commit 8b2f6001b4f412c259a7883427f2f2c8cea98ea8
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-18 00:40:28 +0800

    CMake: Fix typo in a comment.

 CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 76e2315e14c399c15cc90e7930fd4d3d086b0227
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-17 18:36:22 +0200

    Windows: build.bash: Copy liblzma API docs to the output package.

 windows/build.bash | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit 133cf55edc5ce92952d2709abd992e48ef1f45ee
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-17 08:53:38 +0200

    Windows: Add microlzma_*.c to the VS project files.
    
    These should have been included in 5.3.2alpha already.

 windows/vs2013/liblzma.vcxproj     | 2 ++
 windows/vs2013/liblzma_dll.vcxproj | 2 ++
 windows/vs2017/liblzma.vcxproj     | 2 ++
 windows/vs2017/liblzma_dll.vcxproj | 2 ++
 windows/vs2019/liblzma.vcxproj     | 2 ++
 windows/vs2019/liblzma_dll.vcxproj | 2 ++
 6 files changed, 12 insertions(+)

commit 75c9ca450fab6982fda9286b168081c9d54126cd
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-17 08:43:51 +0200

    CMake: Add microlzma_*.c to the build.
    
    These should have been included in 5.3.2alpha already.

 CMakeLists.txt | 2 ++
 1 file changed, 2 insertions(+)

commit 0cc3313bd4e569c51e686e5aab8c40c35241d34b
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-17 08:41:36 +0200

    Build: Update comments about unaligned access to mention 64-bit.

 cmake/tuklib_integer.cmake | 7 +++----
 m4/tuklib_integer.m4       | 4 ++--
 2 files changed, 5 insertions(+), 6 deletions(-)

commit 5e57e3301319f20c35f8111dea73fa58403b96b1
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-17 00:02:30 +0200

    Tests: Update .gitignore.

 .gitignore | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit 0007394d54e21bf30abb9a5e09cbc1e8d44a73ac
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-14 20:04:03 +0200

    po4a/update-po: Display the script name consistently in error messages.

 po4a/update-po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 509157c80c500426ec853bd992d684ebafc8500c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-17 01:30:36 +0800

    Doc: Rename Doxygen HTML doc directory name liblzma => api.
    
    When the docs are installed, calling the directory "liblzma" is
    confusing since multiple other files in the doc directory are for
    liblzma. This should also make it more natural for distros when they
    package the documentation.

 .gitignore             |  2 +-
 Makefile.am            | 18 +++++++++---------
 PACKAGERS              |  4 ++--
 doxygen/Doxyfile       |  2 +-
 doxygen/update-doxygen | 18 +++++++++---------
 5 files changed, 22 insertions(+), 22 deletions(-)

commit fd90e2f4c29180b44e33c7ef726f94e4eae54ed3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-16 22:07:15 +0800

    liblzma: Remove note from lzma_options_bcj about the ARM64 exception.
    
    This was left in by mistake since an early version of the ARM64 filter
    used a different struct for its options.

 src/liblzma/api/lzma/bcj.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 4f50763b981f9056c5f1763dfb26cfa4a26a181d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-16 21:44:02 +0800

    CI: Add doxygen as a dependency.
    
    Autogen now requires --no-doxygen or having doxygen installed to run
    without errors.

 .github/workflows/ci.yml | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

commit f68f4b27f62f53fdac570885a1f4f23367ce6599
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-15 19:19:13 +0200

    COPYING: Add a note about the included Doxygen-generated HTML.

 COPYING | 11 +++++++++++
 1 file changed, 11 insertions(+)

commit 8979308528c1f45cb9ee52d511f05232b4ad90a1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-16 21:41:09 +0800

    Doc: Update PACKAGERS with details about liblzma API docs install.

 PACKAGERS | 22 ++++++++++++++++------
 1 file changed, 16 insertions(+), 6 deletions(-)

commit 55ba6e93004842ae0a0792214a23504267ad8f43
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-16 21:38:32 +0800

    liblzma: Add set lzma.h as the main page for Doxygen documentation.
    
    The \mainpage command is used in the first block of comments in lzma.h.
    This changes the previously nearly empty index.html to use the first
    comment block in lzma.h for its contents.
    
    lzma.h is no longer documented separately, but this is for the better
    since lzma.h only defined a few macros that users do not need to use.
    The individual API header files all have a disclaimer that they should
    not be #included directly, so there should be no confusion on the fact
    that lzma.h should be the only header used by applications.
    
    Additionally, the note "See ../lzma.h for information about liblzma as
    a whole." was removed since lzma.h is now the main page of the
    generated HTML and does not have its own page anymore. So it would be
    confusing in the HTML version and was only a "nice to have" when
    browsing the source files.

 src/liblzma/api/lzma.h              | 1 +
 src/liblzma/api/lzma/base.h         | 2 --
 src/liblzma/api/lzma/bcj.h          | 2 --
 src/liblzma/api/lzma/block.h        | 2 --
 src/liblzma/api/lzma/check.h        | 2 --
 src/liblzma/api/lzma/container.h    | 2 --
 src/liblzma/api/lzma/delta.h        | 2 --
 src/liblzma/api/lzma/filter.h       | 2 --
 src/liblzma/api/lzma/hardware.h     | 2 --
 src/liblzma/api/lzma/index.h        | 2 --
 src/liblzma/api/lzma/index_hash.h   | 4 +---
 src/liblzma/api/lzma/lzma12.h       | 2 --
 src/liblzma/api/lzma/stream_flags.h | 2 --
 src/liblzma/api/lzma/version.h      | 2 --
 src/liblzma/api/lzma/vli.h          | 2 --
 15 files changed, 2 insertions(+), 29 deletions(-)

commit 16f21255597f6a57e5692780f962cdc090f62b8c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-16 21:37:32 +0800

    Build: Generate doxygen documentation in autogen.sh.
    
    Another command line option (--no-doxygen) was added to disable
    creating the doxygen documenation in cases where it not wanted or
    if the doxygen tool is not installed.

 autogen.sh | 35 +++++++++++++++++++++++++++++------
 1 file changed, 29 insertions(+), 6 deletions(-)

commit 1321852a3be7196bd7fcfd146221a5669e46407c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-16 21:35:55 +0800

    Build: Create doxygen/update-doxygen script.
    
    This is a helper script to generate the Doxygen documentation. It can be
    run in 'liblzma' or 'internal' mode by setting the first argument. It
    will default to 'liblzma' mode and only generate documentation for the
    liblzma API header files.
    
    The helper script will be run during the custom mydist hook when we
    create releases. This hook already alters the source directory, so its
    fine to do it here too. This way, we can include the Doxygen generated
    files in the distrubtion and when installing.
    
    In 'liblzma' mode, the JavaScript is stripped from the .html files and
    the .js files are removed. This avoids license hassle from jQuery and
    other libraries that Doxygen 1.9.6 puts into jquery.js in minified form.

 Makefile.am            |   1 +
 doxygen/update-doxygen | 111 +++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 112 insertions(+)

commit b1216a7772952d2fe7fe9c6acfcbd98d30abbc7b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-16 21:34:36 +0800

    Build: Install Doxygen docs and include in distribution if generated.
    
    Added a install-data-local target to install the Doxygen documentation
    only when it has been generated. In order to correctly remove the docs,
    a corresponding uninstall-local target was added.
    
    If the doxygen docs exist in the source tree, they will also be included
    in the distribution now too.

 Makefile.am | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

commit c97d12f300b2a94c9f54a44c8931c8bc08cf0a73
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-16 21:23:48 +0800

    Doxygen: Refactor Doxyfile.in to doxygen/Doxyfile.
    
    Instead of having Doxyfile.in configured by Autoconf, the Doxyfile
    can have the tags that need to be configured piped into the doxygen
    command through stdin with the overrides after Doxyfile's contents.
    
    Going forward, the documentation should be generated in two different
    modes: liblzma or internal.
    
    liblzma is useful for most users. It is the documentation for just
    the liblzma API header files. This is the default.
    
    internal is for people who want to understand how xz and liblzma work.
    It might be useful for people who want to contribute to the project.

 .gitignore                      |   3 +-
 Makefile.am                     |   1 -
 configure.ac                    |  40 ---
 Doxyfile.in => doxygen/Doxyfile | 721 +++++++++++++++++++++++++---------------
 4 files changed, 456 insertions(+), 309 deletions(-)

commit 1b7661faa4bbf4a54c6b75900b5059835c382a0f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-28 23:22:36 +0800

    Tests: Remove unused macros and functions.

 tests/tests.h | 75 -----------------------------------------------------------
 1 file changed, 75 deletions(-)

commit af55191102f01e76de658c881299f0909ca0feda
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-29 21:52:15 +0800

    liblzma: Defines masks for return values from lzma_index_checks().

 src/liblzma/api/lzma/index.h | 23 +++++++++++++++++++++++
 tests/test_index.c           | 22 +++++++++++-----------
 2 files changed, 34 insertions(+), 11 deletions(-)

commit 8f38cdd9ab71e2a9d5a9787550222b7578243b73
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-12 22:29:07 +0800

    Tests: Refactors existing lzma_index tests.
    
    Converts the existing lzma_index tests into tuktests and covers every
    API function from index.h except for lzma_file_info_decoder, which can
    be tested in the future.

 tests/test_index.c | 2036 ++++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 1492 insertions(+), 544 deletions(-)

commit 717aa3651ce582807f379d8654c2516e1594df77
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-11 18:42:08 +0200

    xz: Simplify the error-label in Capsicum sandbox code.
    
    Also remove unneeded "sandbox_allowed = false;" as this code
    will never be run more than once (making it work with multiple
    input files isn't trivial).

 src/xz/file_io.c | 27 ++++++++++++---------------
 1 file changed, 12 insertions(+), 15 deletions(-)

commit a0eecc235d3ba8ad3453da98b46c7bc3e644de75
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-03-07 19:59:23 +0200

    xz: Make Capsicum sandbox more strict with stdin and stdout.

 src/xz/file_io.c | 8 ++++++++
 1 file changed, 8 insertions(+)

commit 916448d624aaf55cef0fc3e53754affb8c4f309d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-08 23:08:46 +0800

    Revert: "Add warning if Capsicum sandbox system calls are unsupported."
    
    The warning causes the exit status to be 2, so this will cause problems
    for many scripted use cases for xz. The sandbox usage is already very
    limited already, so silently disabling this allows it to be more usable.

 src/xz/file_io.c | 10 ++++------
 1 file changed, 4 insertions(+), 6 deletions(-)

commit 01587dda2a8f13fef7e12fd624e6d05da5f9624f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-07 20:02:22 +0800

    xz: Fix -Wunused-label in io_sandbox_enter().
    
    Thanks to Xin Li for recommending the fix.

 src/xz/file_io.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 5fb936786601a1cd013a5d436adde65982b1e13c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-06 21:37:45 +0800

    xz: Add warning if Capsicum sandbox system calls are unsupported.
    
    The warning is only used when errno == ENOSYS. Otherwise, xz still
    issues a fatal error.

 src/xz/file_io.c | 2 ++
 1 file changed, 2 insertions(+)

commit 61ee82cb1232a402c82282bbae42821f2b952b0d
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-06 21:27:53 +0800

    xz: Skip Capsicum sandbox system calls when they are unsupported.
    
    If a system has the Capsicum header files but does not actually
    implement the system calls, then this would render xz unusable. Instead,
    we can check if errno == ENOSYS and not issue a fatal error.

 src/xz/file_io.c | 22 +++++++++++++++++-----
 1 file changed, 17 insertions(+), 5 deletions(-)

commit f070722b57ba975a0dff36492d766f03026b1d21
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-03-06 21:08:26 +0800

    xz: Reorder cap_enter() to beginning of capsicum sandbox code.
    
    cap_enter() puts the process into the sandbox. If later calls to
    cap_rights_limit() fail, then the process can still have some extra
    protections.

 src/xz/file_io.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit f1ab1f6b339d16a53ac53efeb97779ecd2bae70f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-24 23:46:23 +0800

    liblzma: Clarify lzma_lzma_preset() documentation in lzma12.h.
    
    lzma_lzma_preset() does not guarentee that the lzma_options_lzma are
    usable in an encoder even if it returns false (success). If liblzma
    is built with default configurations, then the options will always be
    usable. However if the match finders hc3, hc4, or bt4 are disabled, then
    the options may not be usable depending on the preset level requested.
    
    The documentation was updated to reflect this complexity, since this
    behavior was unclear before.

 src/liblzma/api/lzma/lzma12.h | 5 +++++
 1 file changed, 5 insertions(+)

commit 4b7fb3bf41a0ca4c97fad3799949a2aa61b13b99
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-02-27 18:38:35 +0200

    CMake: Require that the C compiler supports C99 or a newer standard.
    
    Thanks to autoantwort for reporting the issue and suggesting
    a different patch:
    https://github.com/tukaani-project/xz/pull/42

 CMakeLists.txt | 8 ++++++++
 1 file changed, 8 insertions(+)

commit 9aa7fdeb04c486d2700967090956af88fdccab7e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-24 18:10:37 +0800

    Tests: Small tweak to test-vli.c.
    
    The static global variables can be disabled if encoders and decoders
    are not built. If they are not disabled and -Werror is used, it will
    cause an usused warning as an error.

 tests/test_vli.c | 2 ++
 1 file changed, 2 insertions(+)

commit 3cf72c4bcba5370f07477c9b9b62ae33069ef9a9
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-06 21:46:43 +0800

    liblzma: Replace '\n' -> newline in filter.h documentation.
    
    The '\n' renders as a newline when the comments are converted to html
    by Doxygen.

 src/liblzma/api/lzma/filter.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 002006be62d77c706565fa6ec828bea64be302da
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-06 21:45:37 +0800

    liblzma: Shorten return description for two functions in filter.h.
    
    Shorten the description for lzma_raw_encoder_memusage() and
    lzma_raw_decoder_memusage().

 src/liblzma/api/lzma/filter.h | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

commit 463d9359b8595f01d44ada1739d75aeb87f36524
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-06 21:44:45 +0800

    liblzma: Reword a few lines in filter.h

 src/liblzma/api/lzma/filter.h | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

commit 01441df92c0fd6a6c02fe5ac27982a54ce887cc0
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-06 21:35:06 +0800

    liblzma: Improve documentation in filter.h.
    
    All functions now explicitly specify parameter and return values.
    The notes and code annotations were moved before the parameter and
    return value descriptions for consistency.
    
    Also, the description above lzma_filter_encoder_is_supported() about
    not being able to list available filters was removed since
    lzma_str_list_filters() will do this.

 src/liblzma/api/lzma/filter.h | 226 ++++++++++++++++++++++++++----------------
 1 file changed, 143 insertions(+), 83 deletions(-)

commit 805b45cd60bfd5da3d3d89077de3789df179b324
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-02-23 20:46:16 +0200

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 30e95bb44c36ae26b2ab12a94343b215fec285e7
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-02-21 22:57:10 +0200

    liblzma: Avoid null pointer + 0 (undefined behavior in C).
    
    In the C99 and C17 standards, section 6.5.6 paragraph 8 means that
    adding 0 to a null pointer is undefined behavior. As of writing,
    "clang -fsanitize=undefined" (Clang 15) diagnoses this. However,
    I'm not aware of any compiler that would take advantage of this
    when optimizing (Clang 15 included). It's good to avoid this anyway
    since compilers might some day infer that pointer arithmetic implies
    that the pointer is not NULL. That is, the following foo() would then
    unconditionally return 0, even for foo(NULL, 0):
    
        void bar(char *a, char *b);
    
        int foo(char *a, size_t n)
        {
            bar(a, a + n);
            return a == NULL;
        }
    
    In contrast to C, C++ explicitly allows null pointer + 0. So if
    the above is compiled as C++ then there is no undefined behavior
    in the foo(NULL, 0) call.
    
    To me it seems that changing the C standard would be the sane
    thing to do (just add one sentence) as it would ensure that a huge
    amount of old code won't break in the future. Based on web searches
    it seems that a large number of codebases (where null pointer + 0
    occurs) are being fixed instead to be future-proof in case compilers
    will some day optimize based on it (like making the above foo(NULL, 0)
    return 0) which in the worst case will cause security bugs.
    
    Some projects don't plan to change it. For example, gnulib and thus
    many GNU tools currently require that null pointer + 0 is defined:
    
        https://lists.gnu.org/archive/html/bug-gnulib/2021-11/msg00000.html
    
        https://www.gnu.org/software/gnulib/manual/html_node/Other-portability-assumptions.html
    
    In XZ Utils null pointer + 0 issue should be fixed after this
    commit. This adds a few if-statements and thus branches to avoid
    null pointer + 0. These check for size > 0 instead of ptr != NULL
    because this way bugs where size > 0 && ptr == NULL will likely
    get caught quickly. None of them are in hot spots so it shouldn't
    matter for performance.
    
    A little less readable version would be replacing
    
        ptr + offset
    
    with
    
        offset != 0 ? ptr + offset : ptr
    
    or creating a macro for it:
    
        #define my_ptr_add(ptr, offset) \
                ((offset) != 0 ? ((ptr) + (offset)) : (ptr))
    
    Checking for offset != 0 instead of ptr != NULL allows GCC >= 8.1,
    Clang >= 7, and Clang-based ICX to optimize it to the very same code
    as ptr + offset. That is, it won't create a branch. So for hot code
    this could be a good solution to avoid null pointer + 0. Unfortunately
    other compilers like ICC 2021 or MSVC 19.33 (VS2022) will create a
    branch from my_ptr_add().
    
    Thanks to Marcin Kowalczyk for reporting the problem:
    https://github.com/tukaani-project/xz/issues/36

 src/liblzma/common/block_decoder.c |  5 ++++-
 src/liblzma/common/block_encoder.c |  7 +++++--
 src/liblzma/common/common.c        | 20 ++++++++++++++------
 src/liblzma/common/index_decoder.c | 13 ++++++++++---
 src/liblzma/common/index_encoder.c | 11 +++++++++--
 src/liblzma/common/index_hash.c    | 13 ++++++++++---
 src/liblzma/common/lzip_decoder.c  |  6 +++++-
 src/liblzma/delta/delta_decoder.c  |  7 ++++++-
 src/liblzma/delta/delta_encoder.c  | 12 ++++++++++--
 src/liblzma/simple/simple_coder.c  |  6 ++++--
 10 files changed, 77 insertions(+), 23 deletions(-)

commit fa9065fac54194fe0407fc7f0cc9633fdce13c21
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-07 00:00:44 +0800

    liblzma: Adjust container.h for consistency with filter.h.

 src/liblzma/api/lzma/container.h | 20 +++++++++-----------
 1 file changed, 9 insertions(+), 11 deletions(-)

commit 00a721b63d82dfb658dca8d8cb599d8a245c663f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-07 00:00:09 +0800

    liblzma: Fix small typos and reword a few things in filter.h.

 src/liblzma/api/lzma/container.h | 13 ++++++-------
 1 file changed, 6 insertions(+), 7 deletions(-)

commit 5b1c171d4ffe89ef18fa31509bb0185d6fd11d39
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-06 23:42:08 +0800

    liblzma: Convert list of flags in lzma_mt to bulleted list.

 src/liblzma/api/lzma/container.h | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

commit dbd47622eb99fefb3538a22baec3def002aa56f5
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-26 23:17:41 +0800

    liblzma: Fix typo in documentation in container.h
    
    lzma_microlzma_decoder -> lzma_microlzma_encoder

 src/liblzma/api/lzma/container.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 14cd30806d69e55906073745bcce3ee50e0ec942
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-26 23:16:34 +0800

    liblzma: Improve documentation for container.h
    
    Standardizing each function to always specify parameters and return
    values. Also moved the parameters and return values to the end of each
    function description.

 src/liblzma/api/lzma/container.h | 146 +++++++++++++++++++++++++--------------
 1 file changed, 93 insertions(+), 53 deletions(-)

commit c9c8bfae3502842dcead85eeb2b951b437c2cd88
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-22 20:59:41 +0800

    CMake: Add LZIP decoder test to list of tests.

 CMakeLists.txt | 1 +
 1 file changed, 1 insertion(+)

commit b9f171dd00a3cc32b6d41ea8e082cf545640ec2a
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-02-17 20:56:49 +0200

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 2ee86d20e49985b903b78ebcfa3fa672e73e93aa
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-02-17 20:48:28 +0200

    Build: Use only the generic symbol versioning on MicroBlaze.
    
    On MicroBlaze, GCC 12 is broken in sense that
    __has_attribute(__symver__) returns true but it still doesn't
    support the __symver__ attribute even though the platform is ELF
    and symbol versioning is supported if using the traditional
    __asm__(".symver ...") method. Avoiding the traditional method is
    good because it breaks LTO (-flto) builds with GCC.
    
    See also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101766
    
    For now the only extra symbols in liblzma_linux.map are the
    compatibility symbols with the patch that spread from RHEL/CentOS 7.
    These require the use of __symver__ attribute or __asm__(".symver ...")
    in the C code. Compatibility with the patch from CentOS 7 doesn't
    seem valuable on MicroBlaze so use liblzma_generic.map on MicroBlaze
    instead. It doesn't require anything special in the C code and thus
    no LTO issues either.
    
    An alternative would be to detect support for __symver__
    attribute in configure.ac and CMakeLists.txt and fall back
    to __asm__(".symver ...") but then LTO would be silently broken
    on MicroBlaze. It sounds likely that MicroBlaze is a special
    case so let's treat it as a such because that is simpler. If
    a similar issue exists on some other platform too then hopefully
    someone will report it and this can be reconsidered.
    
    (This doesn't do the same fix in CMakeLists.txt. Perhaps it should
    but perhaps CMake build of liblzma doesn't matter much on MicroBlaze.
    The problem breaks the build so it's easy to notice and can be fixed
    later.)
    
    Thanks to Vincent Fazio for reporting the problem and proposing
    a patch (in the end that solution wasn't used):
    https://github.com/tukaani-project/xz/pull/32

 configure.ac | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

commit d831072cceca458d94d2d5da201862f6d43a417b
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-02-16 21:09:00 +0200

    liblzma: Very minor API doc tweaks.
    
    Use "member" to refer to struct members as that's the term used
    by the C standard.
    
    Use lzma_options_delta.dist and such in docs so that in Doxygen's
    HTML output they will link to the doc of the struct member.
    
    Clean up a few trailing white spaces too.

 src/liblzma/api/lzma/block.h        |  6 +++---
 src/liblzma/api/lzma/delta.h        |  6 +++---
 src/liblzma/api/lzma/index.h        | 10 +++++-----
 src/liblzma/api/lzma/stream_flags.h |  6 +++---
 4 files changed, 14 insertions(+), 14 deletions(-)

commit f029daea39c215fd7d5cb6b6798818b055cf5b22
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-17 00:54:33 +0800

    liblzma: Adjust spacing in doc headers in bcj.h.

 src/liblzma/api/lzma/bcj.h | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

commit a5de68bac2bb7e1b9119e6cea7d761a22ea73e9c
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-17 00:44:44 +0800

    liblzma: Adjust documentation in bcj.h for consistent style.

 src/liblzma/api/lzma/bcj.h | 43 ++++++++++++++++++++++---------------------
 1 file changed, 22 insertions(+), 21 deletions(-)

commit efa498c13b883810497e0ea8a169efd6f48f5026
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-17 00:36:05 +0800

    liblzma: Rename field => member in documentation.
    
    Also adjusted preset value => preset level.

 src/liblzma/api/lzma/base.h         | 18 +++++++--------
 src/liblzma/api/lzma/block.h        | 44 ++++++++++++++++++-------------------
 src/liblzma/api/lzma/container.h    | 26 +++++++++++-----------
 src/liblzma/api/lzma/delta.h        | 12 +++++-----
 src/liblzma/api/lzma/index.h        | 30 ++++++++++++-------------
 src/liblzma/api/lzma/lzma12.h       | 28 +++++++++++------------
 src/liblzma/api/lzma/stream_flags.h | 32 +++++++++++++--------------
 7 files changed, 95 insertions(+), 95 deletions(-)

commit 718b22a6c5e3ee5de123323ea798872381f9320e
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-02-16 17:59:50 +0200

    liblzma: Silence a warning from MSVC.
    
    It gives C4146 here since unary minus with unsigned integer
    is still unsigned (which is the intention here). Doing it
    with substraction makes it clearer and avoids the warning.
    
    Thanks to Nathan Moinvaziri for reporting this.

 src/liblzma/check/crc64_fast.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 87c53553fa7d50f777b4edfa99f2083628f590fe
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-16 21:04:54 +0800

     liblzma: Improve documentation for stream_flags.h
    
    Standardizing each function to always specify parameters and return
    values. Also moved the parameters and return values to the end of each
    function description.
    
    A few small things were reworded and long sentences broken up.

 src/liblzma/api/lzma/stream_flags.h | 76 ++++++++++++++++++++++---------------
 1 file changed, 46 insertions(+), 30 deletions(-)

commit 13d99e75a543e9e5f8633cc241eae55b91a3b242
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-14 21:50:16 +0800

    liblzma: Improve documentation in lzma12.h.
    
    All functions now explicitly specify parameter and return values.

 src/liblzma/api/lzma/lzma12.h | 32 +++++++++++++++++++++++---------
 1 file changed, 23 insertions(+), 9 deletions(-)

commit 43ec344c868f930e96879eb9e49212cce92a9884
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-27 22:44:06 +0800

    liblzma: Improve documentation in check.h.
    
    All functions now explicitly specify parameter and return values.
    Also moved the note about SHA-256 functions not being exported to the
    top of the file.

 src/liblzma/api/lzma/check.h | 41 ++++++++++++++++++++++++++++-------------
 1 file changed, 28 insertions(+), 13 deletions(-)

commit 9c71db4e884fd49aea3d1e711036bff45ca66487
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-08 21:33:52 +0800

    liblzma: Improve documentation in index.h
    
    All functions now explicitly specify parameter and return values.

 src/liblzma/api/lzma/index.h | 177 ++++++++++++++++++++++++++++++-------------
 1 file changed, 126 insertions(+), 51 deletions(-)

commit 421f2f2e160720f6009e3b6a125cafe2feaa9419
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-08 20:35:32 +0800

    liblzma: Reword a comment in index.h.

 src/liblzma/api/lzma/index.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit b67539484981351d501b68de5e925425e50c59b1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-08 20:30:23 +0800

    liblzma: Omit lzma_index_iter's internal field from Doxygen docs.
    
    Add \private above this field and its sub-fields since it is not meant
    to be modified by users.

 src/liblzma/api/lzma/index.h | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

commit 0c9e4fc2ad6d88d54f299240fcc5a2ce7d695d96
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-21 21:32:03 +0800

    liblzma: Fix documentation for LZMA_MEMLIMIT_ERROR.
    
    LZMA_MEMLIMIT_ERROR was missing the "<" character needed to put
    documentation after a member.

 src/liblzma/api/lzma/base.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 816fec125aa74bcef46512c73acc6d9e5a700d15
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-21 00:29:38 +0800

    liblzma: Improve documentation for base.h.
    
    Standardizing each function to always specify params and return values.
    Also fixed a small grammar mistake.

 src/liblzma/api/lzma/base.h | 30 +++++++++++++++++++++++++-----
 1 file changed, 25 insertions(+), 5 deletions(-)

commit 862dacef1a4e7e1b28d465956fa4244ed01df154
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-14 00:12:34 +0800

    liblzma: Add one more missing [out] annotation in vli.h

 src/liblzma/api/lzma/vli.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 867b08ae4254bf55dd1f7fd502cc618231b92f75
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-14 00:08:33 +0800

    liblzma: Minor improvements to vli.h.
    
    Added [out] annotations to parameters that are pointers and can have
    their value changed. Also added a clarification to lzma_vli_is_valid.

 src/liblzma/api/lzma/vli.h | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

commit 90d0e628ff11e5030bcc4fc000bca056adda6603
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-10 21:38:02 +0800

    liblzma: Add comments for macros in delta.h.
    
    Document LZMA_DELTA_DIST_MIN and LZMA_DELTA_DIST_MAX for completeness
    and to avoid Doxygen warnings.

 src/liblzma/api/lzma/delta.h | 8 ++++++++
 1 file changed, 8 insertions(+)

commit 9255fffdb13e59874bf7f95c370c410ad3a7e114
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-10 21:35:23 +0800

    liblzma: Improve documentation in index_hash.h.
    
    All functions now explicitly specify parameter and return values.
    Also reworded the description of lzma_index_hash_init() for readability.

 src/liblzma/api/lzma/index_hash.h | 36 +++++++++++++++++++++++++++---------
 1 file changed, 27 insertions(+), 9 deletions(-)

commit 1dbe12b90cff79bb51923733ac0840747b4b4131
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-02-07 19:07:45 +0200

    xz: Improve the comment about start_time in mytime.c.
    
    start_time is relative to an arbitary point in time, it's not
    time of day, so using it for anything else than time differences
    wouldn't make sense.

 src/xz/mytime.c | 15 ++++++++++-----
 1 file changed, 10 insertions(+), 5 deletions(-)

commit 7673ef5aa80c1af7fb693360dd82f527b46c2c56
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-04 21:06:35 +0800

    Build: Adjust CMake version search regex.
    
    Now, the LZMA_VERSION_MAJOR, LZMA_VERSION_MINOR, and LZMA_VERSION_PATCH
    macros do not need to be on consecutive lines in version.h. They can be
    separated by more whitespace, comments, or even other content, as long
    as they appear in the proper order (major, minor, patch).

 CMakeLists.txt | 2 ++
 1 file changed, 2 insertions(+)

commit b8bce89be7fb5bffe5fef4a2782ca9b2b107eaac
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-04 12:01:23 +0800

    xz: Add a comment clarifying the use of start_time in mytime.c.

 src/xz/mytime.c | 5 +++++
 1 file changed, 5 insertions(+)

commit 912af91b10a18fb9bb3167247ecaaefca8248ee9
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-26 09:50:21 +0800

    liblzma: Improve documentation for version.h.
    
    Specified parameter and return values for API functions and documented
    a few more of the macros.

 src/liblzma/api/lzma/version.h | 29 ++++++++++++++++++++++-------
 1 file changed, 22 insertions(+), 7 deletions(-)

commit 850adec171203cd22b57d016084d713f72ae5307
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-03 22:52:55 +0800

    Docs: Omit SIGTSTP not handled from TODO.

 TODO | 4 ----
 1 file changed, 4 deletions(-)

commit 2c78a83c6faec70154d9eb78022a618ed62cdcb3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-03 00:33:32 +0800

    liblzma: Fix bug in lzma_str_from_filters() not checking filters[] length.
    
    The bug is only a problem in applications that do not properly terminate
    the filters[] array with LZMA_VLI_UNKNOWN or have more than
    LZMA_FILTERS_MAX filters. This bug does not affect xz.

 src/liblzma/common/string_conversion.c | 7 +++++++
 1 file changed, 7 insertions(+)

commit e01f01b9af1c074463b92694a16ecc16a31907c0
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-03 00:32:47 +0800

    Tests: Create test_filter_str.c.
    
    Tests lzma_str_to_filters(), lzma_str_from_filters(), and
    lzma_str_list_filters() API functions.

 CMakeLists.txt          |   1 +
 tests/Makefile.am       |   2 +
 tests/test_filter_str.c | 593 ++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 596 insertions(+)

commit 8dfc029e7a4ce45809c30313dc0e502f0d22be26
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-22 08:49:00 +0800

    liblzma: Fix typos in comments in string_conversion.c.

 src/liblzma/common/string_conversion.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 54ad83c1ae2180dcc0cb2445b181dc1e9732a5d6
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-03 00:20:20 +0800

    liblzma: Clarify block encoder and decoder documentation.
    
    Added a few sentences to the description for lzma_block_encoder() and
    lzma_block_decoder() to highlight that the Block Header must be coded
    before calling these functions.

 src/liblzma/api/lzma/block.h | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

commit f680e771b3eb2a46310fe85b3e000ac3a1a0640f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-03 00:12:24 +0800

    Update lzma_block documentation for lzma_block_uncomp_encode().

 src/liblzma/api/lzma/block.h | 3 +++
 1 file changed, 3 insertions(+)

commit 504cf4af895fd45aad0c56eb3b49d90acd54465b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-03 00:11:37 +0800

    liblzma: Minor edits to lzma_block header_size documentation.

 src/liblzma/api/lzma/block.h | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit 115b720fb521f99aa832d06b2c12b7f8c6c50680
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-03 00:11:07 +0800

    liblzma: Enumerate functions that read version in lzma_block.

 src/liblzma/api/lzma/block.h | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

commit 85ea0979adcf808a3830aefbe7a4ec884e542ea1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-03 00:10:34 +0800

    liblzma: Clarify comment in block.h.

 src/liblzma/api/lzma/block.h | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit 1f7ab90d9ce224230a04de6b921ad6e2029023a8
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-03 00:07:23 +0800

    liblzma: Improve documentation for block.h.
    
    Standardizing each function to always specify params and return values.
    Output pointer parameters are also marked with doxygen style [out] to
    make it clear. Any note sections were also moved above the parameter and
    return sections for consistency.

 src/liblzma/api/lzma/block.h | 96 ++++++++++++++++++++++++++++++++++----------
 1 file changed, 75 insertions(+), 21 deletions(-)

commit c563a4bc554a96bd0b6aab3c139715b7ec8f6ca3
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-01 23:38:30 +0800

    liblzma: Clarify a comment about LZMA_STR_NO_VALIDATION.
    
    The flag description for LZMA_STR_NO_VALIDATION was previously confusing
    about the treatment for filters than cannot be used with .xz format
    (lzma1) without using LZMA_STR_ALL_FILTERS. Now, it is clear that
    LZMA_STR_NO_VALIDATION is not a super set of LZMA_STR_ALL_FILTERS.

 src/liblzma/api/lzma/filter.h | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

commit 315c64c7e18acc59a745b68148188a73e998252b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-01 21:43:33 +0800

    CI: Update .gitignore for artifacts directory in build-aux.
    
    The workflow action for our CI pipeline can only reference artifacts in
    the source directory, so we should ignore these files if the ci_build.sh
    is run locally.

 .gitignore | 1 +
 1 file changed, 1 insertion(+)

commit 2c1341f4fa06e7f487d61142aa354c433e17ec7f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-01 21:36:46 +0800

    CI: Add quotes around variables in a few places.

 build-aux/ci_build.sh | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit 3a401b0e0c7a2658af7801dd0690256ef24149e0
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-02-01 21:36:22 +0800

    CI: Upload test logs as artifacts if a test fails.

 .github/workflows/ci.yml | 60 ++++++++++++++++++++++++++++++++++--------------
 build-aux/ci_build.sh    | 31 ++++++++++++++++++++-----
 2 files changed, 68 insertions(+), 23 deletions(-)

commit 610dde15a88f12cc540424eb3eb3ed61f3876f74
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-27 20:02:49 +0200

    xz: Use clock_gettime() even if CLOCK_MONOTONIC isn't available.
    
    mythread.h and thus liblzma already does it.

 src/xz/mytime.c  | 11 ++++++++---
 src/xz/private.h |  3 +--
 2 files changed, 9 insertions(+), 5 deletions(-)

commit 2e02877288f6576cd4595e9ac7684f867cd47d68
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-27 19:41:19 +0200

    po4a/po4a.conf: Sort the language identifiers in alphabetical order.

 po4a/po4a.conf | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit ff592c616eda274215b485cf1b8d34f060c9f3be
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-26 18:29:17 +0200

    xz: Add SIGTSTP handler for progress indicator time keeping.
    
    This way, if xz is stopped the elapsed time and estimated time
    remaining won't get confused by the amount of time spent in
    the stopped state.
    
    This raises SIGSTOP. It's not clear to me if this is the correct way.
    POSIX and glibc docs say that SIGTSTP shouldn't stop the process if
    it is orphaned but this commit doesn't attempt to handle that.
    
    Search for SIGTSTP in section 2.4.3:
    
    https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html

 src/xz/mytime.c  | 56 +++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 src/xz/mytime.h  |  6 ++++++
 src/xz/private.h | 12 ++++++++++++
 src/xz/signals.c | 17 ++++++++++++++++-
 4 files changed, 89 insertions(+), 2 deletions(-)

commit 3b1c8ac8d1d553cbb1fb22b545d2b1424c752b76
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-27 20:14:51 +0800

    Translations: Add Brazilian Portuguese translation of man pages.
    
    Thanks to Rafael Fontenelle.

 po4a/po4a.conf |    2 +-
 po4a/pt_BR.po  | 3677 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 3678 insertions(+), 1 deletion(-)

commit a15a7552f9f67c4e402f5d2967324e0ccfd6fccc
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-26 17:51:06 +0200

    Build: Avoid different quoting style in --enable-doxygen doc.

 configure.ac | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

commit af5a4bd5afc089d9697756dded38feafaa987ae4
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-26 17:39:46 +0200

    tuklib_physmem: Check for __has_warning before GCC version.
    
    Clang can be configured to fake a too high GCC version so
    this way it's more robust.

 src/common/tuklib_physmem.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit f35d98e20609e0be6a04ae2604bfb7cb9d5bd5e4
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-24 20:48:50 +0800

    liblzma: Fix documentation in filter.h for lzma_str_to_filters()
    
    The previous documentation for lzma_str_to_filters() was technically
    correct, but misleading. lzma_str_to_filters() returns NULL on success,
    which is in practice always defined to 0. This is the same value as
    LZMA_OK, but lzma_str_to_filters() does not return lzma_ret so we should
    be more clear.

 src/liblzma/api/lzma/filter.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 2f78ecc5939b3d97ddfc2a6bd31b50108a28d0a2
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-23 23:44:58 +0200

    Revert "tuklib_common: Define __has_warning if it is not defined."
    
    This reverts commit 82e3c968bfa10e3ff13333bd9cbbadb5988d6766.
    
    Macros in the reserved namespace (_foo or __foo) shouldn't be #defined
    without a very good reason. Here the alternative would have been
    to #define tuklib_has_warning(str) to an approriate value.
    
    Also the tuklib_* files should stay namespace clean if possible.

 src/common/tuklib_common.h | 7 -------
 1 file changed, 7 deletions(-)

commit 8366cf8738e8b7bb74c967d07bf0fd2a1878e575
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-23 23:38:34 +0200

    tuklib_physmem: Clean up the way -Wcast-function-type is silenced on Windows.
    
    __has_warning and other __has_foo macros are meant to become
    compiler-agnostic so it's not good to check for __clang__ with it.
    
    This also relied on tuklib_common.h for #defining __has_warning
    which was confusing as #defining reserved macros is generally
    not a good idea.

 src/common/tuklib_physmem.c | 17 +++++++++++++----
 1 file changed, 13 insertions(+), 4 deletions(-)

commit 683a3c7e2fcd922200c31078e5c9dd1348e90941
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-24 00:05:38 +0200

    xz: Flip the return value of suffix_is_set to match the documentation.
    
    Also edit style to match the existing coding style in the project.

 src/xz/args.c   | 6 +++---
 src/xz/suffix.c | 2 +-
 src/xz/suffix.h | 1 +
 3 files changed, 5 insertions(+), 4 deletions(-)

commit cc5aa9ab138beeecaee5a1e81197591893ee9ca0
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-07 21:55:06 +0800

    xz: Refactor duplicated check for custom suffix when using --format=raw

 src/xz/args.c   |  8 ++++++++
 src/xz/suffix.c | 26 ++++++++------------------
 src/xz/suffix.h |  7 +++++++
 3 files changed, 23 insertions(+), 18 deletions(-)

commit 9663141274e01592a281a7f2df5d7a31a1dac8bf
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-20 21:53:14 +0800

    liblzma: Set documentation on all reserved fields to private.
    
    This prevents the reserved fields from being part of the generated
    Doxygen documentation.

 src/liblzma/api/lzma/base.h         | 17 +++++++++++++++
 src/liblzma/api/lzma/block.h        | 43 +++++++++++++++++++++++++++++++++++++
 src/liblzma/api/lzma/container.h    | 24 +++++++++++++++++++++
 src/liblzma/api/lzma/delta.h        | 12 +++++++++++
 src/liblzma/api/lzma/index.h        | 27 +++++++++++++++++++++++
 src/liblzma/api/lzma/lzma12.h       | 22 +++++++++++++++++++
 src/liblzma/api/lzma/stream_flags.h | 28 ++++++++++++++++++++++++
 7 files changed, 173 insertions(+)

commit 6327a045f34d48fc5afc58ba0d32a82c94403049
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-20 21:39:59 +0800

    Doxygen: Update Doxyfile.in from 1.4.7 to 1.8.17.
    
    A few Doxygen tags were obsolete from 1.4.7. Version 1.8.17 released
    in 2019, so this should be compatible with resonable modern distros.
    The purpose of Doxygen these days is for docs on the website, so it
    doesn't necessarily have to work for everyone. Just when the maintainers
    want to update the docs.

 Doxyfile.in | 2523 ++++++++++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 1893 insertions(+), 630 deletions(-)

commit bbf71b69ebf9d0d62a0af150a5c37d193b8159ad
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-03 20:37:30 +0800

    Doxygen: Make Doxygen only produce liblzma API documentation by default.
    
    Doxygen is now configurable in autotools only with
    --enable-doxygen=[api|all]. The default is "api", which will only
    generate HTML output for liblzma API functions. The LaTex documentation
    output was also disabled.

 Doxyfile.in  | 18 +++++++++---------
 configure.ac | 39 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 48 insertions(+), 9 deletions(-)

commit 6fcf4671b6047113c583a0919fc850987a4ec5f4
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-21 23:59:43 +0800

    liblzma: Highlight liblzma API headers should not be included directly.
    
    This improves the generated Doxygen HTML files to better highlight
    how to properly use the liblzma API header files.

 src/liblzma/api/lzma/base.h         | 5 +++--
 src/liblzma/api/lzma/bcj.h          | 5 +++--
 src/liblzma/api/lzma/block.h        | 5 +++--
 src/liblzma/api/lzma/check.h        | 5 +++--
 src/liblzma/api/lzma/container.h    | 5 +++--
 src/liblzma/api/lzma/delta.h        | 5 +++--
 src/liblzma/api/lzma/filter.h       | 5 +++--
 src/liblzma/api/lzma/hardware.h     | 5 +++--
 src/liblzma/api/lzma/index.h        | 5 +++--
 src/liblzma/api/lzma/index_hash.h   | 5 +++--
 src/liblzma/api/lzma/lzma12.h       | 5 +++--
 src/liblzma/api/lzma/stream_flags.h | 5 +++--
 src/liblzma/api/lzma/version.h      | 5 +++--
 src/liblzma/api/lzma/vli.h          | 5 +++--
 14 files changed, 42 insertions(+), 28 deletions(-)

commit b43ff180fb2e372adce876bfa155fc9bcf0c3db4
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-19 20:35:09 +0800

    tuklib_physmem: Silence warning from -Wcast-function-type on MinGW-w64.
    
    tuklib_physmem depends on GetProcAddress() for both MSVC and MinGW-w64
    to retrieve a function address. The proper way to do this is to cast the
    return value to the type of function pointer retrieved. Unfortunately,
    this causes a cast-function-type warning, so the best solution is to
    simply ignore the warning.

 src/common/tuklib_physmem.c | 9 +++++++++
 1 file changed, 9 insertions(+)

commit 82e3c968bfa10e3ff13333bd9cbbadb5988d6766
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-19 20:32:40 +0800

    tuklib_common: Define __has_warning if it is not defined.
    
    clang supports the __has_warning macro to determine if the version of
    clang compiling the code supports a given warning. If we do not define
    it for other compilers, it may cause a preprocessor error.

 src/common/tuklib_common.h | 7 +++++++
 1 file changed, 7 insertions(+)

commit b2ba1a489df451cdcd93b2334e319dd06778de19
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-18 22:11:05 +0800

    CI: Reorder 32-bit build first for Linux autotool builds.
    
    The 32-bit build needs to be first so the configure cache only needs to
    be reset one time. The 32-bit build sets the CFLAGS env variable, so any
    build using that flag after will fail unless the cache is reset.

 .github/workflows/ci.yml | 17 ++++++++++++-----
 1 file changed, 12 insertions(+), 5 deletions(-)

commit dd1c1135741057c91e8d018be9ec4d43968b0e64
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-18 21:51:43 +0800

    CI: Enable --config-cache in autotool builds.
    
    If CFLAGS are set in a build, the cache must be cleared with
    "make distclean", or by deleting the cache file.

 build-aux/ci_build.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit d3e11477053764c003eec2daa5198c747d70ff69
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-16 21:35:45 +0800

    xz: Add missing comment for coder_set_compression_settings()

 src/xz/coder.h | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit 123255b6ed15f4428b2aa92e4962015a5362f6bf
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-16 20:55:10 +0800

    xz: Do not set compression settings with raw format in list mode.
    
    Calling coder_set_compression_settings() in list mode with verbose mode
    on caused the filter chain and memory requirements to print. This was
    unnecessary since the command results in an error and not consistent
    with other formats like lzma and alone.

 src/xz/args.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit 571919c47b9ff5171ede84378620ed0a9aeb98c0
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-13 20:37:06 +0800

    Translations: Update the Brazilian Portuguese translation.

 po/pt_BR.po | 603 ++++++++++++++++++++++++++++++++++--------------------------
 1 file changed, 344 insertions(+), 259 deletions(-)

commit 81cb02e2c22bbc036cdfaa2d2c4176f6bd60d3cf
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-12 23:43:06 +0800

    CI: Disable shared and nls from various jobs in autotool runners.
    
    Disabling shared library generation and linking should help speed up the
    runners. The shared library is still being tested in the 32 bit build
    and the full feature.
    
    Disabling nls is to check for any unexpected warnings or errors.

 .github/workflows/ci.yml | 56 ++++++++++++++++++++++++------------------------
 1 file changed, 28 insertions(+), 28 deletions(-)

commit 58a052198a7bcaf6e958f87fad72e69e19a2579b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-12 23:39:19 +0800

    CI: Reorder the 32-bit job in the Ubuntu runner.
    
    Run the 32 bit job sooner since this is a more interesting test than
    some of the later jobs.

 .github/workflows/ci.yml | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

commit 4110a998b83459fe2bc9bc1bec30ad68afa8f797
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-12 23:09:03 +0800

    CI: Allow disabling Native Language Support.

 build-aux/ci_build.sh | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

commit 0dec634e705b5bf89a37c5d62d71e8511d480058
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-12 23:02:20 +0800

    CI: Only run autogen.sh if it has not already run.

 build-aux/ci_build.sh | 11 ++++++++---
 1 file changed, 8 insertions(+), 3 deletions(-)

commit 32287dc8def94df4546e903495d14c132bd54cc4
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-12 22:58:36 +0800

    CI: Allow disabling shared library in autotools builds.

 build-aux/ci_build.sh | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

commit 77d1ebcc99ddd82a300d1838f608150221931dcd
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-12 22:44:18 +0800

    CI: Improve Usage readability and add -h option.

 build-aux/ci_build.sh | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

commit a8bb8358d10b059274f3cf993d9b8f490bafb268
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 13:04:05 +0200

    Build: Omit -Wmissing-noreturn from the default warnings.
    
    It's not that important. It can be annoying in builds that
    disable many features since in those cases the tests programs
    will correctly trigger this warning with Clang.

 configure.ac | 1 -
 1 file changed, 1 deletion(-)

commit 52dc033d0bde0d19e3912303c6c74bae559d6498
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 06:05:58 +0200

    xz: Use ssize_t for the to-be-ignored return value from write(fd, ptr, 1).
    
    It makes no difference here as the return value fits into an int
    too and it then gets ignored but this looks better.

 src/xz/file_io.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit b1a6d180a363d57b2b1c89526ff3f0782bf863d3
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 06:01:12 +0200

    xz: Silence warnings from -Wsign-conversion in a 32-bit build.

 src/common/tuklib_mbstr_fw.c | 2 +-
 src/xz/list.c                | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

commit 31c21c734b7c7d7428a3da7402a2cb7bc2587339
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 05:38:48 +0200

    liblzma: Silence another warning from -Wsign-conversion in a 32-bit build.
    
    It doesn't warn on a 64-bit system because truncating
    a ptrdiff_t (signed long) to uint32_t is diagnosed under
    -Wconversion by GCC and -Wshorten-64-to-32 by Clang.

 src/liblzma/lz/lz_encoder_mf.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

commit 37fbdfb7263522c11c7ad2685413d6295532581d
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 04:46:45 +0200

    liblzma: Silence a warning from -Wsign-conversion in a 32-bit build.

 src/common/mythread.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 5ce6ddc221d0bfb57d810d845bb65fb0aac0b008
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 04:17:24 +0200

    Build: Make configure add more warning flags for GCC and Clang.
    
    -Wstrict-aliasing was removed from the list since it is enabled
    by -Wall already.
    
    A normal build is clean with these on GNU/Linux x86-64 with
    GCC 12.2.0 and Clang 14.0.6.

 configure.ac | 36 +++++++++++++++++++++++++++++++-----
 1 file changed, 31 insertions(+), 5 deletions(-)

commit bfc3a0a8ac16de90049c1b1ba1445a7626d0230c
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 04:14:18 +0200

    Tests: Fix warnings from clang --Wassign-enum.
    
    Explicitly casting the integer to lzma_check silences the warning.
    Since such an invalid value is needed in multiple tests, a constant
    INVALID_LZMA_CHECK_ID was added to tests.h.
    
    The use of 0x1000 for lzma_block.check wasn't optimal as if
    the underlying type is a char then 0x1000 will be truncated to 0.
    However, in these test cases the value is ignored, thus even with
    such truncation the test would have passed.

 tests/test_block_header.c | 6 +++---
 tests/test_check.c        | 2 +-
 tests/test_stream_flags.c | 8 ++++----
 tests/tests.h             | 9 +++++++++
 4 files changed, 17 insertions(+), 8 deletions(-)

commit 49245bb31e215ad455a1ab85e4ed6783152dc522
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 03:51:07 +0200

    Tests: Silence warnings from -Wsign-conversion.
    
    Note that assigning an unsigned int to lzma_check doesn't warn
    on GNU/Linux x86-64 since the enum type is unsigned on that
    platform. The enum can be signed on some other platform though
    so it's best to use enumeration type lzma_check in these situations.

 tests/test_check.c        |  6 +++---
 tests/test_stream_flags.c | 10 +++++-----
 2 files changed, 8 insertions(+), 8 deletions(-)

commit 3f13bf6b9e8624cbe6d6e3e82d6c98a3ed1ad571
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 03:19:59 +0200

    liblzma: Silence warnings from clang -Wconditional-uninitialized.
    
    This is similar to 2ce4f36f179a81d0c6e182a409f363df759d1ad0.
    The actual initialization of the variables is done inside
    mythread_sync() macro. Clang doesn't seem to see that
    the initialization code inside the macro is always executed.

 src/liblzma/common/stream_decoder_mt.c | 8 +++++---
 src/liblzma/common/stream_encoder_mt.c | 2 +-
 2 files changed, 6 insertions(+), 4 deletions(-)

commit 6c886cc5b3c90c6a75e6be8b1278ec2261e452a6
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 03:11:40 +0200

    Fix warnings from clang -Wdocumentation.

 src/liblzma/check/check.h      | 4 ----
 src/liblzma/lz/lz_encoder_mf.c | 4 ++--
 src/xz/options.c               | 4 ++--
 3 files changed, 4 insertions(+), 8 deletions(-)

commit a0e7fb1c1ea658b67f30517f5d1975efd0226dba
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 03:04:28 +0200

    Tests: test_lzip_decoder: Remove trailing white-space.

 tests/test_lzip_decoder.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit c0f8d6782f29e219fd496dd23f6a033270509d5c
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-12 03:03:55 +0200

    Tests: test_lzip_decoder: Silence warnings from -Wsign-conversion.

 tests/test_lzip_decoder.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

commit 62efd48a825e8f439e84c85e165d8774ddc68fd2
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-11 23:58:16 +0800

    Add NEWS for 5.4.1.

 NEWS | 70 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 70 insertions(+)

commit d1561c47ec8cd3844a785d3741dc932f9b9c5790
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-11 22:46:48 +0800

    xz: Fix warning -Wformat-nonliteral on clang in message.c.
    
    clang and gcc differ in how they handle -Wformat-nonliteral. gcc will
    allow a non-literal format string as long as the function takes its
    format arguments as a va_list.

 src/xz/message.c | 9 +++++++++
 1 file changed, 9 insertions(+)

commit 8c0f115cc489331c48df77beca92fe378039d919
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-11 20:58:31 +0800

    Tests: Fix test_filter_flags copy/paste error.

 tests/test_filter_flags.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 25035813d1d596fde692addc33e7f715f1fe55eb
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-11 20:42:29 +0800

    Tests: Fix type-limits warning in test_filter_flags.
    
    This only occurs in test_filter_flags when the BCJ filters are not
    configured and built. In this case, ARRAY_SIZE() returns 0 and causes a
    type-limits warning with the loop variable since an unsigned number will
    always be >= 0.

 tests/test_filter_flags.c | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

commit 0b8fa310cf56fec55663f62340e49e8e1441594f
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-10 22:14:03 +0200

    liblzma: CLMUL CRC64: Work around a bug in MSVC, second attempt.
    
    This affects only 32-bit x86 builds. x86-64 is OK as is.
    
    I still cannot easily test this myself. The reporter has tested
    this and it passes the tests included in the CMake build and
    performance is good: raw CRC64 is 2-3 times faster than the
    C version of the slice-by-four method. (Note that liblzma doesn't
    include a MSVC-compatible version of the 32-bit x86 assembly code
    for the slice-by-four method.)
    
    Thanks to Iouri Kharon for figuring out a fix, testing, and
    benchmarking.

 src/liblzma/check/crc64_fast.c | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

commit 765354b50c2886fc0d294d6be3b207f7ae2ada70
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-11 01:18:50 +0800

    Tests: Fix unused function warning in test_block_header.
    
    One of the global arrays of filters was only used in a test that
    required both encoders and decoders to be configured in the build.

 tests/test_block_header.c | 4 ++++
 1 file changed, 4 insertions(+)

commit 7c23c05befdcc73231c0d6632a7d943dbeaea1aa
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-11 01:08:03 +0800

    Tests: Fix unused function warning in test_index_hash.
    
    test_index_hash does not use fill_index_hash() unless both encoders
    and decoders are configured in the build.

 tests/test_index_hash.c | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

commit 57464bb4ebd6c00dc8b19803f05ea55ddd0826f6
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-11 00:54:45 +0800

    CI/CD: Add 32-bit build and test steps to Ubuntu autotools runner.
    
    If all goes well, Mac autotools and Linux and Mac CMake will be added
    later for 32-bit builds.

 .github/workflows/ci.yml | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

commit 923eb689a4b863b6cca8df6360d4962aae994edf
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-11 00:51:01 +0800

    CI/CD: Enables warnings as errors in autotool build.
    
    This will help us catch warnings and potential bugs in builds that are
    not often tested by us.

 build-aux/ci_build.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit feae5528a30c006b6e2f96a95116e20b983703fc
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-11 00:48:35 +0800

    CI/CD: Add -f argument to set CFLAGS in ci_build.sh.
    
    For now, the suggested option is for -m32 only, but this can be updated
    later if other flags are deemed useful.

 build-aux/ci_build.sh | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

commit cfabb62a4874c146e7d6f30445637602545bc054
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-10 12:47:16 +0200

    Revert "liblzma: CLMUL CRC64: Workaround a bug in MSVC (VS2015-2022)."
    
    This reverts commit 36edc65ab4cf10a131f239acbd423b4510ba52d5.
    
    It was reported that it wasn't a good enough fix and MSVC
    still produced (different kind of) bad code when building
    for 32-bit x86 if optimizations are enabled.
    
    Thanks to Iouri Kharon.

 src/liblzma/check/crc64_fast.c | 6 ------
 1 file changed, 6 deletions(-)

commit 0b64215170dd3562f207ef26f794755bcd600526
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-10 11:56:11 +0200

    sysdefs.h: Don't include strings.h anymore.
    
    On some platforms src/xz/suffix.c may need <strings.h> for
    strcasecmp() but suffix.c includes the header when it needs it.
    
    Unless there is an old system that otherwise supports enough C99
    to build XZ Utils but doesn't have C89/C90-compatible <string.h>,
    there should be no need to include <strings.h> in sysdefs.h.

 src/common/sysdefs.h | 6 ------
 1 file changed, 6 deletions(-)

commit ec2fc39fe4f4e6e242b3a669585049763968cdeb
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-10 11:23:41 +0200

    xz: Include <strings.h> in suffix.c if needed for strcasecmp().
    
    SUSv2 and POSIX.1‐2017 declare only a few functions in <strings.h>.
    Of these, strcasecmp() is used on some platforms in suffix.c.
    Nothing else in the project needs <strings.h> (at least if
    building on a modern system).
    
    sysdefs.h currently includes <strings.h> if HAVE_STRINGS_H is
    defined and suffix.c relied on this.
    
    Note that dos/config.h doesn't #define HAVE_STRINGS_H even though
    DJGPP does have strings.h. It isn't needed with DJGPP as strcasecmp()
    is also in <string.h> in DJGPP.

 src/xz/suffix.c | 3 +++
 1 file changed, 3 insertions(+)

commit 7049c4a76c805ad27d6cf4ee119a2ef2a7add59f
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-10 10:05:13 +0200

    sysdefs.h: Fix a comment.

 src/common/sysdefs.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 194a5fab69277d9e804a6113b5f676b8666b3a61
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-10 10:04:06 +0200

    sysdefs.h: Don't include memory.h anymore even if it were available.
    
    It quite probably was never needed, that is, any system where memory.h
    was required likely couldn't compile XZ Utils for other reasons anyway.
    
    XZ Utils 5.2.6 and later source packages were generated using
    Autoconf 2.71 which no longer defines HAVE_MEMORY_H. So the code
    being removed is no longer used anyway.

 src/common/sysdefs.h | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

commit 5e34774c31d1b7509b5cb77a3be9973adec59ea0
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-10 08:29:32 +0200

    CMake: Fix appending to CMAKE_RC_FLAGS.
    
    It's a string, not a list. It only worked when the variable was empty.
    
    Thanks to Iouri Kharon.

 CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 6e652ceb18c615c578c869db300fa0756788b4e0
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-10 00:33:14 +0200

    Windows: Update INSTALL-MSVC.txt to recommend CMake over project files.

 windows/INSTALL-MSVC.txt | 19 ++++++++++++-------
 1 file changed, 12 insertions(+), 7 deletions(-)

commit 6b117d3b1fe91eb26d533ab16a2e552f84148d47
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-09 23:41:25 +0200

    CMake: Fix windres issues again.
    
    At least on some systems, GNU windres needs --use-temp-file
    in addition to the \x20 hack to avoid spaces in the command line
    argument. Hovever, that \x20 syntax is broken with llvm-windres
    version 15.0.0 (results in "XZx20Utils") but luckily it works
    with a regular space. Thus it is best to limit the workarounds
    to GNU toolchain on Windows.

 CMakeLists.txt | 35 +++++++++++++++++++++++------------
 1 file changed, 23 insertions(+), 12 deletions(-)

commit 0c210ca7f489e971e94e1ddc72b0b0806e3c7935
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-06 22:53:38 +0200

    Tests: test_filter_flags: Clean up minor issues.
    
    Here are the list of the most significant issues addressed:
    - Avoid using internal common.h header. It's not good to copy the
    constants like this but common.h cannot be included for use outside
    of liblzma. This is the quickest thing to do that could be fixed later.
    
    - Omit the INIT_FILTER macro. Initialization should be done with just
    regular designated initializers.
    
    - Use start_offset = 257 for BCJ tests. It demonstrates that Filter
    Flags encoder and decoder don't validate the options thoroughly.
    257 is valid only for the x86 filter. This is a bit silly but
    not a significant problem in practice because the encoder and
    decoder initialization functions will catch bad alignment still.
    Perhaps this should be fixed but it's not urgent and doesn't need
    to be in 5.4.x.
    
    - Various tweaks to comments such as filter id -> Filter ID

 tests/test_filter_flags.c | 153 +++++++++++++++++++++++-----------------------
 1 file changed, 78 insertions(+), 75 deletions(-)

commit 5c9fdd3bf53a9655f5eb2807d662b3af0d5e1865
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-29 23:33:33 +0800

    Tests: Refactors existing filter flags tests.
    
    Converts the existing filter flags tests into tuktests.

 tests/test_filter_flags.c | 655 ++++++++++++++++++++++++++++++++--------------
 1 file changed, 457 insertions(+), 198 deletions(-)

commit 36edc65ab4cf10a131f239acbd423b4510ba52d5
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-09 12:22:05 +0200

    liblzma: CLMUL CRC64: Workaround a bug in MSVC (VS2015-2022).
    
    I haven't tested with MSVC myself and there doesn't seem to be
    information about the problem online, so I'm relying on the bug report.
    
    Thanks to Iouri Kharon for the bug report and the patch.

 src/liblzma/check/crc64_fast.c | 6 ++++++
 1 file changed, 6 insertions(+)

commit 790a12a95a78ff82d8c6d4efe3b789851ca9470d
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-09 11:27:24 +0200

    CMake: Fix a copypaste error in xzdec Windows resource file handling.
    
    It was my mistake. Thanks to Iouri Kharon for the bug report.

 CMakeLists.txt | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 0e1545fea39c0514c7b7032a0a3592a9a33d2848
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-08 00:32:29 +0200

    Tests: tuktest.h: Support tuktest_malloc(0).
    
    It's not needed in XZ Utils at least for now. It's good to support
    it still because if such use is needed later, it wouldn't be
    caught on GNU/Linux since malloc(0) from glibc returns non-NULL.

 tests/tuktest.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

commit 69d5d78c6904668eb09a131da86276beec3281f8
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-08 00:24:23 +0200

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit dd38655f80c113c9db73b9ed370dc900e1c4dc41
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-07 21:57:11 +0200

    CMake: Update cmake_minimum_required from 3.13...3.16 to 3.13...3.25.
    
    The changes listed on cmake-policies(7) for versions 3.17 to 3.25
    shouldn't affect this project.

 CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit a890a637bee9193d5b690aefa9a59eba5b8532ae
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-07 19:50:35 +0200

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit 6e38e595dd56ac1800478cef1f6f754d0eba0d2e
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-07 19:50:03 +0200

    CMake/Windows: Add resource files to xz.exe and xzdec.exe.
    
    The command line tools cannot be built with MSVC for now but
    they can be built with MinGW-w64.
    
    Thanks to Iouri Kharon for the bug report and the original patch.

 CMakeLists.txt | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

commit 443dfebced041adc88f10d824188eeef5b5821a9
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-07 19:48:52 +0200

    CMake/Windows: Add a workaround for windres from GNU binutils.
    
    Thanks to Iouri Kharon for the bug report and the original patch.

 CMakeLists.txt | 21 ++++++++++++++++++++-
 1 file changed, 20 insertions(+), 1 deletion(-)

commit ceb805011747d04a915f3f39e4bed9eed151c634
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-07 19:31:15 +0200

    Build: Require that _mm_set_epi64x() is usable to enable CLMUL support.
    
    VS2013 doesn't have _mm_set_epi64x() so this way CLMUL gets
    disabled with VS2013.
    
    Thanks to Iouri Kharon for the bug report.

 CMakeLists.txt | 3 ++-
 configure.ac   | 8 ++++++--
 2 files changed, 8 insertions(+), 3 deletions(-)

commit 8d372bd94066b1a5b0570b2550f83c2868486adf
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-07 21:05:15 +0800

    CI/CD: Split CMake Linux and MacOS build phase to build and test.
    
    The phase split was only done for Autotools before, so should also
    apply to CMake.

 .github/workflows/ci.yml | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

commit 747c7f2b34bd498f6702c6875500a26b06201772
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-07 11:16:55 +0800

    CI/CD: Reduce job runners to 4 instead of using matrix strategy.
    
    The old version used too many runners that resulted in unnecessary
    dependency downloads. Now, the runners are reused for the different
    configurations for each OS and build system.

 .github/workflows/ci.yml | 95 ++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 83 insertions(+), 12 deletions(-)

commit 4de35fd6b58d46fc887c78faf163f6a37b790c45
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-07 10:07:20 +0800

    CI/CD: Add new -p (PHASE) argument to ci_build.sh
    
    The new PHASE argument can be build, test, or all. all is the default.
    This way, the CI/CD script can differentiate between the build and test
    phases to make it easier to track down errors when they happen.

 build-aux/ci_build.sh | 140 +++++++++++++++++++++++++++-----------------------
 1 file changed, 76 insertions(+), 64 deletions(-)

commit 6fd39664de47801e670a16617863196bfbde4755
Merge: 78e0561d fc0c7884
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-07 00:10:50 +0800

    Merge pull request #7 from tukaani-project/tuktest_index_hash
    
    Tuktest index hash

commit fc0c788469159f634f09ff23c8cef6925c91da57
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-06 17:58:48 +0200

    Tests: test_index_hash: Add an assert_uint_eq().

 tests/test_index_hash.c | 3 +++
 1 file changed, 3 insertions(+)

commit d550304f5343b3a082da265107cd820e0d81dc71
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-06 17:55:06 +0200

    Tests: test_index_hash: Fix a memory leak.

 tests/test_index_hash.c | 2 ++
 1 file changed, 2 insertions(+)

commit 02608f74ea1f2d2d56585711ff241c34b4ad0937
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-06 17:53:03 +0200

    Tests: test_index_hash: Don't treat pointers as booleans.

 tests/test_index_hash.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

commit 056766c8601a3808bea1761f6cc833197a35a3e0
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-06 17:51:41 +0200

    Tests: test_index_hash: Fix a typo in a comment.

 tests/test_index_hash.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 873e684028ba9738f071c5236db7d452ed797b4c
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-06 17:44:29 +0200

    Tests: test_index_hash: Avoid the variable name "index".
    
    It can trigger warnings from -Wshadow on some systems.

 tests/test_index_hash.c | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

commit d1f24c35874eeba8432d75aa77b06c50375ed937
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-06 17:35:50 +0200

    Tests: test_index_hash: Use the word "Record" instead of "entry".

 tests/test_index_hash.c | 102 ++++++++++++++++++++++++------------------------
 1 file changed, 51 insertions(+), 51 deletions(-)

commit b93f7c5cbb02b42024ac866fc0af541de3d816e2
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-06 17:35:05 +0200

    Tests: test_index_hash: Tweak comments and style.
    
    The words defined in the .xz file format specification
    begin with capital letter to emphasize that they have
    a specific meaning.

 tests/test_index_hash.c | 62 ++++++++++++++++++++++++++-----------------------
 1 file changed, 33 insertions(+), 29 deletions(-)

commit c48b24fc06d98569adb72f13c2e8e5ff30bb8036
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-06 17:17:37 +0200

    Tests: test_index_hash: Use INDEX_INDICATOR constant instead of 0.

 tests/test_index_hash.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 78e0561dfebaa9d5e34558de537efcda890e0629
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-06 20:43:31 +0800

    Style: Change #if !defined() to #ifndef in mythread.h.

 src/common/mythread.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit e834e1e934ed0af673598d8c0c34afb2af56bee0
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-06 20:35:55 +0800

    Build: Add missing stream_decoder_mt.c to .vcxproj files.
    
    The line in the .vcxproj files for building with was missing in 5.4.0.
    Thank to Hajin Jang for reporting the issue.

 windows/vs2013/liblzma.vcxproj     | 1 +
 windows/vs2013/liblzma_dll.vcxproj | 1 +
 windows/vs2017/liblzma.vcxproj     | 1 +
 windows/vs2017/liblzma_dll.vcxproj | 1 +
 windows/vs2019/liblzma.vcxproj     | 1 +
 windows/vs2019/liblzma_dll.vcxproj | 1 +
 6 files changed, 6 insertions(+)

commit 84f9687cbae972c2c342e10bf69f8ec8f70ae111
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-05 20:57:25 +0800

    liblzma: Remove common.h include from common/index.h.
    
    common/index.h is needed by liblzma internally and tests. common.h will
    include and define many things that are not needed by the tests. Also,
    this prevents include order problems because common.h will redefine
    LZMA_API resulting in a warning.

 src/liblzma/common/index.c                 | 1 +
 src/liblzma/common/index.h                 | 9 +++++++--
 src/liblzma/common/index_decoder.h         | 1 +
 src/liblzma/common/stream_buffer_encoder.c | 1 +
 4 files changed, 10 insertions(+), 2 deletions(-)

commit 7657ce1c3c4abff7560336a7b687d98e0e2bd14f
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-04 22:40:54 +0200

    Update THANKS.

 THANKS | 1 +
 1 file changed, 1 insertion(+)

commit aafd67fba045ab99683971263a5a26fb2a6e8ce2
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-04 18:40:28 +0200

    Tests: Adjust style in test_compress.sh.

 tests/test_compress.sh | 12 +++++++-----
 1 file changed, 7 insertions(+), 5 deletions(-)

commit 52380678f42364daa4510f92f6d3b18ec98c3638
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-04 23:58:58 +0800

    Tests: Replace non portable shell parameter expansion
    
    The shell parameter expansion using # and ## is not supported in
    Solaris 10 Bourne shell (/bin/sh). Even though this is POSIX, it is not fully
    portable, so we should avoid it.

 tests/create_compress_files.c          |  2 +-
 tests/test_compress.sh                 | 20 +++++++++++++-------
 tests/test_compress_prepared_bcj_sparc |  2 +-
 tests/test_compress_prepared_bcj_x86   |  2 +-
 4 files changed, 16 insertions(+), 10 deletions(-)

commit d0eb345bb7d148a62883ee299adec2b74a0f6f3b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-03 21:02:38 +0800

    Translations: Add Korean translation of man pages.
    
    Thanks to Seong-ho Cho

 po4a/ko.po     | 5552 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 po4a/po4a.conf |    2 +-
 2 files changed, 5553 insertions(+), 1 deletion(-)

commit c4145978d95ebf1690c778d354e15f7c2823d7a8
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-03 20:47:27 +0800

    Translations: Update the Esperanto translation.

 po/eo.po | 620 ++++++++++++++++++++++++++++++++++-----------------------------
 1 file changed, 332 insertions(+), 288 deletions(-)

commit 4103a2e78ac60b00c888485cd967a5fe5d1b917c
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-02 17:20:47 +0200

    Bump version and soname for 5.5.0alpha.
    
    5.5.0alpha won't be released, it's just to mark that
    the branch is not for stable 5.4.x.
    
    Once again there is no API/ABI stability for new features
    in devel versions. The major soname won't be bumped even
    if API/ABI of new features breaks between devel releases.

 src/liblzma/Makefile.am        | 2 +-
 src/liblzma/api/lzma/version.h | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

commit 73c9e6d6b970ccc3d5ad61dcaa21cba050e5df0a
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2023-01-02 17:05:07 +0200

    Build: Fix config.h comments.

 configure.ac          | 2 +-
 m4/tuklib_progname.m4 | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

commit bb740e3b117f1a3c65152d01e5755523a908ecb1
Author: Jia Tan <jiat0218@gmail.com>
Date:   2023-01-02 22:33:48 +0800

    Build: Only define HAVE_PROGRAM_INVOCATION_NAME if it is set to 1.
    
    HAVE_DECL_PROGRAM_INVOCATION_NAME is renamed to
    HAVE_PROGRAM_INVOCATION_NAME. Previously,
    HAVE_DECL_PROGRAM_INVOCATION_NAME was always set when
    building with autotools. CMake would only set this when it was 1, and the
    dos/config.h did not define it. The new macro definition is consistent
    across build systems.

 cmake/tuklib_progname.cmake  | 5 ++---
 m4/tuklib_progname.m4        | 5 ++++-
 src/common/tuklib_progname.c | 2 +-
 src/common/tuklib_progname.h | 2 +-
 4 files changed, 8 insertions(+), 6 deletions(-)

commit 064cd385a716abc78d93a3612411a82d69ceb221
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-29 00:30:52 +0800

    Adds test_index_hash to .gitignore.

 .gitignore | 1 +
 1 file changed, 1 insertion(+)

commit 3959162baec074511d83ba0fec1284c3ed724799
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-29 00:25:18 +0800

    Tests: Creates test_index_hash.c
    
    Tests all API functions exported from index_hash.h. Does not have a
    dedicated test for lzma_index_hash_end.

 CMakeLists.txt          |   2 +
 tests/Makefile.am       |   3 +
 tests/test_index_hash.c | 379 ++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 384 insertions(+)

commit f16e12d5e755d371247202fcccbcccd1ec16b2cf
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-08-17 20:20:16 +0800

    liblzma: Add NULL check to lzma_index_hash_append.
    
    This is for consistency with lzma_index_append.

 src/liblzma/common/index_hash.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 203b008eb220208981902e0db541c02d1c1c9f5e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-08-17 17:59:51 +0800

    liblzma: Replaced hardcoded 0x0 index indicator byte with macro

 src/liblzma/common/index.h             | 3 +++
 src/liblzma/common/index_decoder.c     | 2 +-
 src/liblzma/common/index_encoder.c     | 2 +-
 src/liblzma/common/index_hash.c        | 2 +-
 src/liblzma/common/stream_decoder.c    | 3 ++-
 src/liblzma/common/stream_decoder_mt.c | 2 +-
 6 files changed, 9 insertions(+), 5 deletions(-)

commit dfecda875211f737d0db92dc1d3c58a3a2afb0c0
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2022-12-30 20:10:08 +0200

    Tests: test_check: Test corner cases of CLMUL CRC64.

 tests/test_check.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

commit ce96bb20435212fe797d6d84738fb9fd4ea13cc7
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2022-12-30 19:36:49 +0200

    Tests: Clarify a comment in test_lzip_decoder.c.

 tests/test_lzip_decoder.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

commit 2fcba17fc4d7eda8fc60567169cf2a0e6fcfb2f8
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-29 01:55:19 +0800

    xz: Includes <time.h> and <sys/time.h> conditionally in mytime.c.
    
    Previously, mytime.c depended on mythread.h for <time.h> to be included.

 src/xz/mytime.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

commit f82294c8318a7a0990583d51ac5c7de682ad36ef
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-29 01:15:27 +0800

    liblzma: Includes sys/time.h conditionally in mythread
    
    Previously, <sys/time.h> was always included, even if mythread only used
    clock_gettime. <time.h> is still needed even if clock_gettime is not used
    though because struct timespec is needed for mythread_condtime.

 src/common/mythread.h | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

commit 74dae7d30091e906d6a92a57952dea4354473f9b
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-29 01:10:53 +0800

    Build: No longer require HAVE_DECL_CLOCK_MONOTONIC to always be set.
    
    Previously, if threading was enabled HAVE_DECL_CLOCK_MONOTONIC would always
    be set to 0 or 1. However, this macro was needed in xz so if xz was not
    built with threading and HAVE_DECL_CLOCK_MONOTONIC was not defined but
    HAVE_CLOCK_GETTIME was, it caused a warning during build. Now,
    HAVE_DECL_CLOCK_MONOTONIC has been renamed to HAVE_CLOCK_MONOTONIC and
    will only be set if it is 1.

 CMakeLists.txt        | 8 +++-----
 configure.ac          | 5 ++++-
 src/common/mythread.h | 4 ++--
 src/xz/mytime.c       | 5 ++---
 4 files changed, 11 insertions(+), 11 deletions(-)

commit 7339e39dc060df6eda74a2c5b69961befc3d5d24
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-28 01:14:07 +0800

    Translations: Add Ukrainian translations of man pages.
    
    Thanks to Yuri Chornoivan

 po4a/po4a.conf |    2 +-
 po4a/uk.po     | 3676 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 3677 insertions(+), 1 deletion(-)

commit 9f05c27a58ce8cd7803079aa295e41c24665ce6e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-23 00:34:48 +0800

    CI/CD: Create initial version of CI/CD workflow.
    
    The CI/CD workflow will only execute on Ubuntu and MacOS latest version.
    The workflow will attempt to build with autotools and CMake and execute
    the tests. The workflow will run for all pull requests and pushes done
    to the master branch.

 .github/workflows/ci.yml |  72 ++++++++++++++++++++++++
 build-aux/ci_build.sh    | 141 +++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 213 insertions(+)

commit 1275ebfba74230dbd028049141423c79c8b83b8f
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-22 23:14:53 +0800

    liblzma: Update documentation for lzma_filter_encoder.

 src/liblzma/common/filter_encoder.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

commit 7c9ff5f1667a16733163b75dfd4b509662c387f4
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-21 21:12:03 +0800

    Tests: Adds lzip decoder tests

 .gitignore                |   1 +
 tests/Makefile.am         |   2 +
 tests/test_lzip_decoder.c | 471 ++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 474 insertions(+)

commit 799ead162de63b8400733603d3abcd2e1977bdca
Author: Jia Cheong Tan <jiat0218@gmail.com>
Date:   2022-12-20 22:05:21 +0800

    Doxygen: Update .gitignore for generating docs for in source build.
    
    In source builds are not recommended, but we should still ignore
    the generated artifacts.

 .gitignore | 2 ++
 1 file changed, 2 insertions(+)

commit 5f7ce42a16b1e86ca8408b5c670c25e2a12acc4e
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-20 20:46:44 +0800

    liblzma: Fix lzma_microlzma_encoder() return value.
    
    Using return_if_error on lzma_lzma_lclppb_encode was improper because
    return_if_error is expecting an lzma_ret value, but
    lzma_lzma_lclppb_encode returns a boolean. This could result in
    lzma_microlzma_encoder, which would be misleading for applications.

 src/liblzma/common/microlzma_encoder.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

commit 8ace358d65059152d9a1f43f4770170d29d35754
Author: Jia Tan <jiat0218@gmail.com>
Date:   2022-12-16 20:58:55 +0800

    CMake: Update .gitignore for CMake artifacts from in source build.
    
    In source builds are not recommended, but we can make it easier
    by ignoring the generated artifacts from CMake.

 .gitignore | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

commit 8fd225a2c149f30aeac377e68eb5abf6b28300ad
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2022-12-16 18:30:02 +0200

    liblzma: Update authors list in arm64.c.

 src/liblzma/simple/arm64.c | 1 +
 1 file changed, 1 insertion(+)

commit b69da6d4bb6bb11fc0cf066920791990d2b22a06
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   2022-12-13 20:37:17 +0200

    Bump version to 5.4.0 and soname to 5.4.0.

 src/liblzma/Makefile.am         | 2 +-
 src/liblzma/api/lzma/version.h  | 6 +++---
 src/liblzma/liblzma_generic.map | 2 +-
 src/liblzma/liblzma_linux.map   | 2 +-
 4 files changed, 6 insertions(+), 6 deletions(-)
