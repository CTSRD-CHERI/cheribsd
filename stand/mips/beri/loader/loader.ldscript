/*-
 * Copyright (c) 2011-2014 Robert N. M. Watson
 * All rights reserved.
 *
 * This software was developed by SRI International and the University of
 * Cambridge Computer Laboratory under DARPA/AFRL contract (FA8750-10-C-0237)
 * ("CTSRD"), as part of the DARPA CRASH research programme.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD$
 */

INCLUDE ../common/common.ldscript

/*
 * Location where loader will execute.
 */
__loader_base__ = 0x20000;
__loader_base_vaddr__ = __mips64_xkphys_cached__ + __loader_base__;

/*
 * Highest address the loader is allowed to use below the kernel.
 * Spin-tables grow down from 0x100000 so leave room for 256 threads.
 */
__loader_end__ = 0x100000 - (32 * 256);
__loader_end_vaddr__ = __mips64_xkphys_cached__ + __loader_end__;

OUTPUT_ARCH(mips)
ENTRY(start)
SECTIONS
{
	/*
	 * We rely on boot2 having (a) configured a stack, and (b) loaded us
	 * to an appropriate bit of physical/virtual memory such that no
	 * self-relocating code is required here.
	 */
	. = __loader_base_vaddr__;
	. += SIZEOF_HEADERS;

	.text ALIGN(0x10): {
		start.o(.text*)
		*(EXCLUDE_FILE (start.o) .text*)
		*(.rodata*)

		__start_set_Xcommand_set = .;
		KEEP(*(set_Xcommand_set))
		__stop_set_Xcommand_set = .;

		__start_set_Xficl_compile_set = .;
		KEEP(*(set_Xficl_compile_set))
		__stop_set_Xficl_compile_set = .;
	}
	.data ALIGN(0x10): { *(.data*)}
	.bss ALIGN(0x10): { *(.bss*) }

	__heap = ALIGN(0x8);	/* 64-bit aligned heap pointer */
	__data_end = .;
	__boot_loader_len__ = . - __loader_base_vaddr__;
	__bss_start = ADDR(.bss);
	__bss_end = ALIGN(__bss_start + SIZEOF(.bss), 0x8);

	__heap_start = .;
	__heap_end = __loader_end_vaddr__;
	__heap_len = __heap_end - __heap_start;
}
