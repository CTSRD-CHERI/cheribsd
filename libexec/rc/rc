#!/bin/sh
#
# Copyright (c) 2000-2004  The FreeBSD Project
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#	@(#)rc	5.27 (Berkeley) 6/5/91
# $FreeBSD$
#

# System startup script run by init on autoboot
# or after single-user.
# Output and error are redirected to console by init,
# and the console is the controlling terminal.

# Note that almost all of the user-configurable behavior is no longer in
# this file, but rather in /etc/defaults/rc.conf.  Please check that file
# first before contemplating any changes here.  If you do need to change
# this file for some reason, we would like to know about it.

stty status '^T' 2> /dev/null

# Set shell to ignore SIGINT (2), but not children;
# shell catches SIGQUIT (3) and returns to single user.
#
trap : 2
trap "echo 'Boot interrupted'; exit 1" 3

HOME=/
PATH=/sbin:/bin:/usr/sbin:/usr/bin
export HOME PATH

if [ "$1" = autoboot ]; then
	autoboot=yes
	_boot="faststart"
	rc_fast=yes        # run_rc_command(): do fast booting
else
	autoboot=no
	_boot="quietstart"
fi

_localbase=`/sbin/sysctl -n user.localbase 2> /dev/null`

dlv=`/sbin/sysctl -n vfs.nfs.diskless_valid 2> /dev/null`
if [ ${dlv:=0} -ne 0 -o -f /etc/diskless ]; then
	sh /etc/rc.initdiskless
fi

# Run these after determining whether we are booting diskless in order
# to minimize the number of files that are needed on a diskless system,
# and to make the configuration file variables available to rc itself.
#
. /etc/rc.subr
load_rc_config

# If we receive a SIGALRM, re-source /etc/rc.conf; this allows rc.d
# scripts to perform "boot-time configuration" including enabling and
# disabling rc.d scripts which appear later in the boot order.
trap "_rc_conf_loaded=false; load_rc_config" ALRM

skip="-s nostart"
if [ `/sbin/sysctl -n security.jail.jailed` -eq 1 ]; then
	skip="$skip -s nojail"
	if [ `/sbin/sysctl -n security.jail.vnet` -ne 1 ]; then
		skip="$skip -s nojailvnet"
	fi
fi

# If the firstboot sentinel doesn't exist, we want to skip firstboot scripts.
if ! [ -e ${firstboot_sentinel} ]; then
	skip_firstboot="-s firstboot"
fi

# Do a first pass to get everything up to $early_late_divider so that
# we can do a second pass that includes $local_startup directories
#
files=`rcorder ${skip} ${skip_firstboot} /etc/rc.d/* 2>/dev/null`

_rc_elem_done=' '
for _rc_elem in ${files}; do
	run_rc_script ${_rc_elem} ${_boot}
	_rc_elem_done="${_rc_elem_done}${_rc_elem} "

	case "$_rc_elem" in
	*/${early_late_divider})	break ;;
	esac
done

unset files local_rc

# Now that disks are mounted, for each dir in $local_startup
# search for init scripts that use the new rc.d semantics.
#
case ${local_startup} in
[Nn][Oo] | '') ;;
*)	find_local_scripts_new ;;
esac

# The firstboot sentinel might be on a newly mounted filesystem; look for it
# again and unset skip_firstboot if we find it.
if [ -e ${firstboot_sentinel} ]; then
	skip_firstboot=""
fi

files=`rcorder ${skip} ${skip_firstboot} /etc/rc.d/* ${local_rc} 2>/dev/null`
for _rc_elem in ${files}; do
	case "$_rc_elem_done" in
	*" $_rc_elem "*)	continue ;;
	esac

	run_rc_script ${_rc_elem} ${_boot}
done

# Remove the firstboot sentinel, and reboot if it was requested.
# Be a bit paranoid about removing it to handle the common failure
# modes since the consequence of failure can be big.
# Note: this assumes firstboot_sentinel is on / when we have
# a read-only /, or that it is on media that's writable.
if [ -e ${firstboot_sentinel} ]; then
	checkyesno root_rw_mount || mount -uw /
	chflags -R 0 ${firstboot_sentinel}
	rm -rf ${firstboot_sentinel}
	if [ -e ${firstboot_sentinel}-reboot ]; then
		chflags -R 0 ${firstboot_sentinel}-reboot
		rm -rf ${firstboot_sentinel}-reboot
		checkyesno root_rw_mount || mount -ur /
		kill -INT 1
	fi
	checkyesno root_rw_mount || mount -ur /
fi

echo ''
date
exit 0
