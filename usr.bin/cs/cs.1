.\"
.\" Copyright (c) 2022 Edward Tomasz Napierala <en322@cl.cam.ac.uk>
.\" All rights reserved.
.\"
.\" This software was developed by the University of Cambridge Computer
.\" Laboratory as part of the CHERI for Hypervisors and Operating Systems
.\" (CHaOS) project, funded by EPSRC grant EP/V000292/1.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD$
.\"
.Dd May 25, 2022
.Dt CS 1
.Os
.Sh NAME
.Nm cs
.Nd Capsicum service
.Sh SYNOPSIS
.Nm
.Op Fl k
.Op Fl q
.Op Fl v
.Ar command Op Ar args ...
.Sh DESCRIPTION
The
.Nm
utility is used to transparently force its descendant into
.Xr capsicum 4
capability mode, and to provide it with remote syscall service.
It spawns a child process, makes it preload a wrapper which replaces
every system call that would otherwise be denied by the
.Xr capsicum 4
framework with a
.Xr cocall 2
to
.Nm
service, and finally executes
.Ar command
with the sealed capability to
.Nm
service inserted into its inherited capability vector.
In the child process, the preloaded wrapper then calls
.Xr cap_enter 2
in its constructor, making the process enter capability mode.
.Pp
The following options are available:
.Bl -tag -width ".Fl r Ar path"
.It Fl k
Use
.Xr coaccept_slow 2
instead of
.Xr coaccept 2 .
.It Fl q
Be quiet; do not print out the file paths it denied access to.
.It Fl r Ar path
Make the
.Ar path
readable to the child process.
.It Fl w Ar path
Make the
.Ar path
readable and writable to the child process.
.It Fl v
Be verbose.
.El
.Pp
.Nm
can be used as a template when implementing new
.Xr cocall 2
services that require file descriptor passing using
.Xr capfromfd 2
and
.Xr captofd 2 .
.Sh EXIT STATUS
The
.Nm
utility exits 0 on success, and >0 if an error occurs.
.Sh EXAMPLES
Run
.Xr ls 1
to list files in
.Pa /usr
without giving it access to any other files:
.Dl cs -r /usr ls -al /usr
.Pp
See what changes when you also allow
.Pa /etc
and silence down further warnings:
.Dl cs -qr /usr -r /etc ls -al /usr
.Sh SEE ALSO
.Xr capv 1 ,
.Xr coaccept 2 ,
.Xr capsicum 4 ,
.Xr colocation 7
.Sh BUGS
.Nm
cannot protect against malicious binaries - only against
otherwise trustworthy binaries becoming compromised by malicious data.
While
.Ar command
does eventually end up running in
.Xr capsicum 4
mode, it is only entered from an LD_PRELOADed constructor, just before starting the
.Fn main
function, and can be easily
disabled by a malicious executable.
To make it protect against malicious binaries, they would need to be started in
.Xr capsicum 4
mode outright.
This would require implementing syscall remoting also for
.Xr rtld 1 ,
precluding the use of LD_PRELOAD.
It would probably require moving the stubs directly into libc and rtld.
.Pp
Because after
.Xr fork 2
the child process is running in a fresh new address space
and thus unable to communicate with colocated services,
and because
.Xr vfork 2
is not currently allowed in
.Xr capsicum 4
capability mode, it is not possible for
.Nm
to support more than a single client process at a time.
.Pp
If you allow access to
.Pa /proc
you'll then be able to open
.Pa /proc/curproc/mem
and take over the
.Nm
instance.
If you allow access to
.Pa /dev ,
you will be able to take over the whole machine.
So maybe don't.
In the long run,
instead of calling the syscalls on behalf of the client,
.Nm
should be returning file descriptors to allowed directories (specified with
.Fl r )
for the clients to use them to call syscalls themselves.
.Pp
.Nm
does not support any kind of path translation.
This is a deliberate omission, to avoid mixing resource mapping
with access control like NAT did.
.Sh HISTORY
The
.Nm
command appeared in
.Tn CheriBSD .
.Sh AUTHORS
.An -nosplit
The
.Nm
utility was developed by
.An Edward Tomasz Napierala Aq Mt trasz@FreeBSD.org
at the University of Cambridge Computer Laboratory as part of the CHERI
for Hypervisors and Operating Systems (CHaOS) project, funded by EPSRC
grant EP/V000292/1.
