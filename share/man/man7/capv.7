.\"
.\" Copyright (c) 2022 Edward Tomasz Napierala <en322@cl.cam.ac.uk>
.\" All rights reserved.
.\"
.\" This software was developed by the University of Cambridge Computer
.\" Laboratory as part of the CHERI for Hypervisors and Operating Systems
.\" (CHaOS) project, funded by EPSRC grant EP/V000292/1.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD$
.\"
.Dd July 22, 2022
.Dt CAPV 7
.Os
.Sh NAME
.Nm capv
.Nd capability vector
.Sh DESCRIPTION
.\"
.\" Provide a brief overview and point at other manpages.  Let's keep it short.
.\"
The capability vector is a mechanism to pass a set of memory capabilities
to a newly spawned process.
It is an array of memory capabilities which gets inherited over
.Xr fork 2
and
.Xr execve 2 ,
similar to how credentials and file descriptors are.
Processes can access the array using
.Xr elf_aux_info 3 ,
but only when colocated in the same address space the vector originated from.
Processes can modify the vector directly, but their children will still
inherit the unmodified copy; use
.Xr coexecvec 2
to pass a modified vector.
.Pp
By convention, the capability vector is used to pass sealed capabilities
to services, to use as targets to
.Xr cocall 2 .
Use
.Xr capv 1
to show and manipulate the vector.
See
.In capv.h
for details on the default service calling conventions.
.Pp
The
.Xr clocks 1
is an example service to provide a drop-in substitute for
.Xr clock_gettime 2 ,
implemented as a colocated call instead of syscall.
This is a good starting point for the basic structure of a
service; it can also serve as a template when implementing a new one.
.Pp
The
.Xr binds 1
service provides
.Xr bind 2
substitute; it demonstrates how to pass file descriptors over
.Xr cocall 2
by calling
.Xr capfromfd 2
to wrap them in a sealed capability.
.Pp
To share capabilities with processes that are colocated, but are not
descendants, see
.Xr coregister 1
and
.Xr colookup 1
utilities.
They also serve as an example of passing memory capabilities over
.Xr unix 4
domain sockets.
.Pp
The
.Xr cotrace 1
is an example of an interposer service - one that forwards received cocalls
to another service, with arbitrary degree of transparency.
.Pp
The
.Xr clearances 1
is another interposer, implementing arbitrary security policies for chosen
services; can be used as an alternative to restricting capability transfer.
.Pp
To experiment with the switcher itself, eg to explore capability
transfer policies, see
.Xr dispatch 1 .
.Sh SEE ALSO
.Xr binds 1 ,
.Xr capv 1 ,
.Xr clearances 1 ,
.Xr clocks 1 ,
.Xr coexec 1 ,
.Xr colookup 1 ,
.Xr coping 1 ,
.Xr coregister 1 ,
.Xr dispatch 1 ,
.Xr cocall 2 ,
.Xr coexecvec 2 ,
.Xr capvfetch 3 ,
.Xr capvset 3 ,
.Xr elf_aux_info 3
.Sh AUTHORS
.An -nosplit
The idea of capability vector came from
.An Peter Blandford-Baker Aq Mt psb34@cl.cam.ac.uk ,
and was implemented by
.An Edward Tomasz Napierala Aq Mt en322@cl.cam.ac.uk ,
at the University of Cambridge Computer Laboratory as part of the CHERI
for Hypervisors and Operating Systems (CHaOS) project, funded by EPSRC
grant EP/V000292/1.
