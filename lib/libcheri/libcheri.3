.\"-
.\" Copyright (c) 2014-2017 Robert N. M. Watson
.\" All rights reserved.
.\"
.\" This software was developed by SRI International and the University of
.\" Cambridge Computer Laboratory under DARPA/AFRL contract (FA8750-10-C-0237)
.\" ("CTSRD"), as part of the DARPA CRASH research programme.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd "May 28, 2016"
.Dt LIBCHERI 3
.Os
.Sh NAME
.Nm libcheri ,
.Nm sandbox_class_new ,
.Nm sandbox_class_method_declare ,
.Nm sandbox_class_destroy ,
.Nm sandbox_object_new ,
.Nm sandbox_object_getobject ,
.Nm sandbox_object_getsystemobject ,
.Nm sandbox_object_reset ,
.Nm sandbox_object_destroy ,
.Nm sandbox_object_invoke
.Nd Library interface for CHERI compartmentalization
.Sh LIBRARY
.Lb libcheri
.Sh SYNOPSIS
.In cheri/cheri.h
.In cheri/cheric.h
.In cheri/libcheri_sandbox.h
.Vt extern _Thread_local int  libcheri_errno ;
.Ft void
.Fo libcheri_init
.Fa "void"
.Fc
.Ft int
.Fo sandbox_class_new
.Fa "const char *path"
.Fa "size_t sandboxlen"
.Fa "struct sandbox_class **sbcpp"
.Fc
.Ft int
.Fo sandbox_class_method_declare
.Fa "struct sandbox_class *sbcp"
.Fa "u_int methodnum"
.Fa "const char *methodname"
.Fc
.Ft void
.Fo sandbox_class_destroy
.Fa "struct sandbox_class *sbcp"
.Fc
.Ft int
.Fo sandbox_object_new
.Fa "struct sandbox_class *sbcp"
.Fa "size_t heaplen"
.Fa "struct sandbox_object **sbopp"
.Fc
.Ft struct cheri_object
.Fo sandbox_object_getobject
.Fa "struct sandbox_object *sbop"
.Fc
.Ft struct cheri_object
.Fo sandbox_object_getsystemobject
.Fa "struct sandbox_object *sbop"
.Fc
.Ft int
.Fo sandbox_object_reset
.Fa "struct sandbox_object *sbop"
.Fc
.Ft void
.Fo sandbox_object_destroy
.Fa "struct sandbox_object *sbop"
.Fc
.Pp
.Ft register_t
.Fo sandbox_object_invoke
.Fa "struct sandbox_object *sbop"
.Fa "u_int methodnum"
.Fa "register_t a1"
.Fa "register_t a2"
.Fa "register_t a3"
.Fa "register_t a4"
.Fa "register_t a5"
.Fa "register_t a6"
.Fa "register_t a7"
.Fa "void * __capability c3"
.Fa "void * __capability c4"
.Fa "void * __capability c5"
.Fa "void * __capability c6"
.Fa "void * __capability c7"
.Fa "void * __capability c8"
.Fa "void * __capability c9"
.Fa "void * __capability c10"
.Fc
.Pp
.Sh DESCRIPTION
.Nm
provides a programmer-friendly interface to CHERI in-process
compartmentalization using an object-capability security model.
The programming interface requires programmers to define compartments in terms
of
.Em classes
(particular pieces of code that will run in isolation) and
.Em objects
(in-execution instances of isolated code).
In
.Nm ,
classes are statically linked memory images (in the future to be ELF
binaries).
.Pp
.Fn libcheri_init
must be called to initialize the library before any other
.Nm
APIs can be used.
.Ss libcheri classes
A new class may be created using
.Fn sandbox_class_new ,
which accepts
.Fa path ,
a pathname to the class's memory image and
.Fa sandboxlen ,
an address-space size in bytes.
If successful, a pointer to the class will be stored in
.Fa sbcpp .
Classes implement a single invocation entry point, which can then fan out to
multiple methods courtesy a method argument.
.Pp
Optionally,
.Fn sandbox_class_method_declare
may be used to associate descriptive strings with method numbers, which will
then be visible via
.Xr procstat 1 .
The method number is passed via
.Fa methodnum
and string via
.Fa methodname .
.Pp
Classes may be destroyed, once all its objects have been freed, using
.Fn sandbox_class_destroy .
.Pp
.Ss Sandbox objects
Object instances may be created using
.Fn sandbox_object_new ,
which accepts a previously created class passed via
.Fa sbcp ,
with a heap size specified by
.Fa heaplen ,
and on success returns a
.Nm
object via
.Fa sbopp .
When an object is no longer required, it can be destroyed by passing it
to
.Fn sandbox_object_destroy .
An object may be restored to a pristine state by passing it to
.Fn sandbox_object_reset .
.Pp
.Fn sandbox_object_getobject
returns the
.Nm
object's underlying CHERI object (sealed code and data capabilities).
.Fn sandbox_object_getsystemobject
returns the CHERI system-class instance suitable for delegating to the object.
.Ss Object invocation
Methods may be invoked using
.Fn sandbox_object_invoke ,
which accepts a
.Nm
object pointer,
.Fa sbop ,
method number via
.Fa methodnum ,
and general-purpose and capability register arguments.
This function is implemented as a wrapper around
.Xr libcheri_invoke 3 .
.Ss Object monitoring
.Pp
Objects within a
.Nm
process may be monitored using
.Xr procstat 1 ,
or programmatically using
.Xr libprocstat 3
APIs.
Various statistics are maintained, including object counts, method invocation
counts, and object fault information.
.Sh RETURN VALUES
.Rv -std sandbox_class_new sandbox_class_method_declare sandbox_object_new sandbox_object_reset
.Pp
.Fn sandbox_class_destroy
and
.Fn sandbox_object_destroy
do not have return values as they cannot fail.
.Pp
.Fn sandbox_object_invoke
returns the value returned by the invoked object method unless a fault occurs,
in which case -1 will be returned.
As a method returning -1 cannot be distinguished from a fault in the caller,
use of negative return values for method return values is discouraged.
.Pp
If domain transition experiences a problem - e.g., a trusted-stack overflow
or violation of the local-global capability flow-control policy - then it
will be reported via
.Vt libcheri_errno .
This variable can be set to zero before performing an invocation, and then
checked following invocation to detect an error.
If no error occurs,
.Vt libcheri_errno
will not be modified by
.Nm .
Possible values include:
.Bl -hang -width Ds
.It Er LIBCHERI_ERRNO_INVOKE_LOCAL_ARG
Invocation has failed because a tagged, local capability value has been passed
as an argument.
.It Er LIBCHERI_ERRNO_INVOKE_OVERFLOW
Invocation has failed because a trusted-stack overflow would occur.
.It Er LIBCHERI_ERRNO_INVOKE_BUSY
Invocation has failed because the target object has exceeded maximum
concurrency, or because the target object has experienced an unrecoverable
fault.
.It Er LIBCHERI_ERRNO_RETURN_LOCAL_RETVAL
Return has succeeded, but the tagged, local capability return value has been
cleared.
.It Er LIBCHERI_ERRNO_RETURN_UNDERFLOW
The trusted stack has underflowed (not used, as an attempted return will
instead trap).
.El
.Sh SEE ALSO
.Xr libcheri_invoke 3 ,
.Xr libprocstat 3 ,
.Xr procstat 1
.Sh AUTHORS
This software and this manual page were written by
.An Robert N. M. Watson ,
and developed by SRI International and the University of Cambridge Computer
Laboratory under DARPA/AFRL contract
.Pq FA8750-10-C-0237
.Pq Do CTSRD Dc ,
as part of the DARPA CRASH research programme.
.Sh BUGS
The
.Fn sandbox_object_invoke
API cannot distinguish the invoked object returning a negative value and a
fault causing a negative value to be returned.
.Pp
It is not clear how programmers should select a suitable
.Fa sandboxlen
value to pass to
.Fn sandbox_class_new .
.Pp
This man page should include information on how to structure and link code
intended to be used as
.Nm
classes.
.Pp
This man page does not document the CHERI system class.
