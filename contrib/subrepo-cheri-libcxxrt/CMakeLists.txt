cmake_minimum_required(VERSION 3.0)

set(_previous_CMAKE_TRY_COMPILE_TARGET_TYPE ${CMAKE_TRY_COMPILE_TARGET_TYPE})
# Don't link the C++ standard library when detecting C++ compiler features
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
project(libcxxrt LANGUAGES C CXX)
set(CMAKE_TRY_COMPILE_TARGET_TYPE ${_previous_CMAKE_TRY_COMPILE_TARGET_TYPE})

option(CHERI_PURE "Build for CHERI Sandbox ABI (disables exceptions and RTTI)" OFF)
option(DISABLE_EXCEPTIONS_RTTI "Disable exceptions and RTTI" OFF)
if (DISABLE_EXCEPTIONS_RTTI)
    if (NOT FORCE_DISABLE_EXCEPTIONS_RTTI)
        message(FATAL_ERROR "Did you really mean to disable exceptions and RTTI? This is probably broken!")
    endif()
endif()
option(NO_UNWIND_LIBRARY "Use libcxxrt without an unwind library" OFF)
option(NO_SHARED "Do not build shared objects" OFF)

if (CHERI_PURE)
  set(DISABLE_EXCEPTIONS_RTTI ON CACHE BOOL "Disable exceptions and RTTI" FORCE)
  set(NO_UNWIND_LIBRARY ON CACHE BOOL "Use libcxxrt without an unwind library" FORCE)
  set(NO_SHARED ON CACHE BOOL "Do not build shared objects" FORCE)
endif()

if(NOT NO_UNWIND_LIBRARY)
    if(NOT LIBUNWIND_PATH)
        message(FATAL_ERROR "Path to libunwind should be specified. Please set LIBUNWIND_PATH variable")
    endif()
    if(EXISTS "${LIBUNWIND_PATH}/libunwind.a")
        set(LIBUNWIND_STATIC "${LIBUNWIND_PATH}/libunwind.a")
    else()
        find_library(LIBUNWIND_STATIC libunwind.a PATHS ${LIBUNWIND_PATH} HINTS ${LIBUNWIND_PATH})
    endif()
    if(EXISTS "${LIBUNWIND_PATH}/libunwind.so")
        set(LIBUNWIND_SHARED "${LIBUNWIND_PATH}/libunwind.so")
    elseif(EXISTS "${LIBUNWIND_PATH}/libunwind.dylib")
        set(LIBUNWIND_SHARED "${LIBUNWIND_PATH}/libunwind.dylib")
    else()
        find_library(LIBUNWIND_SHARED libunwind.so PATHS ${LIBUNWIND_PATH} HINTS ${LIBUNWIND_PATH})
    endif()
    message(STATUS "libunwind libraries: static=${LIBUNWIND_STATIC} shared=${LIBUNWIND_SHARED}")
    if(NOT LIBUNWIND_STATIC OR NOT LIBUNWIND_SHARED)
        message(FATAL_ERROR "Libunwind requested but not found!")
    endif()
endif()


if (DISABLE_EXCEPTIONS_RTTI)
  add_definitions(-DLIBCXXRT_NO_EXCEPTIONS_NO_RTTI -fno-rtti -fno-exceptions)
endif()

enable_testing()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")

add_subdirectory(src)
IF(BUILD_TESTS)
add_subdirectory(test)
ENDIF()

