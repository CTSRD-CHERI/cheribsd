/*	$OpenBSD: locore.S,v 1.18 1998/09/15 10:58:53 pefo Exp $	*/
/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Digital Equipment Corporation and Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * Copyright (C) 1989 Digital Equipment Corporation.
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies.
 * Digital Equipment Corporation makes no representations about the
 * suitability of this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 *
 * from: Header: /sprite/src/kernel/mach/ds3100.md/RCS/loMem.s,
 *	v 1.1 89/07/11 17:55:04 nelson Exp  SPRITE (DECWRL)
 * from: Header: /sprite/src/kernel/mach/ds3100.md/RCS/machAsm.s,
 *	v 9.2 90/01/29 18:00:39 shirriff Exp  SPRITE (DECWRL)
 * from: Header: /sprite/src/kernel/vm/ds3100.md/vmPmaxAsm.s,
 *	v 1.1 89/07/10 14:27:41 nelson Exp  SPRITE (DECWRL)
 *
 *	from: @(#)locore.s	8.5 (Berkeley) 1/4/94
 *	JNPR: locore.S,v 1.6.2.1 2007/08/29 12:24:49 girish
 * $FreeBSD$
 */

/*
 * FREEBSD_DEVELOPERS_FIXME
 * The start routine below was written for a multi-core CPU
 * with each core being hyperthreaded. This serves as an example
 * for a complex CPU architecture. For a different CPU complex
 * please make necessary changes to read CPU-ID etc.
 * A clean solution would be to have a different locore file for
 * each CPU type.
 */

/*
 *	Contains code that is the first executed at boot time on a CHERI CPU
 */

#include <machine/asm.h>
#include <machine/cpu.h>
#include <machine/cpuregs.h>
#include <machine/regnum.h>

#include <machine/cheriasm.h>
#include <machine/cherireg.h>

#include "assym.inc"

	/* Don't warn about uses of c27-c30 */
	.set cheri_sysregs_accessible

/*
 * Check that we are compiling with the expected flags
 */
#if !defined(CHERI_PURECAP_KERNEL) || !defined(CPU_CHERI) || !defined(__CHERI_PURE_CAPABILITY__)
#error CHERI kernel requires CPU_CHERI and CHERI_PURECAP_KERNEL
#endif

	.data
#ifdef YAMON
GLOBAL(fenvp)
	.space 4			# Assumes mips32?  Is that OK?
#endif

	.set noreorder

	.text

GLOBAL(btext)
ASM_ENTRY(_start)
VECTOR(_locore, unknown)
	/* UNSAFE TO USE a0..a3, need to preserve the args from boot loader */
	mtc0	zero, MIPS_COP_0_CAUSE	# Clear soft interrupts

	/*
	 * t0: Bits to preserve if set:
	 *	Soft reset
	 *	Boot exception vectors (firmware-provided)
	 */
	li	t0, (MIPS_SR_BEV | MIPS_SR_SR)
	/*
	 * t1: Bits to set explicitly:
	 *	Enable FPU
	 */
	li	t1, MIPS_SR_COP_1_BIT | MIPS_SR_COP_2_BIT
	or	t1, MIPS_SR_KX | MIPS_SR_SX | MIPS_SR_UX | MIPS_SR_FR
	/*
	 * Read coprocessor 0 status register, clear bits not
	 * preserved (namely, clearing interrupt bits), and set
	 * bits we want to explicitly set.
	 */
	mfc0	t2, MIPS_COP_0_STATUS
	and	t2, t0
	or	t2, t1
	mtc0	t2, MIPS_COP_0_STATUS
	COP0_SYNC

	/* Make sure KSEG0 is cached */
	li	t0, MIPS_CCA_CACHED
	mtc0	t0, MIPS_COP_0_CONFIG
	COP0_SYNC

#if defined(CPU_BERI)
	/*
	 * Enable userspace cycle-count, cycle-count resolution, and CPU
	 * number registers available via rdhwr.
	 * Also enable beri specific statcounters.
	 */
	MFC0	t0, MIPS_COP_0_HWRENA
	or	t0, MIPS_HWRENA_CC | MIPS_HWRENA_CCRES | MIPS_HWRENA_CPUNUM | \
	    (7 << 4) | MIPS_HWRENA_BERI_STATCOUNTERS_MASK
	MTC0	t0, MIPS_COP_0_HWRENA
#endif

#ifdef YAMON
	/* Save YAMON boot environment pointer */
	sw	a2, _C_LABEL(fenvp)
#endif

#if defined(CPU_MALTA) && defined(SMP)
	/* XXX-AM: TODO adjust SMP initialization */
	.set push
	.set mips32r2
	jal	malta_cpu_configure
	nop
	jal	platform_processor_id
	nop
	beqz	v0, 1f
	nop
	j	malta_ap_wait
	nop
	.set pop
1:
#endif

	/*
	 * Grab the initial omnipotent capability
	 */
	cgetdefault	$c28

	/*
	 * Set up global pointer.
	 * XXX-AM: Note that when we change linkage this will need rebasing.
	 */
	ABSRELOC_LA(t0, _C_LABEL(_captable))
	csetoffset CHERI_REG_GPC, $c28, t0
	ABSRELOC_LA(t1, _C_LABEL(_ecaptable))
	PTR_SUBU t0, t1, t0
	csetbounds CHERI_REG_GPC, CHERI_REG_GPC, t0
	REG_LI	t0, (CHERI_PERM_LOAD | CHERI_PERM_LOAD_CAP)
	candperm CHERI_REG_GPC, CHERI_REG_GPC, t0

	/* Preserve a copy in KDC for exception handlers. */
	csetkdc		CHERI_REG_GPC

	/* Clear DDC */
	csetdefault	$cnull

	/*
	 * Create a reduced PCC.
	 *
	 * XXX-BD: Actually changing base/length requires changes in
	 * linkage.
	 */
	cgetpcc		$c27
	REG_LI		t0, CHERI_CAP_KERN_BASE
	csetoffset	$c27, $c27, t0
	REG_LI		t0, CHERI_CAP_KERN_LENGTH
	csetbounds	$c27, $c27, t0
	REG_LI		t0, CHERI_PERMS_KERNEL_CODE
	candperm	$c27, $c27, t0

	/* Preserve a copy in KCC for exception handlers.  */

	csetkcc		$c27

	/* Install the new PCC. */
	REG_LI		t0, CHERI_CAP_KERN_BASE
	cgetpcc		CHERI_REG_C29
	cgetoffset	t1, CHERI_REG_C29			# 1
	PTR_SUBU	t1, t1, t0				# 2
	PTR_ADDIU	t1, t1, (4 * 7)				# 3
	csetoffset	$c27, $c27, t1	# 4
	cjr		$c27				# 5
	nop							# 6
	# 7 (land here)

	/*
	 * Initialize stack and call machine startup.
	 */
	cmove		CHERI_REG_STC, $c28
	ABSRELOC_LA(t0, _C_LABEL(pcpu_space))
	csetoffset	CHERI_REG_STC, CHERI_REG_STC, t0
	REG_LI		t0, PCPU_SIZE
	cincoffset	CHERI_REG_STC, CHERI_REG_STC, t0
	REG_LI		t0, (PAGE_SIZE * 2) - PCPU_SIZE
	csetbounds	CHERI_REG_STC, CHERI_REG_STC, t0	# Boot stack capability
	PTR_SUBU	t0, t0, CALLFRAME_SIZ
	cincoffset	CHERI_REG_STC, CHERI_REG_STC, t0	# Make room for initial callframe

	/* Zero out old callframe fields for debugger */
	cfromptr	$c1, $c1, zero
	csc		$c1, zero, CALLFRAME_CGP(CHERI_REG_STC)
	csc		$c1, zero, CALLFRAME_CSP(CHERI_REG_STC)
	csc		$c1, zero, CALLFRAME_CRA(CHERI_REG_STC)
	/* XXX-AM: zero out ra so we catch anything that returns improperly */
	move	ra, zero

	/* Need to preserve a0-a3 for platform start */
	move s0, a0
	move s1, a1
	move s2, a2
	move s3, a3

	/*
	 * Process capability relocations.
	 * This must be done before any PIC global access that uses the cap-table.
	 * Pointers to the start and end of the __cap_relocs section are created
	 * here in position-dependant code to avoid accessing the capability table.
	 *
	 * process_kernel_cap_relocs(reloc_start, reloc_end,
	 *    code_cap, data_cap)
	 */
	ABSRELOC_LA(t0, _C_LABEL(__start___cap_relocs))
	cmove		$c3, $c28
	csetoffset	$c3, $c3, t0
	ABSRELOC_LA(t1, _C_LABEL(__stop___cap_relocs))
	PTR_SUBU	t0, t1, t0
	csetbounds	$c3, $c3, t0
	cincoffset	$c4, $c3, t0
	cgetpccsetoffset	$c5, zero
	cmove		$c6, $c28
	ABSRELOC_LA(t0, _C_LABEL(process_kernel_cap_relocs))
	cgetpcc		$c12
	csetaddr	$c12, $c12, t0
	cjalr	$c12, $c17
	nop

	/*
	 * Process dynamic kernel relocations.
	 *
	 * process_kernel_dyn_relocs(reloc_start, reloc_end,
	 *   code_cap, data_cap)
	 */
	ABSRELOC_LA(t0, _C_LABEL(_rel_dyn))
	cmove		$c2, $c28
	csetoffset	$c3, $c2, t0
	ABSRELOC_LA(t1, _C_LABEL(_erel_dyn))
	PTR_SUBU	t0, t1, t0
	csetbounds	$c3, $c3, t0
	csetoffset	$c4, $c3, t0
	ABSRELOC_LA(t0, _C_LABEL(_dynsym))
	csetoffset	$c5, $c2, t0
	ABSRELOC_LA(t1, _C_LABEL(_edynsym))
	PTR_SUBU	t0, t1, t0
	csetbounds	$c5, $c5, t0
	cgetpccsetoffset	$c6, zero
	cmove		$c7, $c28
	ABSRELOC_LA(t0, _C_LABEL(process_kernel_dyn_relocs))
	cgetpcc		$c12
	csetaddr	$c12, $c12, t0
	cjalr	$c12, $c17
	nop

	/* Now we can use cap-table relocations safely */
	cmove	$c3, $c28
	CAPCALL_LOAD($c12, _C_LABEL(cheri_init_capabilities))
	cjalr	$c12, $c17
	nop

	/* Clear all remaining capabilities */
	cclearlo	0xf7fe	# keep c0, c11 /* XXX-AM c0 will eventually be cleared */
	cclearhi	0x9bff	# keep c26, c29, c30

	/* Call the platform-specific startup code. */
	move a0, s0
	move a1, s1
	move a2, s2
	move a3, s3

	/* Reconstruct platform_start arguments */
	CAPTABLE_LOAD($c28, _C_LABEL(cheri_kseg0_capability))
	clc		$c28, zero, 0($c28)
	csetaddr	$c3, $c28, a1
	dsll		t0, a0, 3
	csetbounds	$c3, $c3, t0
	/* do not bound envp because we do not have
	* reliable length information */
	csetaddr	$c4, $c28, a2
	move	a1, a3
	CAPCALL_LOAD($c12, _C_LABEL(platform_start))
	cjalr	$c12, $c17
	nop

	/*
	 * thread0 set thread0 kstack to the bottom of the stack
	 * page, realign thread0 kstack and start using it.
	 */
	CAPTABLE_LOAD($c3, _C_LABEL(thread0_st))
	clc	CHERI_REG_STC, zero, TD_KSTACK($c3)
	cgetlen	a0, CHERI_REG_STC
	REG_LI	t0, ~7
	and	a0, a0, t0
	PTR_SUBU	a0, a0, CALLFRAME_SIZ
	csetoffset	CHERI_REG_STC, CHERI_REG_STC, a0

	CAPCALL_LOAD($c12, _C_LABEL(mi_startup))
	cjalr	$c12, $c17
	cmove	$c3, $cnull

	PANIC("Startup failed!")

VECTOR_END(_locore)
