/*-
 * Copyright (c) 2020 Edward Tomasz Napierala <trasz@FreeBSD.org>
 * All rights reserved.
 *
 * This software was developed by SRI International and the University of
 * Cambridge Computer Laboratory under DARPA/AFRL contract (FA8750-10-C-0237)
 * ("CTSRD"), as part of the DARPA CRASH research programme.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <machine/asm.h>
__FBSDID("$FreeBSD$");
#include "SYS.h"

#define	CAP_LEN			16
#define	JUMP_BUFFER_SIZE	(27 * CAP_LEN)

ENTRY(coaccept)
	cincoffsetimm	csp, csp, -JUMP_BUFFER_SIZE

	/* Store the general purpose registers and ra */
	csc	cs0, (0 * CAP_LEN)(csp)
	csc	cs1, (1 * CAP_LEN)(csp)
	csc	cs2, (2 * CAP_LEN)(csp)
	csc	cs3, (3 * CAP_LEN)(csp)
	csc	cs4, (4 * CAP_LEN)(csp)
	csc	cs5, (5 * CAP_LEN)(csp)
	csc	cs6, (6 * CAP_LEN)(csp)
	csc	cs7, (7 * CAP_LEN)(csp)
	csc	cs8, (8 * CAP_LEN)(csp)
	csc	cs9, (9 * CAP_LEN)(csp)
	csc	cs10, (10 * CAP_LEN)(csp)
	csc	cs11, (11 * CAP_LEN)(csp)
	csc	cra, (12 * CAP_LEN)(csp)
	csc	ctp, (13 * CAP_LEN)(csp)
	cspecialr ct1, ddc
	csc	ct1, (14 * CAP_LEN)(csp)

#if defined(__riscv_float_abi_double)
	/* Store the fpe registers */
	/*
	 * XXX: We're wasting some space here, saving FP registers
	 *      into capability-sized slots.
	 */
	cfsd	fs0, (15 * CAP_LEN)(csp)
	cfsd	fs1, (16 * CAP_LEN)(csp)
	cfsd	fs2, (17 * CAP_LEN)(csp)
	cfsd	fs3, (18 * CAP_LEN)(csp)
	cfsd	fs4, (19 * CAP_LEN)(csp)
	cfsd	fs5, (20 * CAP_LEN)(csp)
	cfsd	fs6, (21 * CAP_LEN)(csp)
	cfsd	fs7, (22 * CAP_LEN)(csp)
	cfsd	fs8, (23 * CAP_LEN)(csp)
	cfsd	fs9, (24 * CAP_LEN)(csp)
	cfsd	fs10, (25 * CAP_LEN)(csp)
	cfsd	fs11, (26 * CAP_LEN)(csp)
#endif
	cllc cra, 1f
	cinvoke ca0, ca1

1:
	/* Restore the general purpose registers and ra */
	clc	cs0, (0 * CAP_LEN)(csp)
	clc	cs1, (1 * CAP_LEN)(csp)
	clc	cs2, (2 * CAP_LEN)(csp)
	clc	cs3, (3 * CAP_LEN)(csp)
	clc	cs4, (4 * CAP_LEN)(csp)
	clc	cs5, (5 * CAP_LEN)(csp)
	clc	cs6, (6 * CAP_LEN)(csp)
	clc	cs7, (7 * CAP_LEN)(csp)
	clc	cs8, (8 * CAP_LEN)(csp)
	clc	cs9, (9 * CAP_LEN)(csp)
	clc	cs10, (10 * CAP_LEN)(csp)
	clc	cs11, (11 * CAP_LEN)(csp)
	clc	cra, (12 * CAP_LEN)(csp)
	clc	ctp, (13 * CAP_LEN)(csp)
	clc	ct1, (14 * CAP_LEN)(csp)
	cspecialw ddc, ct1

#if defined(__riscv_float_abi_double)
	/* Restore the fpe registers */
	cfld	fs0, (15 * CAP_LEN)(csp)
	cfld	fs1, (16 * CAP_LEN)(csp)
	cfld	fs2, (17 * CAP_LEN)(csp)
	cfld	fs3, (18 * CAP_LEN)(csp)
	cfld	fs4, (19 * CAP_LEN)(csp)
	cfld	fs5, (20 * CAP_LEN)(csp)
	cfld	fs6, (21 * CAP_LEN)(csp)
	cfld	fs7, (22 * CAP_LEN)(csp)
	cfld	fs8, (23 * CAP_LEN)(csp)
	cfld	fs9, (24 * CAP_LEN)(csp)
	cfld	fs10, (25 * CAP_LEN)(csp)
	cfld	fs11, (26 * CAP_LEN)(csp)
#endif

	cincoffsetimm	csp, csp, JUMP_BUFFER_SIZE

	bnez	t0, 2f
	cret
2:
	ASM_LOCAL_TAILCALL(t1, cerror)
END(coaccept)
