.\"
.\" Copyright (c) 2018 Edward Tomasz Napierala <en322@cl.cam.ac.uk>
.\" All rights reserved.
.\"
.\" This software was developed by SRI International and the University of
.\" Cambridge Computer Laboratory under DARPA/AFRL contract (FA8750-10-C-0237)
.\" ("CTSRD"), as part of the DARPA CRASH research programme.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD$
.\"
.Dd November 19, 2020
.Dt COCALL 2
.Os
.Sh NAME
.Nm COCALL
.Nd perform a colocated call
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In unistd.h
.Ft ssize_t
.Fn cocall "void * __capability target" "const void * __capability outbuf" "size_t outlen" "void * __capability inbuf" "size_t inlen"
.Ft ssize_t
.Fn cocall_slow "void * __capability target" "const void * __capability outbuf" "size_t outlen" "void * __capability inbuf" "size_t inlen"
.Sh DESCRIPTION
The
.Fn cocall
function performs a colocated call to the callee indicated by the
.Ar target
argument.
Before passing execution to the callee,
.Fa outlen
bytes pointed to by
.Fa outbuf
will be copied to the input buffer provided by the callee.
Before returning, at most
.Fa inlen
bytes will be copied from the callee's output buffer into
.Fa inbuf .
Any capabilities copied will have their tag bits cleared.
.Pp
.Fn cocall 2
attempts to use the switcher-based
.Fn _cocall 2
fast path first, transparently falling back to
.Fn cocall_slow 2
if required.
.Fn cocall_slow 2
can be used to force the slow syscall path; it provides
the same semantic otherwise.
.Pp
The
.Ar target
argument is a sealed capability usually retrieved with
.Xr colookup 2 .
The
.Fa outbuf ,
.Fa inbuf ,
.Fa outlen ,
and
.Fa inlen
values must be 8-byte aligned.
.Pp
Before calling those functions for the first time, one must call
.Xr cosetup 2
with
.Dv COSETUP_COCALL
argument.
.Sh RETURN VALUES
Upon successful completion the number of bytes copied into
.Fa inbuf
is returned.
Otherwise a -1 is returned and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn cocall
function will fail if:
.Bl -tag -width Er
.It Bq Er EAGAIN
The callee has not called
.Xr coaccept 2
yet.
.It Bq Er ENOLINK
The callee is no longer available, usually because it exited.
.It Bq Er EPROTOTYPE
Used
.Fn cocall 2
against a callee waiting on
.Fn coaccept_slow 2 ,
or vice versa.
.It Bq Er EINVAL
The
.Fa target
argument is invalid.
.It Bq Er EFAULT
The
.Fa inbuf
or
.Fa outbuf
arguments point outside the process's allocated address space,
or the
.Fa inlen
or
.Fa outlen
reach beyond the allocated memory.
.El
.Sh EXAMPLES
Basic usage example:
.Bd -literal
	void * __capability lookedup;
	uint64_t buf[MAXBSIZE];
	ssize_t received;

	error = cosetup(COSETUP_COCALL);
	if (error != 0)
		err(1, "cosetup");

	error = colookup("target-name", &lookedup);
	if (error != 0)
		err(1, "colookup");

	memset(buf, 0, sizeof(buf);

	received = cocall(lookedup, buf, sizeof(buf), buf, sizeof(buf));
	if (received < 0)
		err(1, "cocall");
.Ed
.Sh SEE ALSO
.Xr coping 1 ,
.Xr coaccept 2 ,
.Xr coexec 2 ,
.Xr cogetpid 2 ,
.Xr colookup 2 ,
.Xr coregister 2 ,
.Xr cosetup 2
.Sh HISTORY
The
.Fn cocall
system call first appeared in
.Tn CheriBSD .
.Sh AUTHORS
.An -nosplit
These functions were created by
.An Edward Tomasz Napierala Aq Mt trasz@FreeBSD.org
at the University of Cambridge Computer Laboratory under DARPA/AFRL contract
(FA8750-10-C-0237) ("CTSRD"), as part of the DARPA CRASH research programme.
